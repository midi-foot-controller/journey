
/var/folders/v9/f__p9fts3m97z080r3qqv_q00000gn/T/arduino_build_912413/JB_CPU_Usage_Basic2_LED_Improved.ino.elf:     file format elf32-avr

Contents of section .data:
 800100 c0c62d00                             ..-.            
Contents of section .text:
 0000 0c949d00 0c94ba00 0c94ba00 0c94ba00  ................
 0010 0c94ba00 0c94ba00 0c94ba00 0c94ba00  ................
 0020 0c94ba00 0c94ba00 0c94ba00 0c94ba00  ................
 0030 0c94ba00 0c94ba00 0c94ba00 0c94ba00  ................
 0040 0c946401 0c94ba00 0c94ba00 0c94ba00  ..d.............
 0050 0c94ba00 0c94ba00 0c94ba00 0c94ba00  ................
 0060 0c94ba00 0c94ba00 08000000 be922449  ..............$I
 0070 123eabaa aa2abecd cccc4c3e 00000080  .>...*....L>....
 0080 beabaaaa aa3e0000 0000bf00 0000803f  .....>.........?
 0090 00000000 00084178 d3bb4387 d1133d19  ......Ax..C...=.
 00a0 0e3cc3bd 4282ad2b 3e68ec82 76bed98f  .<..B..+>h..v...
 00b0 e1a93e4c 80efffbe 01c4ff7f 3f000000  ..>L........?...
 00c0 00000763 4236b79b d8a71a39 685618ae  ...cB6.....9hV..
 00d0 baab558c 1d3cb7cc 5763bd6d edfd753e  ..U..<..Wc.m..u>
 00e0 f6177231 bf000000 803f0000 00002400  ..r1.....?....$.
 00f0 27002a00 00000000 25002800 2b000404  '.*.....%.(.+...
 0100 04040404 04040202 02020202 03030303  ................
 0110 03030102 04081020 40800102 04081020  ....... @...... 
 0120 01020408 10200000 00080002 01000003  ..... ..........
 0130 04070000 00000000 00001124 1fbecfef  ...........$....
 0140 d8e0debf cdbf11e0 a0e0b1e0 e2eefce0  ................
 0150 02c00590 0d92a430 b107d9f7 21e0a4e0  .......0....!...
 0160 b1e001c0 1d92a131 b207e1f7 0e94ae01  .......1........
 0170 0c946f06 0c940000 e3e3f1e0 9491efe1  ..o.............
 0180 f1e02491 ebe0f1e0 e491ee23 09f43cc0  ..$........#..<.
 0190 992339f1 933091f0 38f49130 a9f09230  .#9..0..8..0...0
 01a0 01f594b5 9f7d12c0 973091f0 9830a1f0  .....}...0...0..
 01b0 9430b9f4 90918000 9f7d03c0 90918000  .0.......}......
 01c0 9f779093 80000dc0 94b59f77 94bd09c0  .w.........w....
 01d0 9091b000 9f7703c0 9091b000 9f7d9093  .....w.......}..
 01e0 b000f0e0 ee0fff1f ec50ff4f a591b491  .........P.O....
 01f0 9fb7f894 811104c0 8c912095 282302c0  .......... .(#..
 0200 ec912e2b 2c939fbf 08953fb7 f8948091  ...+,.....?.....
 0210 0d019091 0e01a091 0f01b091 100126b5  ..............&.
 0220 a89b05c0 2f3f19f0 0196a11d b11d3fbf  ..../?........?.
 0230 ba2fa92f 982f8827 820f911d a11db11d  ./././.'........
 0240 bc01cd01 42e0660f 771f881f 991f4a95  ....B.f.w.....J.
 0250 d1f70895 8f929f92 af92bf92 cf92df92  ................
 0260 ef92ff92 6b017c01 0e940501 4b015c01  ....k.|.....K.\.
 0270 c114d104 e104f104 f1f00e94 0501dc01  ................
 0280 cb018819 9909aa09 bb09883e 9340a105  ...........>.@..
 0290 b10570f3 21e0c21a d108e108 f10888ee  ..p.!...........
 02a0 880e83e0 981ea11c b11cc114 d104e104  ................
 02b0 f10419f7 ddcfff90 ef90df90 cf90bf90  ................
 02c0 af909f90 8f900895 1f920f92 0fb60f92  ................
 02d0 11242f93 3f938f93 9f93af93 bf938091  .$/.?...........
 02e0 09019091 0a01a091 0b01b091 0c013091  ..............0.
 02f0 080123e0 230f2d37 20f40196 a11db11d  ..#.#.-7 .......
 0300 05c026e8 230f0296 a11db11d 20930801  ..&.#....... ...
 0310 80930901 90930a01 a0930b01 b0930c01  ................
 0320 80910d01 90910e01 a0910f01 b0911001  ................
 0330 0196a11d b11d8093 0d019093 0e01a093  ................
 0340 0f01b093 1001bf91 af919f91 8f913f91  ..............?.
 0350 2f910f90 0fbe0f90 1f901895 789484b5  /...........x...
 0360 826084bd 84b58160 84bd85b5 826085bd  .`.....`.....`..
 0370 85b58160 85bd8091 6e008160 80936e00  ...`....n..`..n.
 0380 10928100 80918100 82608093 81008091  .........`......
 0390 81008160 80938100 80918000 81608093  ...`.........`..
 03a0 80008091 b1008460 8093b100 8091b000  .......`........
 03b0 81608093 b0008091 7a008460 80937a00  .`......z..`..z.
 03c0 80917a00 82608093 7a008091 7a008160  ..z..`..z...z..`
 03d0 80937a00 80917a00 80688093 7a001092  ..z...z..h..z...
 03e0 c100efe1 f1e02491 ebe0f1e0 84918823  ......$........#
 03f0 99f090e0 880f991f fc01e651 ff4fa591  ...........Q.O..
 0400 b491fc01 ec50ff4f 85919491 8fb7f894  .....P.O........
 0410 ec91e22b ec938fbf 2fb7f894 80910901  ...+..../.......
 0420 90910a01 a0910b01 b0910c01 2fbf8093  ............/...
 0430 04019093 0501a093 0601b093 070180e0  ................
 0440 282e80e0 382e8091 00019091 0101a091  (...8...........
 0450 0201b091 0301ac01 bd014150 51096109  ..........APQ.a.
 0460 71094093 00015093 01016093 02017093  q.@...P...`...p.
 0470 0301892b 8a2b8b2b 09f08dc0 2fb7f894  ...+.+.+..../...
 0480 80910901 90910a01 a0910b01 b0910c01  ................
 0490 2fbf0091 04011091 05012091 06013091  /......... ...0.
 04a0 0701bc01 cd01601b 710b820b 930b0e94  ......`.q.......
 04b0 e7036b01 7c010e94 75040e94 b1034b01  ..k.|...u.....K.
 04c0 072e000c 880b990b 0e94e903 9b01ac01  ................
 04d0 60e070e0 80e291e4 0e943a05 9b01ac01  `.p.......:.....
 04e0 c701b601 0e943f03 2b013c01 c0e0d0e0  ......?.+.<.....
 04f0 8c169d06 0cf44fc0 81e00e94 bc0060ed  ......O.......`.
 0500 77e080e0 90e00e94 2a0180e0 0e94bc00  w.......*.......
 0510 6aef70e0 80e090e0 0e942a01 c301b201  j.p.......*.....
 0520 0e94b103 6b017c01 5b0100e0 10e00a15  ....k.|.[.......
 0530 1b05acf4 81e00e94 bc006aef 70e080e0  ..........j.p...
 0540 90e00e94 2a0180e0 0e94bc00 6aef70e0  ....*.......j.p.
 0550 80e090e0 0e942a01 0f5f1f4f e8cf68ee  ......*.._.O..h.
 0560 73e080e0 90e00e94 2a01b601 dd0c880b  s.......*.......
 0570 990b0e94 e9039b01 ac01c301 b2010e94  ................
 0580 d20220e0 30e040e2 51e40e94 cd042b01  .. .0.@.Q.....+.
 0590 3c012196 adcf2114 310409f4 54cf0e94  <.!...!.1...T...
 05a0 000051cf 5058bb27 aa270e94 ea020c94  ..Q.PX.'.'......
 05b0 3b040e94 2d0438f0 0e943404 20f039f4  ;...-.8...4. .9.
 05c0 9f3f19f4 26f40c94 2a040ef4 e095e7fb  .?..&...*.......
 05d0 0c942404 e92f0e94 4c0458f3 ba176207  ..$../..L.X...b.
 05e0 73078407 950720f0 79f4a6f5 0c946e04  s..... .y.....n.
 05f0 0ef4e095 0b2eba2f a02d0b01 b9019001  ......./.-......
 0600 0c01ca01 a0011124 ff27591b 99f0593f  .......$.'Y...Y?
 0610 50f4503e 68f11a16 f040a22f 232f342f  P.P>h....@./#/4/
 0620 4427585f f3cf4695 37952795 a795f040  D'X_..F.7.'....@
 0630 5395c9f7 7ef41f16 ba0b620b 730b840b  S...~.....b.s...
 0640 baf09150 a1f0ff0f bb1f661f 771f881f  ...P......f.w...
 0650 c2f70ec0 ba0f621f 731f841f 48f48795  ......b.s...H...
 0660 77956795 b795f795 9e3f08f0 b0cf9395  w.g......?......
 0670 880f08f0 9927ee0f 97958795 08950e94  .....'..........
 0680 53030c94 3b040e94 340458f0 0e942d04  S...;...4.X...-.
 0690 40f029f4 5f3f29f0 0c942404 51110c94  @.)._?)...$.Q...
 06a0 6f040c94 2a040e94 4c0468f3 9923b1f3  o...*...L.h..#..
 06b0 552391f3 951b550b bb27aa27 62177307  U#....U..'.'b.s.
 06c0 840738f0 9f5f5f4f 220f331f 441faa1f  ..8..__O".3.D...
 06d0 a9f335d0 0e2e3af0 e0e832d0 91505040  ..5...:...2..PP@
 06e0 e695001c caf72bd0 fe2f29d0 660f771f  ......+../).f.w.
 06f0 881fbb1f 26173707 4807ab07 b0e809f0  ....&.7.H.......
 0700 bb0b802d bf01ff27 93585f4f 3af09e3f  ...-...'.X_O:..?
 0710 510578f0 0c942404 0c946f04 5f3fe4f3  Q.x...$...o._?..
 0720 983ed4f3 86957795 6795b795 f7959f5f  .>....w.g......_
 0730 c9f7880f 911d9695 879597f9 0895e1e0  ................
 0740 660f771f 881fbb1f 62177307 8407ba07  f.w.....b.s.....
 0750 20f0621b 730b840b ba0bee1f 88f7e095   .b.s...........
 0760 08950e94 b8036894 b1110c94 6f040895  ......h.....o...
 0770 0e945404 88f09f57 98f0b92f 9927b751  ..T....W.../.'.Q
 0780 b0f0e1f0 660f771f 881f991f 1af0ba95  ....f.w.........
 0790 c9f714c0 b13091f0 0e946e04 b1e00895  .....0....n.....
 07a0 0c946e04 672f782f 8827b85f 39f0b93f  ..n.g/x/.'._9..?
 07b0 ccf38695 77956795 b395d9f7 3ef49095  ....w.g.....>...
 07c0 80957095 61957f4f 8f4f9f4f 0895e894  ..p.a..O.O.O....
 07d0 09c097fb 3ef49095 80957095 61957f4f  ....>.....p.a..O
 07e0 8f4f9f4f 9923a9f0 f92f96e9 bb279395  .O.O.#.../...'..
 07f0 f6958795 77956795 b795f111 f8cffaf4  ....w.g.........
 0800 bb0f11f4 60ff1bc0 6f5f7f4f 8f4f9f4f  ....`...o_.O.O.O
 0810 16c08823 11f096e9 11c07723 21f09ee8  ...#......w#!...
 0820 872f762f 05c06623 71f096e8 862f70e0  ./v/..f#q..../p.
 0830 60e02af0 9a95660f 771f881f daf7880f  `.*...f.w.......
 0840 96958795 97f90895 97f99f67 80e870e0  ...........g..p.
 0850 60e00895 9fef80ec 08950024 0a941616  `..........$....
 0860 17061806 09060895 00240a94 12161306  .........$......
 0870 14060506 0895092e 0394000c 11f48823  ...............#
 0880 52f0bb0f 40f4bf2b 11f460ff 04c06f5f  R...@..+..`...o_
 0890 7f4f8f4f 9f4f0895 57fd9058 440f551f  .O.O.O..W..XD.U.
 08a0 59f05f3f 71f04795 880f97fb 991f61f0  Y._?q.G.......a.
 08b0 9f3f79f0 87950895 12161306 1406551f  .?y...........U.
 08c0 f2cf4695 f1df08c0 16161706 1806991f  ..F.............
 08d0 f1cf8695 71056105 08940895 e894bb27  ....q.a........'
 08e0 66277727 cb0197f9 08950e94 850429ed  f'w'..........).
 08f0 3be54eed 5ee30c94 cd0416f0 0c94c405  ;.N.^...........
 0900 0c942a04 68940c94 24040e94 5404a8f3  ..*.h...$...T...
 0910 9923c1f3 aef3df93 cf931f93 0f93ff92  .#..............
 0920 c92fdd27 88232af0 2197660f 771f881f  ./.'.#*.!.f.w...
 0930 daf720e0 30e040e8 5feb9fe3 883920f0  .. .0.@._....9 .
 0940 803e38f0 21968f77 0e94d302 e8e6f0e0  .>8.!..w........
 0950 04c00e94 d302e5e9 f0e00e94 d2058b01  ................
 0960 be01ec01 fb2e6f57 71097595 771f880b  ......oWq.u.w...
 0970 990b0e94 e90328e1 32e741e3 5fe30e94  ......(.2.A._...
 0980 e004af2d 9801ae01 ff900f91 1f91cf91  ...-............
 0990 df910e94 ea020c94 3b040e94 e0040c94  ........;.......
 09a0 3b040e94 2d0438f0 0e943404 20f09523  ;...-.8...4. ..#
 09b0 11f00c94 24040c94 2a041124 0c946f04  ....$...*..$..o.
 09c0 0e944c04 70f3959f c1f3950f 50e0551f  ..L.p.......P.U.
 09d0 629ff001 729fbb27 f00db11d 639faa27  b...r..'....c..'
 09e0 f00db11d aa1f649f 6627b00d a11d661f  ......d.f'....f.
 09f0 829f2227 b00da11d 621f739f b00da11d  .."'....b.s.....
 0a00 621f839f a00d611d 221f749f 3327a00d  b.....a.".t.3'..
 0a10 611d231f 849f600d 211d822f 762f6a2f  a.#...`.!../v/j/
 0a20 11249f57 50409af0 f1f08823 4af0ee0f  .$.WP@.....#J...
 0a30 ff1fbb1f 661f771f 881f9150 5040a9f7  ....f.w....PP@..
 0a40 9e3f5105 80f00c94 24040c94 6f045f3f  .?Q.....$...o._?
 0a50 e4f3983e d4f38695 77956795 b795f795  ...>....w.g.....
 0a60 e7959f5f c1f7fe2b 880f911d 96958795  ..._...+........
 0a70 97f90895 fa01ee0f ff1f3096 21053105  ..........0.!.1.
 0a80 a1f16115 710561f4 8038bfe3 9b0749f1  ..a.q.a..8....I.
 0a90 68949038 810561f0 8038bfef 9b0741f0  h..8..a..8....A.
 0aa0 99234af5 ff3fe105 31052105 19f1e894  .#J..?..1.!.....
 0ab0 0894e795 d901aa23 29f4ab2f be2ff85f  .......#).././._
 0ac0 d0f310c0 ff5f70f4 a695e0f7 f73950f0  ....._p......9P.
 0ad0 19f0ff3a 38f49f77 9f930dd0 0f9007fc  ...:8..w........
 0ae0 90580895 46f00c94 2a0460e0 70e080e8  .X..F...*.`.p...
 0af0 9fe30895 4fe79f77 5f934f93 3f932f93  ....O..w_.O.?./.
 0b00 0e948504 2f913f91 4f915f91 0e94cd04  ..../.?.O._.....
 0b10 0c949205 29f416f0 0c942404 0c946e04  ....).....$...n.
 0b20 0c942a04 0e945404 a8f39638 a0f707f8  ..*...T....8....
 0b30 0f92e894 2be33aea 48eb5fe7 0e94e304  ....+.:.H._.....
 0b40 0f920f92 0f924db7 5eb70f92 0e943b06  ......M.^.....;.
 0b50 e2ecf0e0 0e94d205 4f915f91 ef91ff91  ........O._.....
 0b60 e595ee1f ff1f49f0 fe57e068 4427ee0f  ......I..W.hD'..
 0b70 441ffa95 e1f74195 550b0e94 05060f90  D.....A.U.......
 0b80 07fe0c94 f9050895 9f3f31f0 915020f4  .........?1..P .
 0b90 87957795 6795b795 880f911d 96958795  ..w.g...........
 0ba0 97f90895 df93cf93 1f930f93 ff92ef92  ................
 0bb0 df927b01 8c016894 06c0da2e ef010e94  ..{...h.........
 0bc0 e004fe01 e894a591 25913591 45915591  ........%.5.E.U.
 0bd0 a6f3ef01 0e94ea02 fe019701 a801da94  ................
 0be0 69f7df90 ef90ff90 0f911f91 cf91df91  i...............
 0bf0 08959b01 ac0160e0 70e080e8 9fe30c94  ......`.p.......
 0c00 3f030c94 24040c94 c4050e94 5404d8f3  ?...$.......T...
 0c10 9923c9f3 940f511d a3f39150 504094f0  .#....Q....PP@..
 0c20 59f08823 32f0660f 771f881f 91505040  Y..#2.f.w....PP@
 0c30 c1f79e3f 51052cf7 880f911d 96958795  ...?Q.,.........
 0c40 97f90895 5f3facf0 983e9cf0 bb278695  ...._?...>...'..
 0c50 77956795 b79508f4 b1609395 c1f7bb0f  w.g......`......
 0c60 58f711f4 60ffe8cf 6f5f7f4f 8f4f9f4f  X...`...o_.O.O.O
 0c70 e3cf0c94 6f04fa01 dc01aa0f bb1f9b01  ....o...........
 0c80 ac01bf57 28f42227 33274427 507820c0  ...W(."'3'D'Px .
 0c90 b75190f4 ab2f0024 46953795 2795011c  .Q.../.$F.7.'...
 0ca0 a395d2f3 002071f0 220f331f 441fb395  ..... q.".3.D...
 0cb0 daf30ed0 0c94d202 61307105 a0e88a07  ........a0q.....
 0cc0 b94630f4 9b01ac01 66277727 88279078  .F0.....f'w'.'.x
 0cd0 309621f0 20833183 42835383 0895f894  0.!. .1.B.S.....
 0ce0 ffcf                                 ..              
Contents of section .comment:
 0000 4743433a 2028474e 55292035 2e342e30  GCC: (GNU) 5.4.0
 0010 00                                   .               
Contents of section .note.gnu.avr.deviceinfo:
 0000 04000000 2d000000 01000000 41565200  ....-.......AVR.
 0010 00000000 00800000 00010000 00080000  ................
 0020 00000000 00040000 08000000 01000000  ................
 0030 0061746d 65676133 32387000 00000000  .atmega328p.....
Contents of section .debug_aranges:
 0000 24000000 0200f405 00000400 00000000  $...............
 0010 78010000 e4010000 5c030000 48020000  x.......\...H...
 0020 00000000 00000000 1c000000 0200e00e  ................
 0030 00000400 00000000 de0c0000 04000000  ................
 0040 00000000 00000000 1c000000 02008e0f  ................
 0050 00000400 00000000 46010000 16000000  ........F.......
 0060 00000000 00000000 1c000000 02003c10  ..............<.
 0070 00000400 00000000 5c010000 10000000  ........\.......
 0080 00000000 00000000                    ........        
Contents of section .debug_info:
 0000 f0050000 02000000 00000401 00000000  ................
 0010 00000000 020f0000 00010803 17000000  ................
 0020 02070414 00000005 1b000000 ff030006  ................
 0030 20000000 00002200 00000105 03000081   .....".........
 0040 00072900 00000000 14000000 010503c6  ..).............
 0050 00800008 2e000000 00001400 00000105  ................
 0060 03c00080 00093500 00000000 14000000  ......5.........
 0070 010503c1 0080000a 3c000000 00001400  ........<.......
 0080 00000105 03c20080 000b4300 00000000  ..........C.....
 0090 1b000000 010503c4 0080000c 49000000  ............I...
 00a0 00001400 00000105 03bd0080 000d4f00  ..............O.
 00b0 00000000 14000000 010503b8 0080000e  ................
 00c0 54000000 00001400 00000105 03bc0080  T...............
 00d0 000f5900 00000000 14000000 010503b9  ..Y.............
 00e0 00800010 5e000000 00001400 00000105  ....^...........
 00f0 03bb0080 00116300 00000000 14000000  ......c.........
 0100 010503ba 00800012 68000000 00001400  ........h.......
 0110 00000105 036f0080 00136f00 00000000  .....o....o.....
 0120 14000000 01050336 00800014 75000000  .......6....u...
 0130 00001400 00000105 03800080 00157c00  ..............|.
 0140 00000000 14000000 01050381 00800016  ................
 0150 83000000 00001400 00000105 03820080  ................
 0160 00178a00 00000000 1b000000 01050384  ................
 0170 00800018 90000000 00001b00 00000105  ................
 0180 03880080 00199600 00000000 1b000000  ................
 0190 0105038a 0080001a 9c000000 00001b00  ................
 01a0 00000105 03860080 001ba100 00000000  ................
 01b0 14000000 01050343 0080001c a7000000  .......C........
 01c0 00001400 00000105 03700080 001dae00  .........p......
 01d0 00000000 14000000 01050337 0080001e  ...........7....
 01e0 b4000000 00001400 00000105 03b00080  ................
 01f0 001fbb00 00000000 14000000 010503b1  ................
 0200 00800020 c2000000 00001400 00000105  ... ............
 0210 03b20080 0021c800 00000000 14000000  .....!..........
 0220 010503b4 00800022 ce000000 00001400  ......."........
 0230 00000105 03b30080 0023d400 00000000  .........#......
 0240 14000000 010503b6 00800024 d9000000  ...........$....
 0250 00001400 00000105 03430080 0025df00  .........C...%..
 0260 00000000 14000000 0105037c 00800026  ...........|...&
 0270 e5000000 00001b00 00000105 03780080  .............x..
 0280 0027e900 00000000 14000000 0105037a  .'.............z
 0290 00800028 f0000000 00001400 00000105  ...(............
 02a0 037b0080 0029f700 00000000 14000000  .{...)..........
 02b0 0105037e 0080002a fd000000 00001400  ...~...*........
 02c0 00000105 03500080 002b0201 00000000  .....P...+......
 02d0 14000000 0105037f 0080002c 08010000  ...........,....
 02e0 00001400 00000105 03250080 002d0e01  .........%...-..
 02f0 00000000 14000000 01050324 0080002e  ...........$....
 0300 13010000 00001400 00000105 03230080  .............#..
 0310 002f1801 00000000 14000000 01050328  ./.............(
 0320 00800030 1e010000 00001400 00000105  ...0............
 0330 03270080 00312301 00000000 14000000  .'...1#.........
 0340 01050326 00800032 28010000 00001400  ...&...2(.......
 0350 00000105 032b0080 00332e01 00000000  .....+...3......
 0360 14000000 0105032a 00800034 33010000  .......*...43...
 0370 00001400 00000105 03290080 00353801  .........)...58.
 0380 00000000 14000000 01050348 00800036  ...........H...6
 0390 3e010000 00001400 00000105 03470080  >............G..
 03a0 00374401 00000000 14000000 01050346  .7D............F
 03b0 00800038 4a010000 00001400 00000105  ...8J...........
 03c0 03450080 00395101 00000000 14000000  .E...9Q.........
 03d0 01050344 0080003a 58010000 00001400  ...D...:X.......
 03e0 00000105 036e0080 003b5f01 00000000  .....n...;_.....
 03f0 14000000 01050335 0080003c 65010000  .......5...<e...
 0400 00001400 00000105 03430080 003d6b01  .........C...=k.
 0410 00000000 14000000 01050369 0080003e  ...........i...>
 0420 71010000 00001400 00000105 033d0080  q............=..
 0430 003f7701 00000000 14000000 0105033c  .?w............<
 0440 00800040 7c010000 00001400 00000105  ...@|...........
 0450 03680080 00418201 00000000 14000000  .h...A..........
 0460 0105036d 00800042 89010000 00001400  ...m...B........
 0470 00000105 036c0080 00439001 00000000  .....l...C......
 0480 14000000 0105036b 00800044 97010000  .......k...D....
 0490 00001400 00000105 033b0080 00459d01  .........;...E..
 04a0 00000000 14000000 0105034e 00800046  ...........N...F
 04b0 a2010000 00001400 00000105 034d0080  .............M..
 04c0 0047a701 00000000 14000000 0105034c  .G.............L
 04d0 00800048 ac010000 00001400 00000105  ...H............
 04e0 03600080 0049b301 00000000 14000000  .`...I..........
 04f0 01050364 0080004a b7010000 00001400  ...d...J........
 0500 00000105 03660080 004bbe01 00000000  .....f...K......
 0510 14000000 01050361 0080004c c4010000  .......a...L....
 0520 00001400 00000105 035f0080 004dc901  ........._...M..
 0530 00000000 1b000000 0105035d 0080004e  ...........]...N
 0540 cc010000 00001400 00000105 03570080  .............W..
 0550 004fd301 00000000 14000000 01050355  .O.............U
 0560 00800050 d9010000 00001400 00000105  ...P............
 0570 03540080 0051df01 00000000 14000000  .T...Q..........
 0580 01050353 00800052 e4010000 00001400  ...S...R........
 0590 00000105 034b0080 0053eb01 00000000  .....K...S......
 05a0 14000000 0105034a 00800054 f2010000  .......J...T....
 05b0 00001400 00000105 033e0080 0055f901  .........>...U..
 05c0 00000000 1b000000 01050341 00800056  ...........A...V
 05d0 fe010000 00001400 00000105 03400080  .............@..
 05e0 00570302 00000000 14000000 0105033f  .W.............?
 05f0 00800000 e8080000 0200a205 00000401  ................
 0600 19030000 048c0400 00580000 00000000  .........X......
 0610 00000000 001a0000 00020404 a3020000  ................
 0620 03300400 00057e37 00000002 0108c002  .0....~7........
 0630 00000383 04000005 80490000 00020207  .........I......
 0640 e5020000 03990400 0005825b 00000002  ...........[....
 0650 0407e002 00000402 05696e74 0005fc03  .........int....
 0660 0000011d 01570100 00067069 6e00011d  .....W....pin...
 0670 2c000000 07380400 00011d2c 00000008  ,....8.....,....
 0680 62697400 011f2c00 00000965 04000001  bit...,....e....
 0690 202c0000 00087265 67000121 57010000   ,....reg..!W...
 06a0 086f7574 00012157 0100000a c8000000  .out..!W........
 06b0 09040400 0001362c 00000000 0ad90000  ......6,........
 06c0 00090404 00000130 2c000000 000aea00  .......0,.......
 06d0 00000904 04000001 2a2c0000 00000a06  ........*,......
 06e0 01000009 31020000 01273e00 00000948  ....1....'>....H
 06f0 04000001 273e0000 00000a22 01000009  ....'>....."....
 0700 31020000 01263e00 00000948 04000001  1....&>....H....
 0710 263e0000 00000a3e 01000009 31020000  &>.....>....1...
 0720 01203e00 00000948 04000001 202c0000  . >....H.... ,..
 0730 00000b09 31020000 011f3e00 00000948  ....1.....>....H
 0740 04000001 1f2c0000 0000000c 02640100  .....,.......d..
 0750 00020108 30040000 0d5d0100 00056d02  ....0....]....m.
 0760 0000018a 012f0200 00067069 6e00018a  ...../....pin...
 0770 2c000000 0676616c 00018a2c 00000009  ,....val...,....
 0780 ce020000 018c2c00 00000862 69740001  ......,....bit..
 0790 8d2c0000 00096504 0000018e 2c000000  .,....e.....,...
 07a0 086f7574 00018f57 01000009 04040000  .out...W........
 07b0 01992c00 00000ade 01000009 31020000  ..,.........1...
 07c0 01973e00 00000948 04000001 973e0000  ..>....H.....>..
 07d0 00000afa 01000009 31020000 018e3e00  ........1.....>.
 07e0 00000948 04000001 8e2c0000 00000a16  ...H.....,......
 07f0 02000009 31020000 018d3e00 00000948  ....1.....>....H
 0800 04000001 8d2c0000 00000b09 31020000  .....,......1...
 0810 018c3e00 00000948 04000001 8c2c0000  ..>....H.....,..
 0820 00000005 3d040000 014b0147 02000007  ....=....K.G....
 0830 ce020000 014b2c00 0000000e 0c040000  .....K,.........
 0840 01015e02 000009ce 02000001 4b2c0000  ..^.........K,..
 0850 00000f69 01000078 0100000a 02000003  ...i...x........
 0860 92200201 59030000 10800100 00000000  . ..Y...........
 0870 00118b01 00003a00 00001196 01000084  ......:.........
 0880 00000011 a1010000 b0000000 11ac0100  ................
 0890 00c30000 0011b701 0000db00 00001275  ...............u
 08a0 0100000d 13780100 007e0100 00d00200  .....x...~......
 08b0 00111702 0000ee00 00001122 0200003a  ..........."...:
 08c0 00000000 137e0100 00840100 00f00200  .....~..........
 08d0 0011ff01 00000601 0000110a 02000084  ................
 08e0 00000000 13840100 008a0100 00100300  ................
 08f0 0011e301 00001e01 000011ee 010000b0  ................
 0900 00000000 142f0200 00940100 00e20100  ...../..........
 0910 0001953c 03000010 3b020000 36010000  ...<....;...6...
 0920 15c80100 00cc0100 00165202 00000000  ..........R.....
 0930 15e20100 00f00100 0011c701 00008001  ................
 0940 000011d2 010000c3 00000000 00177f02  ................
 0950 0000024f 5b000000 0a020000 54020000  ...O[.......T...
 0960 03922002 019d0300 00186d00 02505b00  .. .......m..P[.
 0970 00009801 00001904 04000002 512c0000  ............Q,..
 0980 00b60100 001a7400 02512c00 00000162  ......t..Q,....b
 0990 001bc804 0000061c 011cba02 0000026a  ...............j
 09a0 54020000 c8020000 d5010000 01ed0300  T...............
 09b0 001d6d73 00026a5b 00000052 02000019  ..ms..j[...R....
 09c0 67020000 026c5000 00008602 00001e6c  g....lP........l
 09d0 02000059 0300001e 7e020000 59030000  ...Y....~...Y...
 09e0 001f0177 04000002 2dc80200 005c0300  ...w....-....\..
 09f0 00c80200 00012104 0000186d 0002325b  ......!....m..2[
 0a00 00000045 03000018 66000233 37000000  ...E....f..37...
 0a10 b8030000 001b3a02 00000406 011bd402  ......:.........
 0a20 0000031c 011b7a02 000002f1 0120f503  ......z...... ..
 0a30 00000241 5b000000 015e0400 00086d00  ...A[....^....m.
 0a40 02435b00 00000904 04000002 442c0000  .C[.........D,..
 0a50 00001b9e 02000004 0c0105f2 02000004  ................
 0a60 1301b704 00000940 02000004 15be0400  .......@........
 0a70 0009a204 00000416 25000000 09ab0400  ........%.......
 0a80 000417ca 0400000b 08690004 1a620000  .........i...b..
 0a90 000b095a 04000004 20620000 000b0862  ...Z.... b.....b
 0aa0 00042162 00000000 00000002 0407e002  ..!b............
 0ab0 000021b7 04000004 0205696e 740021c3  ..!.......int.!.
 0ac0 04000022 011e0400 00032162 00000001  ..."......!b....
 0ad0 5c030000 a4050000 03922002 01e40700  \......... .....
 0ae0 00233104 00005c03 0000e203 00000323  .#1...\........#
 0af0 14210400 00e20300 003e0400 00032b1b  .!.......>....+.
 0b00 06000014 69000000 e2030000 18040000  ....i...........
 0b10 0408ee05 00001075 000000fd 03000010  .......u........
 0b20 80000000 11040000 15e20300 00180400  ................
 0b30 00118b00 00002504 00001196 00000038  ......%........8
 0b40 04000011 a1000000 4b040000 16ac0000  ........K.......
 0b50 0013e203 0000e803 00007d05 0000113f  ..........}....?
 0b60 01000063 04000011 4a010000 7b040000  ...c....J...{...
 0b70 0013e803 0000ee03 00009d05 00001127  ...............'
 0b80 0100008e 04000011 32010000 38040000  ........2...8...
 0b90 0013f203 00000204 0000bd05 0000110b  ................
 0ba0 010000a6 04000011 16010000 4b040000  ............K...
 0bb0 00130204 00000c04 0000d905 000011ef  ................
 0bc0 000000be 04000016 fa000000 00150c04  ................
 0bd0 00001804 000011bc 000000d6 04000000  ................
 0be0 00002439 04000018 0400002e 04000004  ..$9............
 0bf0 09151804 00002e04 00001149 040000e9  ...........I....
 0c00 04000011 52040000 07050000 00000025  ....R..........%
 0c10 5e040000 46040000 00000000 032ede07  ^...F...........
 0c20 00002666 0400007c 04000020 00000004  ..&f...|... ....
 0c30 0f272000 00001672 04000011 7d040000  .' ....r....}...
 0c40 1a050000 11880400 004e0500 00143904  .........N....9.
 0c50 00007c04 00009204 00000415 89060000  ..|.............
 0c60 157c0400 00920400 00114904 00006605  .|........I...f.
 0c70 00001152 04000084 05000000 00282800  ...R.........((.
 0c80 0000a307 00001194 04000097 05000027  ...............'
 0c90 40000000 119e0400 00bb0500 00132e05  @...............
 0ca0 00005e05 00002007 000011aa 040000d3  ..^... .........
 0cb0 05000029 3a050000 5e020000 d2060000  ...):...^.......
 0cc0 2a016801 31002946 050000a5 030000f1  *.h.1.)F........
 0cd0 0600002a 0c669301 67930168 93016993  ...*.f..g..h..i.
 0ce0 010208fa 00294c05 00005e02 00000407  .....)L...^.....
 0cf0 00002a01 68013000 2b580500 00a50300  ..*.h.0.+X......
 0d00 002a0c66 93016793 01689301 69930102  .*.f..g..h..i...
 0d10 08fa0000 29fe0400 005e0200 00330700  ....)....^...3..
 0d20 002a0168 01310029 0a050000 a5030000  .*.h.1.)........
 0d30 53070000 2a0c6693 01679301 68930169  S...*.f..g..h..i
 0d40 9301030a d0070029 10050000 5e020000  .......)....^...
 0d50 66070000 2a016801 3000291c 050000a5  f...*.h.0.).....
 0d60 03000085 0700002a 0c669301 67930168  .......*.f..g..h
 0d70 93016993 010208fa 002b6a05 0000a503  ..i......+j.....
 0d80 00002a0c 66930167 93016893 01699301  ..*.f..g..h..i..
 0d90 030ae803 0000002c ba040000 bf070000  .......,........
 0da0 2a0c6693 01679301 68930169 930103f5  *.f..g..h..i....
 0db0 0c25002d dc040000 2a0c6693 01679301  .%.-....*.f..g..
 0dc0 68930169 930107f4 25040000 20410000  h..i....%... A..
 0dd0 00002ea2 05000000 2ffb0700 00f40700  ......../.......
 0de0 0030f407 00000400 02020751 04000021  .0.........Q...!
 0df0 3e000000 31a90200 00077e11 08000005  >...1.....~.....
 0e00 03ea0000 0021e407 000031ba 04000004  .....!....1.....
 0e10 025b0000 00050304 01800031 6a040000  .[.........1j...
 0e20 04045b00 00000503 00018000 31230400  ..[.........1#..
 0e30 00022837 00000005 03080180 0031ee03  ..(7.........1..
 0e40 00000227 61080000 05030901 80000204  ...'a...........
 0e50 07e00200 000d5a08 00003108 02000002  ......Z...1.....
 0e60 26610800 0005030d 01800031 1e020000  &a.........1....
 0e70 07868808 00000503 f4000000 21e40700  ............!...
 0e80 002fa408 00009d08 000030f4 07000013  ./........0.....
 0e90 00020108 30040000 219d0800 00318602  ....0...!....1..
 0ea0 00000796 ba080000 0503fe00 0000218d  ..............!.
 0eb0 08000031 4b020000 07add008 00000503  ...1K...........
 0ec0 12010000 218d0800 00310003 000007c4  ....!....1......
 0ed0 e6080000 05032601 0000218d 08000000  ......&...!.....
 0ee0 aa000000 02001d08 00000401 21060000  ............!...
 0ef0 de0c0000 e20c0000 2e2e2f2e 2e2f2e2e  ........../../..
 0f00 2f2e2e2f 6763632f 6c696267 63632f63  /../gcc/libgcc/c
 0f10 6f6e6669 672f6176 722f6c69 62316675  onfig/avr/lib1fu
 0f20 6e63732e 53002f55 73657273 2f6a656e  ncs.S./Users/jen
 0f30 6b696e73 2f6a656e 6b696e73 2f776f72  kins/jenkins/wor
 0f40 6b737061 63652f61 76722d67 63632d73  kspace/avr-gcc-s
 0f50 74616769 6e672f6c 6162656c 2f6d6163  taging/label/mac
 0f60 2d6d696e 692f6763 632d6275 696c642f  -mini/gcc-build/
 0f70 6176722f 61767235 2f6c6962 67636300  avr/avr5/libgcc.
 0f80 474e5520 41532032 2e323600 0180aa00  GNU AS 2.26.....
 0f90 00000200 31080000 04018306 00004601  ....1.........F.
 0fa0 00005c01 00002e2e 2f2e2e2f 2e2e2f2e  ..\...../../../.
 0fb0 2e2f6763 632f6c69 62676363 2f636f6e  ./gcc/libgcc/con
 0fc0 6669672f 6176722f 6c696231 66756e63  fig/avr/lib1func
 0fd0 732e5300 2f557365 72732f6a 656e6b69  s.S./Users/jenki
 0fe0 6e732f6a 656e6b69 6e732f77 6f726b73  ns/jenkins/works
 0ff0 70616365 2f617672 2d676363 2d737461  pace/avr-gcc-sta
 1000 67696e67 2f6c6162 656c2f6d 61632d6d  ging/label/mac-m
 1010 696e692f 6763632d 6275696c 642f6176  ini/gcc-build/av
 1020 722f6176 72352f6c 69626763 6300474e  r/avr5/libgcc.GN
 1030 55204153 20322e32 36000180 aa000000  U AS 2.26.......
 1040 02004508 00000401 1b070000 5c010000  ..E.........\...
 1050 6c010000 2e2e2f2e 2e2f2e2e 2f2e2e2f  l...../../../../
 1060 6763632f 6c696267 63632f63 6f6e6669  gcc/libgcc/confi
 1070 672f6176 722f6c69 62316675 6e63732e  g/avr/lib1funcs.
 1080 53002f55 73657273 2f6a656e 6b696e73  S./Users/jenkins
 1090 2f6a656e 6b696e73 2f776f72 6b737061  /jenkins/workspa
 10a0 63652f61 76722d67 63632d73 74616769  ce/avr-gcc-stagi
 10b0 6e672f6c 6162656c 2f6d6163 2d6d696e  ng/label/mac-min
 10c0 692f6763 632d6275 696c642f 6176722f  i/gcc-build/avr/
 10d0 61767235 2f6c6962 67636300 474e5520  avr5/libgcc.GNU 
 10e0 41532032 2e323600 0180               AS 2.26...      
Contents of section .debug_abbrev:
 0000 01110125 0e100600 00022400 030e0b0b  ...%......$.....
 0010 3e0b0000 03240003 0e0b0b3e 0b000004  >....$.....>....
 0020 01014913 00000521 0049132f 05000006  ..I....!.I./....
 0030 3400030e 3a0b3b0b 49133f0c 020a0000  4...:.;.I.?.....
 0040 07340003 0e3a0b3b 0b49133f 0c020a00  .4...:.;.I.?....
 0050 00083400 030e3a0b 3b0b4913 3f0c020a  ..4...:.;.I.?...
 0060 00000934 00030e3a 0b3b0b49 133f0c02  ...4...:.;.I.?..
 0070 0a00000a 3400030e 3a0b3b0b 49133f0c  ....4...:.;.I.?.
 0080 020a0000 0b340003 0e3a0b3b 0b49133f  .....4...:.;.I.?
 0090 0c020a00 000c3400 030e3a0b 3b0b4913  ......4...:.;.I.
 00a0 3f0c020a 00000d34 00030e3a 0b3b0b49  ?......4...:.;.I
 00b0 133f0c02 0a00000e 3400030e 3a0b3b0b  .?......4...:.;.
 00c0 49133f0c 020a0000 0f340003 0e3a0b3b  I.?......4...:.;
 00d0 0b49133f 0c020a00 00103400 030e3a0b  .I.?......4...:.
 00e0 3b0b4913 3f0c020a 00001134 00030e3a  ;.I.?......4...:
 00f0 0b3b0b49 133f0c02 0a000012 3400030e  .;.I.?......4...
 0100 3a0b3b0b 49133f0c 020a0000 13340003  :.;.I.?......4..
 0110 0e3a0b3b 0b49133f 0c020a00 00143400  .:.;.I.?......4.
 0120 030e3a0b 3b0b4913 3f0c020a 00001534  ..:.;.I.?......4
 0130 00030e3a 0b3b0b49 133f0c02 0a000016  ...:.;.I.?......
 0140 3400030e 3a0b3b0b 49133f0c 020a0000  4...:.;.I.?.....
 0150 17340003 0e3a0b3b 0b49133f 0c020a00  .4...:.;.I.?....
 0160 00183400 030e3a0b 3b0b4913 3f0c020a  ..4...:.;.I.?...
 0170 00001934 00030e3a 0b3b0b49 133f0c02  ...4...:.;.I.?..
 0180 0a00001a 3400030e 3a0b3b0b 49133f0c  ....4...:.;.I.?.
 0190 020a0000 1b340003 0e3a0b3b 0b49133f  .....4...:.;.I.?
 01a0 0c020a00 001c3400 030e3a0b 3b0b4913  ......4...:.;.I.
 01b0 3f0c020a 00001d34 00030e3a 0b3b0b49  ?......4...:.;.I
 01c0 133f0c02 0a00001e 3400030e 3a0b3b0b  .?......4...:.;.
 01d0 49133f0c 020a0000 1f340003 0e3a0b3b  I.?......4...:.;
 01e0 0b49133f 0c020a00 00203400 030e3a0b  .I.?..... 4...:.
 01f0 3b0b4913 3f0c020a 00002134 00030e3a  ;.I.?.....!4...:
 0200 0b3b0b49 133f0c02 0a000022 3400030e  .;.I.?....."4...
 0210 3a0b3b0b 49133f0c 020a0000 23340003  :.;.I.?.....#4..
 0220 0e3a0b3b 0b49133f 0c020a00 00243400  .:.;.I.?.....$4.
 0230 030e3a0b 3b0b4913 3f0c020a 00002534  ..:.;.I.?.....%4
 0240 00030e3a 0b3b0b49 133f0c02 0a000026  ...:.;.I.?.....&
 0250 3400030e 3a0b3b0b 49133f0c 020a0000  4...:.;.I.?.....
 0260 27340003 0e3a0b3b 0b49133f 0c020a00  '4...:.;.I.?....
 0270 00283400 030e3a0b 3b0b4913 3f0c020a  .(4...:.;.I.?...
 0280 00002934 00030e3a 0b3b0b49 133f0c02  ..)4...:.;.I.?..
 0290 0a00002a 3400030e 3a0b3b0b 49133f0c  ...*4...:.;.I.?.
 02a0 020a0000 2b340003 0e3a0b3b 0b49133f  ....+4...:.;.I.?
 02b0 0c020a00 002c3400 030e3a0b 3b0b4913  .....,4...:.;.I.
 02c0 3f0c020a 00002d34 00030e3a 0b3b0b49  ?.....-4...:.;.I
 02d0 133f0c02 0a00002e 3400030e 3a0b3b0b  .?......4...:.;.
 02e0 49133f0c 020a0000 2f340003 0e3a0b3b  I.?...../4...:.;
 02f0 0b49133f 0c020a00 00303400 030e3a0b  .I.?.....04...:.
 0300 3b0b4913 3f0c020a 00003134 00030e3a  ;.I.?.....14...:
 0310 0b3b0b49 133f0c02 0a000032 3400030e  .;.I.?.....24...
 0320 3a0b3b0b 49133f0c 020a0000 33340003  :.;.I.?.....34..
 0330 0e3a0b3b 0b49133f 0c020a00 00343400  .:.;.I.?.....44.
 0340 030e3a0b 3b0b4913 3f0c020a 00003534  ..:.;.I.?.....54
 0350 00030e3a 0b3b0b49 133f0c02 0a000036  ...:.;.I.?.....6
 0360 3400030e 3a0b3b0b 49133f0c 020a0000  4...:.;.I.?.....
 0370 37340003 0e3a0b3b 0b49133f 0c020a00  74...:.;.I.?....
 0380 00383400 030e3a0b 3b0b4913 3f0c020a  .84...:.;.I.?...
 0390 00003934 00030e3a 0b3b0b49 133f0c02  ..94...:.;.I.?..
 03a0 0a00003a 3400030e 3a0b3b0b 49133f0c  ...:4...:.;.I.?.
 03b0 020a0000 3b340003 0e3a0b3b 0b49133f  ....;4...:.;.I.?
 03c0 0c020a00 003c3400 030e3a0b 3b0b4913  .....<4...:.;.I.
 03d0 3f0c020a 00003d34 00030e3a 0b3b0b49  ?.....=4...:.;.I
 03e0 133f0c02 0a00003e 3400030e 3a0b3b0b  .?.....>4...:.;.
 03f0 49133f0c 020a0000 3f340003 0e3a0b3b  I.?.....?4...:.;
 0400 0b49133f 0c020a00 00403400 030e3a0b  .I.?.....@4...:.
 0410 3b0b4913 3f0c020a 00004134 00030e3a  ;.I.?.....A4...:
 0420 0b3b0b49 133f0c02 0a000042 3400030e  .;.I.?.....B4...
 0430 3a0b3b0b 49133f0c 020a0000 43340003  :.;.I.?.....C4..
 0440 0e3a0b3b 0b49133f 0c020a00 00443400  .:.;.I.?.....D4.
 0450 030e3a0b 3b0b4913 3f0c020a 00004534  ..:.;.I.?.....E4
 0460 00030e3a 0b3b0b49 133f0c02 0a000046  ...:.;.I.?.....F
 0470 3400030e 3a0b3b0b 49133f0c 020a0000  4...:.;.I.?.....
 0480 47340003 0e3a0b3b 0b49133f 0c020a00  G4...:.;.I.?....
 0490 00483400 030e3a0b 3b0b4913 3f0c020a  .H4...:.;.I.?...
 04a0 00004934 00030e3a 0b3b0b49 133f0c02  ..I4...:.;.I.?..
 04b0 0a00004a 3400030e 3a0b3b0b 49133f0c  ...J4...:.;.I.?.
 04c0 020a0000 4b340003 0e3a0b3b 0b49133f  ....K4...:.;.I.?
 04d0 0c020a00 004c3400 030e3a0b 3b0b4913  .....L4...:.;.I.
 04e0 3f0c020a 00004d34 00030e3a 0b3b0b49  ?.....M4...:.;.I
 04f0 133f0c02 0a00004e 3400030e 3a0b3b0b  .?.....N4...:.;.
 0500 49133f0c 020a0000 4f340003 0e3a0b3b  I.?.....O4...:.;
 0510 0b49133f 0c020a00 00503400 030e3a0b  .I.?.....P4...:.
 0520 3b0b4913 3f0c020a 00005134 00030e3a  ;.I.?.....Q4...:
 0530 0b3b0b49 133f0c02 0a000052 3400030e  .;.I.?.....R4...
 0540 3a0b3b0b 49133f0c 020a0000 53340003  :.;.I.?.....S4..
 0550 0e3a0b3b 0b49133f 0c020a00 00543400  .:.;.I.?.....T4.
 0560 030e3a0b 3b0b4913 3f0c020a 00005534  ..:.;.I.?.....U4
 0570 00030e3a 0b3b0b49 133f0c02 0a000056  ...:.;.I.?.....V
 0580 3400030e 3a0b3b0b 49133f0c 020a0000  4...:.;.I.?.....
 0590 57340003 0e3a0b3b 0b49133f 0c020a00  W4...:.;.I.?....
 05a0 00000111 01250e13 0b030e55 06110152  .....%.....U...R
 05b0 01100600 00022400 0b0b3e0b 030e0000  ......$...>.....
 05c0 03160003 0e3a0b3b 0b491300 00042400  .....:.;.I....$.
 05d0 0b0b3e0b 03080000 052e0103 0e3a0b3b  ..>..........:.;
 05e0 0b200b01 13000006 05000308 3a0b3b0b  . ..........:.;.
 05f0 49130000 07050003 0e3a0b3b 0b491300  I........:.;.I..
 0600 00083400 03083a0b 3b0b4913 00000934  ..4...:.;.I....4
 0610 00030e3a 0b3b0b49 1300000a 0b010113  ...:.;.I........
 0620 00000b0b 0100000c 0f000b0b 49130000  ............I...
 0630 0d350049 1300000e 2e01030e 340c200b  .5.I........4. .
 0640 01130000 0f2e0131 13110112 01400a97  .......1.....@..
 0650 420c0113 00001005 00311302 06000011  B........1......
 0660 34003113 02060000 12050031 131c0b00  4.1........1....
 0670 00130b01 11011201 01130000 141d0131  ...............1
 0680 13110112 01580b59 0b011300 00150b01  .....X.Y........
 0690 11011201 00001634 00311300 00172e01  .......4.1......
 06a0 030e3a0b 3b0b4913 11011201 400a9742  ..:.;.I.....@..B
 06b0 0c011300 00183400 03083a0b 3b0b4913  ......4...:.;.I.
 06c0 02060000 19340003 0e3a0b3b 0b491302  .....4...:.;.I..
 06d0 0600001a 34000308 3a0b3b0b 4913020a  ....4...:.;.I...
 06e0 00001b2e 00030e3a 0b3b0b20 0b00001c  .......:.;. ....
 06f0 2e01030e 3a0b3b0b 11011201 40069742  ....:.;.....@..B
 0700 0c011300 001d0500 03083a0b 3b0b4913  ..........:.;.I.
 0710 02060000 1e898201 00110131 1300001f  ...........1....
 0720 2e013f0c 030e3a0b 3b0b1101 12014006  ..?...:.;.....@.
 0730 97420c01 13000020 2e01030e 3a0b3b0b  .B..... ....:.;.
 0740 4913200b 01130000 21260049 13000022  I. .....!&.I..."
 0750 2e013f0c 030e3a0b 3b0b4913 87010c11  ..?...:.;.I.....
 0760 01120140 0a96420c 01130000 231d0031  ...@..B.....#..1
 0770 13110112 01580b59 0b000024 1d013113  .....X.Y...$..1.
 0780 11011201 580b590b 0000251d 01311352  ....X.Y...%..1.R
 0790 01550658 0b590b01 13000026 1d013113  .U.X.Y.....&..1.
 07a0 52015506 580b590b 0000270b 01550600  R.U.X.Y...'..U..
 07b0 00280b01 55060113 00002989 82010111  .(..U.....).....
 07c0 01311301 1300002a 8a820100 020a9142  .1.....*.......B
 07d0 0a00002b 89820101 11013113 00002c89  ...+......1...,.
 07e0 82010111 01011300 002d8982 01011101  .........-......
 07f0 00002e89 82010011 0100002f 01014913  .........../..I.
 0800 01130000 30210049 132f0b00 00313400  ....0!.I./...14.
 0810 030e3a0b 3b0b4913 020a0000 00011100  ..:.;.I.........
 0820 10061101 12010308 1b082508 13050000  ..........%.....
 0830 00011100 10061101 12010308 1b082508  ..............%.
 0840 13050000 00011100 10061101 12010308  ................
 0850 1b082508 13050000 00                 ..%......       
Contents of section .debug_line:
 0000 16000000 02001000 00000201 fb0e0a00  ................
 0010 01010101 00000001 00000306 00000200  ................
 0020 38030000 0201fb0e 0a000101 01010000  8...............
 0030 00012f70 72697661 74652f76 61722f66  ../private/var/f
 0040 6f6c6465 72732f76 392f665f 5f703966  olders/v9/f__p9f
 0050 7473336d 39377a30 38307233 7171765f  ts3m97z080r3qqv_
 0060 71303030 3030676e 2f542f41 70705472  q00000gn/T/AppTr
 0070 616e736c 6f636174 696f6e2f 41333542  anslocation/A35B
 0080 30444146 2d413936 412d3435 41462d38  0DAF-A96A-45AF-8
 0090 3246312d 41464544 31443734 34453743  2F1-AFED1D744E7C
 00a0 2f642f41 72647569 6e6f2031 2e382e39  /d/Arduino 1.8.9
 00b0 2e617070 2f436f6e 74656e74 732f4a61  .app/Contents/Ja
 00c0 76612f68 61726477 6172652f 61726475  va/hardware/ardu
 00d0 696e6f2f 6176722f 636f7265 732f6172  ino/avr/cores/ar
 00e0 6475696e 6f002f5f 73686172 65645f2f  duino./_shared_/
 00f0 6465762f 6465762e 70726f6a 65637473  dev/dev.projects
 0100 2f544f43 2f4d4944 492d464f 4f542d43  /TOC/MIDI-FOOT-C
 0110 4f4e5452 4f4c4c45 522e5055 424c4943  ONTROLLER.PUBLIC
 0120 2e474954 2f617264 75696e6f 2f417264  .GIT/arduino/Ard
 0130 75696e6f 5f494e4f 2f426173 69632f4a  uino_INO/Basic/J
 0140 425f4350 555f5573 6167655f 42617369  B_CPU_Usage_Basi
 0150 63325f4c 45445f49 6d70726f 76656400  c2_LED_Improved.
 0160 2f707269 76617465 2f766172 2f666f6c  /private/var/fol
 0170 64657273 2f76392f 665f5f70 39667473  ders/v9/f__p9fts
 0180 336d3937 7a303830 72337171 765f7130  3m97z080r3qqv_q0
 0190 30303030 676e2f54 2f417070 5472616e  0000gn/T/AppTran
 01a0 736c6f63 6174696f 6e2f4133 35423044  slocation/A35B0D
 01b0 41462d41 3936412d 34354146 2d383246  AF-A96A-45AF-82F
 01c0 312d4146 45443144 37343445 37432f64  1-AFED1D744E7C/d
 01d0 2f417264 75696e6f 20312e38 2e392e61  /Arduino 1.8.9.a
 01e0 70702f43 6f6e7465 6e74732f 4a617661  pp/Contents/Java
 01f0 2f686172 64776172 652f746f 6f6c732f  /hardware/tools/
 0200 6176722f 6176722f 696e636c 75646500  avr/avr/include.
 0210 2f707269 76617465 2f766172 2f666f6c  /private/var/fol
 0220 64657273 2f76392f 665f5f70 39667473  ders/v9/f__p9fts
 0230 336d3937 7a303830 72337171 765f7130  3m97z080r3qqv_q0
 0240 30303030 676e2f54 2f417070 5472616e  0000gn/T/AppTran
 0250 736c6f63 6174696f 6e2f4133 35423044  slocation/A35B0D
 0260 41462d41 3936412d 34354146 2d383246  AF-A96A-45AF-82F
 0270 312d4146 45443144 37343445 37432f64  1-AFED1D744E7C/d
 0280 2f417264 75696e6f 20312e38 2e392e61  /Arduino 1.8.9.a
 0290 70702f43 6f6e7465 6e74732f 4a617661  pp/Contents/Java
 02a0 2f686172 64776172 652f6172 6475696e  /hardware/arduin
 02b0 6f2f6176 722f7661 7269616e 74732f65  o/avr/variants/e
 02c0 69676874 616e616c 6f67696e 70757473  ightanaloginputs
 02d0 2f2e2e2f 7374616e 64617264 00007769  /../standard..wi
 02e0 72696e67 5f646967 6974616c 2e630001  ring_digital.c..
 02f0 00007769 72696e67 2e630001 00006d61  ..wiring.c....ma
 0300 696e2e63 70700001 00004a42 5f435055  in.cpp....JB_CPU
 0310 5f557361 67655f42 61736963 325f4c45  _Usage_Basic2_LE
 0320 445f496d 70726f76 65642e69 6e6f0002  D_Improved.ino..
 0330 00007374 64696e74 2e680003 0000686f  ..stdint.h....ho
 0340 6f6b732e 63000100 0070696e 735f6172  oks.c....pins_ar
 0350 6475696e 6f2e6800 04000000 00050278  duino.h........x
 0360 01000003 89010103 02090000 01030109  ................
 0370 06000103 01090600 01030309 06000103  ................
 0380 04090600 0103b87f 09040001 0315090e  ................
 0390 0001036b 09060001 0306090c 0001037d  ...k...........}
 03a0 09080001 03030906 0001030b 09060001  ................
 03b0 03040904 00010303 09040001 03030908  ................
 03c0 0001032f 090a0001 0302090e 00010301  .../............
 03d0 09020001 03020902 00010301 09040001  ................
 03e0 03020908 00010303 09060001 040203ad  ................
 03f0 7f090400 01030209 00000103 02090200  ................
 0400 01030109 02000103 02091000 01030809  ................
 0410 02000103 01090800 01030609 06000103  ................
 0420 02090200 01030109 22000103 03090200  ........".......
 0430 01030109 14000103 02090800 01030209  ................
 0440 0a000103 01091a00 01030109 0a000103  ................
 0450 7e090c00 01030509 0c000103 ba7f0912  ~...............
 0460 00010303 09160001 03010910 00010303  ................
 0470 09040001 03010904 0001037e 09040001  ...........~....
 0480 03030908 00010301 09040001 03030906  ................
 0490 00010301 09040001 03010910 00010301  ................
 04a0 09260001 09160000 01010403 0005025c  .&.............\
 04b0 03000003 21010402 03d30109 00000103  ....!...........
 04c0 06090200 01030109 06000103 0d090600  ................
 04d0 01030109 06000103 0d090600 01030b09  ................
 04e0 0a000103 03090400 01030209 0a000103  ................
 04f0 0a090a00 01030709 0a000103 09090a00  ................
 0500 01032309 0a000103 01090a00 01030109  ..#.............
 0510 0a000103 17090a00 01030909 0a000104  ................
 0520 0103997d 09040001 03010906 00010303  ...}............
 0530 09060001 03030904 00010301 09100001  ................
 0540 030f090a 00010301 09020001 03010902  ................
 0550 00010301 09060001 0402030b 09020001  ................
 0560 03040902 00010301 09020001 03010910  ................
 0570 00010404 03bf7f09 02000104 03032609  ..............&.
 0580 10000104 04035f09 08000104 02033609  ......_.......6.
 0590 36000103 04090200 01030109 02000103  6...............
 05a0 01091000 01040403 4c090200 01030109  ........L.......
 05b0 24000103 01090a00 01030209 2c000103  $...........,...
 05c0 01090c00 01030109 06000103 01090c00  ................
 05d0 01030109 06000103 02090c00 01030109  ................
 05e0 0e000103 01090a00 01030109 06000103  ................
 05f0 01090c00 01030109 06000103 7c090c00  ............|...
 0600 01030709 06000103 02090c00 01037009  ..............p.
 0610 28000104 03031509 04000109 0e000001  (...............
 0620 015e0000 00020041 00000002 01fb0e0a  .^.....A........
 0630 00010101 01000000 012e2e2f 2e2e2f2e  .........../../.
 0640 2e2f2e2e 2f676363 2f6c6962 6763632f  ./../gcc/libgcc/
 0650 636f6e66 69672f61 76720000 6c696231  config/avr..lib1
 0660 66756e63 732e5300 01000000 000502de  funcs.S.........
 0670 0c000003 e6110103 02090200 01090200  ................
 0680 00010194 00000002 00410000 000201fb  .........A......
 0690 0e0a0001 01010100 0000012e 2e2f2e2e  ............./..
 06a0 2f2e2e2f 2e2e2f67 63632f6c 69626763  /../../gcc/libgc
 06b0 632f636f 6e666967 2f617672 00006c69  c/config/avr..li
 06c0 62316675 6e63732e 53000100 00000005  b1funcs.S.......
 06d0 02460100 0003e912 01030109 02000103  .F..............
 06e0 01090200 01030109 02000103 01090200  ................
 06f0 01030109 02000103 03090200 01030509  ................
 0700 02000103 02090200 01030109 02000103  ................
 0710 01090200 01090200 00010182 00000002  ................
 0720 00410000 000201fb 0e0a0001 01010100  .A..............
 0730 0000012e 2e2f2e2e 2f2e2e2f 2e2e2f67  ...../../../../g
 0740 63632f6c 69626763 632f636f 6e666967  cc/libgcc/config
 0750 2f617672 00006c69 62316675 6e63732e  /avr..lib1funcs.
 0760 53000100 00000005 025c0100 00038913  S........\......
 0770 01030109 02000103 01090200 01030109  ................
 0780 02000103 02090200 01030209 02000103  ................
 0790 01090200 01030109 02000109 02000001  ................
 07a0 01                                   .               
Contents of section .debug_frame:
 0000 10000000 ffffffff 0100027f 240c2002  ............$. .
 0010 a4010000 0c000000 00000000 78010000  ............x...
 0020 92000000 0c000000 00000000 0a020000  ................
 0030 4a000000 34000000 00000000 54020000  J...4.......T...
 0040 74000000 410e0388 02410e04 8903410e  t...A....A....A.
 0050 058a0441 0e068b05 410e078c 06410e08  ...A....A....A..
 0060 8d07410e 098e0841 0e0a8f09 34000000  ..A....A....4...
 0070 00000000 c8020000 94000000 410e0381  ............A...
 0080 02410e04 8003440e 05920441 0e069305  .A....D....A....
 0090 410e0798 06410e08 9907410e 099a0841  A....A....A....A
 00a0 0e0a9b09 0c000000 00000000 5c030000  ............\...
 00b0 48020000                             H...            
Contents of section .debug_str:
 0000 6176722d 6c696263 20322e30 2e300075  avr-libc 2.0.0.u
 0010 696e7438 5f740075 696e7431 365f7400  int8_t.uint16_t.
 0020 5f5f6565 70726f6d 00554452 30005543  __eeprom.UDR0.UC
 0030 53523041 00554353 52304200 55435352  SR0A.UCSR0B.UCSR
 0040 30430055 42525230 00545741 4d520054  0C.UBRR0.TWAMR.T
 0050 57425200 54574352 00545753 52005457  WBR.TWCR.TWSR.TW
 0060 44520054 57415200 54494d53 4b310054  DR.TWAR.TIMSK1.T
 0070 49465231 00544343 52314100 54434352  IFR1.TCCR1A.TCCR
 0080 31420054 43435231 43005443 4e543100  1B.TCCR1C.TCNT1.
 0090 4f435231 41004f43 52314200 49435231  OCR1A.OCR1B.ICR1
 00a0 00475443 43520054 494d534b 32005449  .GTCCR.TIMSK2.TI
 00b0 46523200 54434352 32410054 43435232  FR2.TCCR2A.TCCR2
 00c0 42005443 4e543200 4f435232 42004f43  B.TCNT2.OCR2B.OC
 00d0 52324100 41535352 00475443 43520041  R2A.ASSR.GTCCR.A
 00e0 444d5558 00414443 00414443 53524100  DMUX.ADC.ADCSRA.
 00f0 41444353 52420044 49445230 00414353  ADCSRB.DIDR0.ACS
 0100 52004449 44523100 504f5254 42004444  R.DIDR1.PORTB.DD
 0110 52420050 494e4200 504f5254 43004444  RB.PINB.PORTC.DD
 0120 52430050 494e4300 504f5254 44004444  RC.PINC.PORTD.DD
 0130 52440050 494e4400 4f435230 42004f43  RD.PIND.OCR0B.OC
 0140 52304100 54434e54 30005443 43523042  R0A.TCNT0.TCCR0B
 0150 00544343 52304100 54494d53 4b300054  .TCCR0A.TIMSK0.T
 0160 49465230 00475443 43520045 49435241  IFR0.GTCCR.EICRA
 0170 0045494d 534b0045 49465200 50434943  .EIMSK.EIFR.PCIC
 0180 52005043 4d534b32 0050434d 534b3100  R.PCMSK2.PCMSK1.
 0190 50434d53 4b300050 43494652 00535044  PCMSK0.PCIFR.SPD
 01a0 52005350 53520053 50435200 57445443  R.SPSR.SPCR.WDTC
 01b0 53520050 5252004f 53434341 4c00434c  SR.PRR.OSCCAL.CL
 01c0 4b505200 53524547 00535000 53504d43  KPR.SREG.SP.SPMC
 01d0 5352004d 43554352 004d4355 53520053  SR.MCUCR.MCUSR.S
 01e0 4d435200 4750494f 52320047 50494f52  MCR.GPIOR2.GPIOR
 01f0 31004750 494f5230 00454541 52004545  1.GPIOR0.EEAR.EE
 0200 44520045 45435200 74696d65 72305f6f  DR.EECR.timer0_o
 0210 76657266 6c6f775f 636f756e 7400706f  verflow_count.po
 0220 72745f74 6f5f6f75 74707574 5f50474d  rt_to_output_PGM
 0230 005f5f61 64647231 36007365 74757000  .__addr16.setup.
 0240 656e6454 696d655f 6d730064 69676974  endTime_ms.digit
 0250 616c5f70 696e5f74 6f5f6269 745f6d61  al_pin_to_bit_ma
 0260 736b5f50 474d0073 74617274 00646967  sk_PGM.start.dig
 0270 6974616c 57726974 6500696e 6974006d  italWrite.init.m
 0280 6963726f 73006469 67697461 6c5f7069  icros.digital_pi
 0290 6e5f746f 5f706f72 745f5047 4d006c6f  n_to_port_PGM.lo
 02a0 6f700066 6c6f6174 00706f72 745f746f  op.float.port_to
 02b0 5f6d6f64 655f5047 4d006465 6c617900  _mode_PGM.delay.
 02c0 756e7369 676e6564 20636861 72007469  unsigned char.ti
 02d0 6d657200 696e6974 56617269 616e7400  mer.initVariant.
 02e0 6c6f6e67 20756e73 69676e65 6420696e  long unsigned in
 02f0 74006f75 74707574 52657375 6c747300  t.outputResults.
 0300 64696769 74616c5f 70696e5f 746f5f74  digital_pin_to_t
 0310 696d6572 5f50474d 00474e55 2047494d  imer_PGM.GNU GIM
 0320 504c4520 352e342e 30202d6d 6e2d666c  PLE 5.4.0 -mn-fl
 0330 6173683d 31202d6d 6d63753d 61767235  ash=1 -mmcu=avr5
 0340 202d6d6e 2d666c61 73683d31 202d6d6e   -mn-flash=1 -mn
 0350 6f2d736b 69702d62 7567202d 6d6d6375  o-skip-bug -mmcu
 0360 3d617672 35202d67 202d4f73 202d4f73  =avr5 -g -Os -Os
 0370 202d666d 6174682d 6572726e 6f202d66   -fmath-errno -f
 0380 7369676e 65642d7a 65726f73 202d6674  signed-zeros -ft
 0390 72617070 696e672d 6d617468 202d666e  rapping-math -fn
 03a0 6f2d7472 61707620 2d666e6f 2d6f7065  o-trapv -fno-ope
 03b0 6e6d7020 2d666e6f 2d6f7065 6e616363  nmp -fno-openacc
 03c0 202d666e 6f2d6578 63657074 696f6e73   -fno-exceptions
 03d0 202d6675 73652d6c 696e6b65 722d706c   -fuse-linker-pl
 03e0 7567696e 202d666c 7472616e 73007469  ugin -fltrans.ti
 03f0 6d657230 5f6d696c 6c697300 70696e4d  mer0_millis.pinM
 0400 6f646500 6f6c6453 52454700 7475726e  ode.oldSREG.turn
 0410 4f666650 574d2e70 6172742e 30006d61  OffPWM.part.0.ma
 0420 696e0074 696d6572 305f6672 61637400  in.timer0_fract.
 0430 75696e74 385f7400 6d6f6465 00747572  uint8_t.mode.tur
 0440 6e4f6666 50574d00 5f5f7265 73756c74  nOffPWM.__result
 0450 0073697a 65747970 6500626c 696e6b43  .sizetype.blinkC
 0460 6f756e74 00706f72 74005f6c 6f6f7043  ount.port._loopC
 0470 6f756e74 6572005f 5f766563 746f725f  ounter.__vector_
 0480 31360075 696e7431 365f7400 3c617274  16.uint16_t.<art
 0490 69666963 69616c3e 0075696e 7433325f  ificial>.uint32_
 04a0 7400746f 74616c5f 6d73006e 756d6265  t.total_ms.numbe
 04b0 724f6644 69676974 73005f73 74617274  rOfDigits._start
 04c0 54696d65 5f6d7300 5f5f656d 70747900  Time_ms.__empty.
Contents of section .debug_loc:
 0000 78010000 fa010000 010068fa 01000000  x.........h.....
 0010 02000004 00f30168 9f000200 00040200  .......h........
 0020 00010068 04020000 0a020000 0400f301  ...h............
 0030 689f0000 00000000 00007e01 0000a401  h.........~.....
 0040 00000100 69a80100 00b80100 00010069  ....i..........i
 0050 bc010000 c0010000 010069c8 010000ca  ..........i.....
 0060 01000001 0069d001 0000d401 00000100  .....i..........
 0070 69d80100 00dc0100 00010069 00000000  i..........i....
 0080 00000000 84010000 fc010000 010062fc  ..............b.
 0090 010000fe 01000004 00820020 9f000200  ........... ....
 00a0 00040200 00010062 00000000 00000000  .......b........
 00b0 8a010000 e8010000 01006e00 00000000  ..........n.....
 00c0 000000f0 01000008 02000006 006a9301  .............j..
 00d0 6b930100 00000000 000000f2 01000008  k...............
 00e0 02000001 00690000 00000000 00007c01  .....i........|.
 00f0 00008201 00000600 6e93016f 93010000  ........n..o....
 0100 00000000 00008201 00008801 00000600  ................
 0110 6e93016f 93010000 00000000 00008801  n..o............
 0120 00008a01 00000600 6e93016f 93010000  ........n..o....
 0130 00000000 00009401 0000a401 00000100  ................
 0140 69a80100 00b80100 00010069 bc010000  i..........i....
 0150 c0010000 010069c8 010000ca 01000001  ......i.........
 0160 0069d001 0000d401 00000100 69d80100  .i..........i...
 0170 00dc0100 00010069 00000000 00000000  .......i........
 0180 ec010000 f0010000 06006e93 016f9301  ..........n..o..
 0190 00000000 00000000 1e020000 38020000  ............8...
 01a0 0c006893 01699301 6a93016b 93010000  ..h..i..j..k....
 01b0 00000000 00000c02 00003802 00000100  ..........8.....
 01c0 63380200 00540200 00020008 5f000000  c8...T......_...
 01d0 00000000 00540200 00560200 00030092  .....T...V......
 01e0 20025602 00005802 00000300 92200358   .V...X...... .X
 01f0 0200005a 02000003 00922004 5a020000  ...Z...... .Z...
 0200 5c020000 03009220 055c0200 005e0200  \...... .\...^..
 0210 00030092 20065e02 00006002 00000300  .... .^...`.....
 0220 92200760 02000062 02000003 00922008  . .`...b...... .
 0230 62020000 64020000 03009220 09640200  b...d...... .d..
 0240 00c80200 00030092 200a0000 00000000  ........ .......
 0250 00005402 00006b02 00000c00 66930167  ..T...k.....f..g
 0260 93016893 01699301 6b020000 be020000  ..h..i..k.......
 0270 0c005c93 015d9301 5e93015f 93010000  ..\..]..^.._....
 0280 00000000 00007002 00009e02 00000c00  ......p.........
 0290 58930159 93015a93 015b9301 9e020000  X..Y..Z..[......
 02a0 aa020000 040078e8 079faa02 0000c602  ......x.........
 02b0 00000c00 58930159 93015a93 015b9301  ....X..Y..Z..[..
 02c0 00000000 00000000 c8020000 ca020000  ................
 02d0 03009220 02ca0200 00cc0200 00030092  ... ............
 02e0 2003cc02 0000d402 00000300 922004d4   ............ ..
 02f0 020000d6 02000003 00922005 d6020000  .......... .....
 0300 d8020000 03009220 06d80200 00da0200  ....... ........
 0310 00030092 2007da02 0000dc02 00000300  .... ...........
 0320 922008dc 020000de 02000003 00922009  . ............ .
 0330 de020000 5c030000 03009220 0a000000  ....\...... ....
 0340 00000000 00ee0200 00f20200 000c0068  ...............h
 0350 93016993 016a9301 6b9301f2 02000000  ..i..j..k.......
 0360 03000003 0088019f 00030000 02030000  ................
 0370 0c006893 01699301 6a93016b 93010203  ..h..i..j..k....
 0380 00000c03 00000300 88019f0c 03000030  ...............0
 0390 0300000c 00689301 6993016a 93016b93  .....h..i..j..k.
 03a0 01300300 00460300 00050003 09018000  .0...F..........
 03b0 00000000 00000000 f2020000 f6020000  ................
 03c0 010063f6 02000004 03000001 00620403  ..c..........b..
 03d0 00000603 00000300 83039f06 03000052  ...............R
 03e0 03000001 00625203 00005603 00000500  .....bR...V.....
 03f0 03080180 00000000 00000000 00e20300  ................
 0400 00180400 0002003d 9f000000 00000000  .......=........
 0410 00e20300 00180400 00020031 9f000000  ...........1....
 0420 00000000 00e80300 00180400 00010062  ...............b
 0430 00000000 00000000 ee030000 f8030000  ................
 0440 01006800 00000000 00000002 04000018  ..h.............
 0450 04000006 006a9301 6b930100 00000000  .....j..k.......
 0460 000000e6 030000ec 03000006 006e9301  .............n..
 0470 6f930100 00000000 000000e8 0300001a  o...............
 0480 04000001 00620000 00000000 0000ec03  .....b..........
 0490 0000fa03 00000600 6e93016f 93010000  ........n..o....
 04a0 00000000 0000fe03 00000204 00000600  ................
 04b0 6e93016f 93010000 00000000 00000804  n..o............
 04c0 00000c04 00000600 6e93016f 93010000  ........n..o....
 04d0 00000000 00000e04 00001804 00000100  ................
 04e0 68000000 00000000 002c0400 002e0400  h........,......
 04f0 000c0068 93016993 016a9301 6b930100  ...h..i..j..k...
 0500 00000000 0000001a 0400002e 04000001  ................
 0510 00620000 00000000 0000b604 0000ec04  .b..............
 0520 00000c00 5c93015d 93015e93 015f9301  ....\..]..^.._..
 0530 ec040000 96050000 0c005493 01559301  ..........T..U..
 0540 56930157 93010000 00000000 0000c004  V..W............
 0550 0000c804 00000600 66930167 93010000  ........f..g....
 0560 00000000 00009004 00009204 00000c00  ................
 0570 68930169 93016a93 016b9301 00000000  h..i..j..k......
 0580 00000000 7e040000 92040000 01006200  ....~.........b.
 0590 00000000 000000ec 040000f0 04000002  ................
 05a0 00309ff0 04000096 05000006 006c9301  .0...........l..
 05b0 6d930100 00000000 0000002a 05000096  m..........*....
 05c0 05000006 005c9301 5d930100 00000000  .....\..].......
 05d0 0000002a 0500002e 05000002 00309f2e  ...*.........0..
 05e0 05000096 05000006 00609301 61930100  .........`..a...
 05f0 00000000 000000                      .......         
Contents of section .debug_ranges:
 0000 46040000 ec040000 f0040000 2a050000  F...........*...
 0010 2e050000 96050000 00000000 00000000  ................
 0020 7c040000 ec040000 f0040000 2a050000  |...........*...
 0030 2e050000 96050000 00000000 00000000  ................
 0040 f8040000 2a050000 2e050000 92050000  ....*...........
 0050 00000000 00000000 78010000 5c030000  ........x...\...
 0060 5c030000 a4050000 00000000 00000000  \...............

Disassembly of section .data:

00800100 <__data_start>:
  800100:	c0 c6       	rjmp	.+3456   	; 0x800e82 <__bss_end+0xd71>
  800102:	2d 00       	.word	0x002d	; ????

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__ctors_end>
   4:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
   8:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
   c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  10:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  14:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  18:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  1c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  20:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  24:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  28:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  2c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  30:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  34:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  38:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  3c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  40:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_16>
  44:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  48:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  4c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  50:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  54:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  58:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  5c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  60:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  64:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  68:	08 00       	.word	0x0008	; ????
  6a:	00 00       	nop
  6c:	be 92       	st	-X, r11
  6e:	24 49       	sbci	r18, 0x94	; 148
  70:	12 3e       	cpi	r17, 0xE2	; 226
  72:	ab aa       	std	Y+51, r10	; 0x33
  74:	aa 2a       	or	r10, r26
  76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
  78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
  7a:	4c 3e       	cpi	r20, 0xEC	; 236
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	be ab       	std	Y+54, r27	; 0x36
  82:	aa aa       	std	Y+50, r10	; 0x32
  84:	aa 3e       	cpi	r26, 0xEA	; 234
  86:	00 00       	nop
  88:	00 00       	nop
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	00 00       	nop
  92:	00 00       	nop
  94:	00 08       	sbc	r0, r0
  96:	41 78       	andi	r20, 0x81	; 129
  98:	d3 bb       	out	0x13, r29	; 19
  9a:	43 87       	std	Z+11, r20	; 0x0b
  9c:	d1 13       	cpse	r29, r17
  9e:	3d 19       	sub	r19, r13
  a0:	0e 3c       	cpi	r16, 0xCE	; 206
  a2:	c3 bd       	out	0x23, r28	; 35
  a4:	42 82       	std	Z+2, r4	; 0x02
  a6:	ad 2b       	or	r26, r29
  a8:	3e 68       	ori	r19, 0x8E	; 142
  aa:	ec 82       	std	Y+4, r14	; 0x04
  ac:	76 be       	out	0x36, r7	; 54
  ae:	d9 8f       	std	Y+25, r29	; 0x19
  b0:	e1 a9       	ldd	r30, Z+49	; 0x31
  b2:	3e 4c       	sbci	r19, 0xCE	; 206
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	ff be       	out	0x3f, r15	; 63
  b8:	01 c4       	rjmp	.+2050   	; 0x8bc <__fp_splitA+0x14>
  ba:	ff 7f       	andi	r31, 0xFF	; 255
  bc:	3f 00       	.word	0x003f	; ????
  be:	00 00       	nop
  c0:	00 00       	nop
  c2:	07 63       	ori	r16, 0x37	; 55
  c4:	42 36       	cpi	r20, 0x62	; 98
  c6:	b7 9b       	sbis	0x16, 7	; 22
  c8:	d8 a7       	std	Y+40, r29	; 0x28
  ca:	1a 39       	cpi	r17, 0x9A	; 154
  cc:	68 56       	subi	r22, 0x68	; 104
  ce:	18 ae       	std	Y+56, r1	; 0x38
  d0:	ba ab       	std	Y+50, r27	; 0x32
  d2:	55 8c       	ldd	r5, Z+29	; 0x1d
  d4:	1d 3c       	cpi	r17, 0xCD	; 205
  d6:	b7 cc       	rjmp	.-1682   	; 0xfffffa46 <__eeprom_end+0xff7efa46>
  d8:	57 63       	ori	r21, 0x37	; 55
  da:	bd 6d       	ori	r27, 0xDD	; 221
  dc:	ed fd       	.word	0xfded	; ????
  de:	75 3e       	cpi	r23, 0xE5	; 229
  e0:	f6 17       	cp	r31, r22
  e2:	72 31       	cpi	r23, 0x12	; 18
  e4:	bf 00       	.word	0x00bf	; ????
  e6:	00 00       	nop
  e8:	80 3f       	cpi	r24, 0xF0	; 240

000000ea <__trampolines_end>:
  ea:	00 00       	nop
  ec:	00 00       	nop
  ee:	24 00       	.word	0x0024	; ????
  f0:	27 00       	.word	0x0027	; ????
  f2:	2a 00       	.word	0x002a	; ????

000000f4 <port_to_output_PGM>:
  f4:	00 00       	nop
  f6:	00 00       	nop
  f8:	25 00       	.word	0x0025	; ????
  fa:	28 00       	.word	0x0028	; ????
  fc:	2b 00       	.word	0x002b	; ????

000000fe <digital_pin_to_port_PGM>:
  fe:	04 04       	cpc	r0, r4
 100:	04 04       	cpc	r0, r4
 102:	04 04       	cpc	r0, r4
 104:	04 04       	cpc	r0, r4
 106:	02 02       	muls	r16, r18
 108:	02 02       	muls	r16, r18
 10a:	02 02       	muls	r16, r18
 10c:	03 03       	mulsu	r16, r19
 10e:	03 03       	mulsu	r16, r19
 110:	03 03       	mulsu	r16, r19

00000112 <digital_pin_to_bit_mask_PGM>:
 112:	01 02       	muls	r16, r17
 114:	04 08       	sbc	r0, r4
 116:	10 20       	and	r1, r0
 118:	40 80       	ld	r4, Z
 11a:	01 02       	muls	r16, r17
 11c:	04 08       	sbc	r0, r4
 11e:	10 20       	and	r1, r0
 120:	01 02       	muls	r16, r17
 122:	04 08       	sbc	r0, r4
 124:	10 20       	and	r1, r0

00000126 <digital_pin_to_timer_PGM>:
 126:	00 00       	nop
 128:	00 08       	sbc	r0, r0
 12a:	00 02       	muls	r16, r16
 12c:	01 00       	.word	0x0001	; ????
 12e:	00 03       	mulsu	r16, r16
 130:	04 07       	cpc	r16, r20
	...

0000013a <__ctors_end>:
 13a:	11 24       	eor	r1, r1
 13c:	1f be       	out	0x3f, r1	; 63
 13e:	cf ef       	ldi	r28, 0xFF	; 255
 140:	d8 e0       	ldi	r29, 0x08	; 8
 142:	de bf       	out	0x3e, r29	; 62
 144:	cd bf       	out	0x3d, r28	; 61

00000146 <__do_copy_data>:
 146:	11 e0       	ldi	r17, 0x01	; 1
 148:	a0 e0       	ldi	r26, 0x00	; 0
 14a:	b1 e0       	ldi	r27, 0x01	; 1
 14c:	e2 ee       	ldi	r30, 0xE2	; 226
 14e:	fc e0       	ldi	r31, 0x0C	; 12
 150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x10>
 152:	05 90       	lpm	r0, Z+
 154:	0d 92       	st	X+, r0
 156:	a4 30       	cpi	r26, 0x04	; 4
 158:	b1 07       	cpc	r27, r17
 15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0xc>

0000015c <__do_clear_bss>:
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	a4 e0       	ldi	r26, 0x04	; 4
 160:	b1 e0       	ldi	r27, 0x01	; 1
 162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
 164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
 166:	a1 31       	cpi	r26, 0x11	; 17
 168:	b2 07       	cpc	r27, r18
 16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>
 16c:	0e 94 ae 01 	call	0x35c	; 0x35c <main>
 170:	0c 94 6f 06 	jmp	0xcde	; 0xcde <_exit>

00000174 <__bad_interrupt>:
 174:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000178 <digitalWrite.constprop.0>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
 178:	e3 e3       	ldi	r30, 0x33	; 51
 17a:	f1 e0       	ldi	r31, 0x01	; 1
 17c:	94 91       	lpm	r25, Z
	uint8_t bit = digitalPinToBitMask(pin);
 17e:	ef e1       	ldi	r30, 0x1F	; 31
 180:	f1 e0       	ldi	r31, 0x01	; 1
 182:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 184:	eb e0       	ldi	r30, 0x0B	; 11
 186:	f1 e0       	ldi	r31, 0x01	; 1
 188:	e4 91       	lpm	r30, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 18a:	ee 23       	and	r30, r30
 18c:	09 f4       	brne	.+2      	; 0x190 <digitalWrite.constprop.0+0x18>
 18e:	3c c0       	rjmp	.+120    	; 0x208 <digitalWrite.constprop.0+0x90>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 190:	99 23       	and	r25, r25
 192:	39 f1       	breq	.+78     	; 0x1e2 <digitalWrite.constprop.0+0x6a>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 194:	93 30       	cpi	r25, 0x03	; 3
 196:	91 f0       	breq	.+36     	; 0x1bc <digitalWrite.constprop.0+0x44>
 198:	38 f4       	brcc	.+14     	; 0x1a8 <digitalWrite.constprop.0+0x30>
 19a:	91 30       	cpi	r25, 0x01	; 1
 19c:	a9 f0       	breq	.+42     	; 0x1c8 <digitalWrite.constprop.0+0x50>
 19e:	92 30       	cpi	r25, 0x02	; 2
 1a0:	01 f5       	brne	.+64     	; 0x1e2 <digitalWrite.constprop.0+0x6a>
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 1a2:	94 b5       	in	r25, 0x24	; 36
 1a4:	9f 7d       	andi	r25, 0xDF	; 223
 1a6:	12 c0       	rjmp	.+36     	; 0x1cc <digitalWrite.constprop.0+0x54>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 1a8:	97 30       	cpi	r25, 0x07	; 7
 1aa:	91 f0       	breq	.+36     	; 0x1d0 <digitalWrite.constprop.0+0x58>
 1ac:	98 30       	cpi	r25, 0x08	; 8
 1ae:	a1 f0       	breq	.+40     	; 0x1d8 <digitalWrite.constprop.0+0x60>
 1b0:	94 30       	cpi	r25, 0x04	; 4
 1b2:	b9 f4       	brne	.+46     	; 0x1e2 <digitalWrite.constprop.0+0x6a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 1b4:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 1b8:	9f 7d       	andi	r25, 0xDF	; 223
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <digitalWrite.constprop.0+0x4a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 1bc:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 1c0:	9f 77       	andi	r25, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 1c2:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 1c6:	0d c0       	rjmp	.+26     	; 0x1e2 <digitalWrite.constprop.0+0x6a>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 1c8:	94 b5       	in	r25, 0x24	; 36
 1ca:	9f 77       	andi	r25, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 1cc:	94 bd       	out	0x24, r25	; 36
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <digitalWrite.constprop.0+0x6a>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 1d0:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 1d4:	9f 77       	andi	r25, 0x7F	; 127
 1d6:	03 c0       	rjmp	.+6      	; 0x1de <digitalWrite.constprop.0+0x66>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 1d8:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 1dc:	9f 7d       	andi	r25, 0xDF	; 223
 1de:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	ec 50       	subi	r30, 0x0C	; 12
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	a5 91       	lpm	r26, Z+
 1ee:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 1f0:	9f b7       	in	r25, 0x3f	; 63
	cli();
 1f2:	f8 94       	cli

	if (val == LOW) {
 1f4:	81 11       	cpse	r24, r1
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <digitalWrite.constprop.0+0x88>
		*out &= ~bit;
 1f8:	8c 91       	ld	r24, X
 1fa:	20 95       	com	r18
 1fc:	28 23       	and	r18, r24
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <digitalWrite.constprop.0+0x8c>
	} else {
		*out |= bit;
 200:	ec 91       	ld	r30, X
 202:	2e 2b       	or	r18, r30
 204:	2c 93       	st	X, r18
	}

	SREG = oldSREG;
 206:	9f bf       	out	0x3f, r25	; 63
 208:	08 95       	ret

0000020a <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 20a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 20c:	f8 94       	cli
	m = timer0_overflow_count;
 20e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <timer0_overflow_count>
 212:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <timer0_overflow_count+0x1>
 216:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <timer0_overflow_count+0x2>
 21a:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
 21e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 220:	a8 9b       	sbis	0x15, 0	; 21
 222:	05 c0       	rjmp	.+10     	; 0x22e <micros+0x24>
 224:	2f 3f       	cpi	r18, 0xFF	; 255
 226:	19 f0       	breq	.+6      	; 0x22e <micros+0x24>
		m++;
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	a1 1d       	adc	r26, r1
 22c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 22e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 230:	ba 2f       	mov	r27, r26
 232:	a9 2f       	mov	r26, r25
 234:	98 2f       	mov	r25, r24
 236:	88 27       	eor	r24, r24
 238:	82 0f       	add	r24, r18
 23a:	91 1d       	adc	r25, r1
 23c:	a1 1d       	adc	r26, r1
 23e:	b1 1d       	adc	r27, r1
 240:	bc 01       	movw	r22, r24
 242:	cd 01       	movw	r24, r26
 244:	42 e0       	ldi	r20, 0x02	; 2
 246:	66 0f       	add	r22, r22
 248:	77 1f       	adc	r23, r23
 24a:	88 1f       	adc	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	4a 95       	dec	r20
 250:	d1 f7       	brne	.-12     	; 0x246 <micros+0x3c>
}
 252:	08 95       	ret

00000254 <delay>:

void delay(unsigned long ms)
{
 254:	8f 92       	push	r8
 256:	9f 92       	push	r9
 258:	af 92       	push	r10
 25a:	bf 92       	push	r11
 25c:	cf 92       	push	r12
 25e:	df 92       	push	r13
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	6b 01       	movw	r12, r22
 266:	7c 01       	movw	r14, r24
	uint32_t start = micros();
 268:	0e 94 05 01 	call	0x20a	; 0x20a <micros>
 26c:	4b 01       	movw	r8, r22
 26e:	5c 01       	movw	r10, r24

	while (ms > 0) {
 270:	c1 14       	cp	r12, r1
 272:	d1 04       	cpc	r13, r1
 274:	e1 04       	cpc	r14, r1
 276:	f1 04       	cpc	r15, r1
 278:	f1 f0       	breq	.+60     	; 0x2b6 <delay+0x62>
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 27a:	0e 94 05 01 	call	0x20a	; 0x20a <micros>
 27e:	dc 01       	movw	r26, r24
 280:	cb 01       	movw	r24, r22
 282:	88 19       	sub	r24, r8
 284:	99 09       	sbc	r25, r9
 286:	aa 09       	sbc	r26, r10
 288:	bb 09       	sbc	r27, r11
 28a:	88 3e       	cpi	r24, 0xE8	; 232
 28c:	93 40       	sbci	r25, 0x03	; 3
 28e:	a1 05       	cpc	r26, r1
 290:	b1 05       	cpc	r27, r1
 292:	70 f3       	brcs	.-36     	; 0x270 <delay+0x1c>
			ms--;
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	c2 1a       	sub	r12, r18
 298:	d1 08       	sbc	r13, r1
 29a:	e1 08       	sbc	r14, r1
 29c:	f1 08       	sbc	r15, r1
			start += 1000;
 29e:	88 ee       	ldi	r24, 0xE8	; 232
 2a0:	88 0e       	add	r8, r24
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	98 1e       	adc	r9, r24
 2a6:	a1 1c       	adc	r10, r1
 2a8:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 2aa:	c1 14       	cp	r12, r1
 2ac:	d1 04       	cpc	r13, r1
 2ae:	e1 04       	cpc	r14, r1
 2b0:	f1 04       	cpc	r15, r1
 2b2:	19 f7       	brne	.-58     	; 0x27a <delay+0x26>
 2b4:	dd cf       	rjmp	.-70     	; 0x270 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
 2b6:	ff 90       	pop	r15
 2b8:	ef 90       	pop	r14
 2ba:	df 90       	pop	r13
 2bc:	cf 90       	pop	r12
 2be:	bf 90       	pop	r11
 2c0:	af 90       	pop	r10
 2c2:	9f 90       	pop	r9
 2c4:	8f 90       	pop	r8
 2c6:	08 95       	ret

000002c8 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	2f 93       	push	r18
 2d4:	3f 93       	push	r19
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 2de:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timer0_millis>
 2e2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <timer0_millis+0x1>
 2e6:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <timer0_millis+0x2>
 2ea:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <timer0_millis+0x3>
	unsigned char f = timer0_fract;
 2ee:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
 2f2:	23 e0       	ldi	r18, 0x03	; 3
 2f4:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 2f6:	2d 37       	cpi	r18, 0x7D	; 125
 2f8:	20 f4       	brcc	.+8      	; 0x302 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	a1 1d       	adc	r26, r1
 2fe:	b1 1d       	adc	r27, r1
 300:	05 c0       	rjmp	.+10     	; 0x30c <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 302:	26 e8       	ldi	r18, 0x86	; 134
 304:	23 0f       	add	r18, r19
		m += 1;
 306:	02 96       	adiw	r24, 0x02	; 2
 308:	a1 1d       	adc	r26, r1
 30a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 30c:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <timer0_fract>
	timer0_millis = m;
 310:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <timer0_millis>
 314:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <timer0_millis+0x1>
 318:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <timer0_millis+0x2>
 31c:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <timer0_millis+0x3>
	timer0_overflow_count++;
 320:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <timer0_overflow_count>
 324:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <timer0_overflow_count+0x1>
 328:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <timer0_overflow_count+0x2>
 32c:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <timer0_overflow_count+0x3>
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	a1 1d       	adc	r26, r1
 334:	b1 1d       	adc	r27, r1
 336:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <timer0_overflow_count>
 33a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <timer0_overflow_count+0x1>
 33e:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <timer0_overflow_count+0x2>
 342:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <timer0_overflow_count+0x3>
}
 346:	bf 91       	pop	r27
 348:	af 91       	pop	r26
 34a:	9f 91       	pop	r25
 34c:	8f 91       	pop	r24
 34e:	3f 91       	pop	r19
 350:	2f 91       	pop	r18
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <main>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 35c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 35e:	84 b5       	in	r24, 0x24	; 36
 360:	82 60       	ori	r24, 0x02	; 2
 362:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 364:	84 b5       	in	r24, 0x24	; 36
 366:	81 60       	ori	r24, 0x01	; 1
 368:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 36a:	85 b5       	in	r24, 0x25	; 37
 36c:	82 60       	ori	r24, 0x02	; 2
 36e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 370:	85 b5       	in	r24, 0x25	; 37
 372:	81 60       	ori	r24, 0x01	; 1
 374:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 376:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 37a:	81 60       	ori	r24, 0x01	; 1
 37c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 380:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 384:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 388:	82 60       	ori	r24, 0x02	; 2
 38a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 38e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 392:	81 60       	ori	r24, 0x01	; 1
 394:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 398:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 39c:	81 60       	ori	r24, 0x01	; 1
 39e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 3a2:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 3a6:	84 60       	ori	r24, 0x04	; 4
 3a8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 3ac:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 3b0:	81 60       	ori	r24, 0x01	; 1
 3b2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 3b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 3ba:	84 60       	ori	r24, 0x04	; 4
 3bc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbi(ADCSRA, ADPS1);
 3c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 3c4:	82 60       	ori	r24, 0x02	; 2
 3c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbi(ADCSRA, ADPS0);
 3ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 3ce:	81 60       	ori	r24, 0x01	; 1
 3d0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 3d4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 3d8:	80 68       	ori	r24, 0x80	; 128
 3da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 3de:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 3e2:	ef e1       	ldi	r30, 0x1F	; 31
 3e4:	f1 e0       	ldi	r31, 0x01	; 1
 3e6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 3e8:	eb e0       	ldi	r30, 0x0B	; 11
 3ea:	f1 e0       	ldi	r31, 0x01	; 1
 3ec:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 3ee:	88 23       	and	r24, r24
 3f0:	99 f0       	breq	.+38     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	fc 01       	movw	r30, r24
 3fa:	e6 51       	subi	r30, 0x16	; 22
 3fc:	ff 4f       	sbci	r31, 0xFF	; 255
 3fe:	a5 91       	lpm	r26, Z+
 400:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
 402:	fc 01       	movw	r30, r24
 404:	ec 50       	subi	r30, 0x0C	; 12
 406:	ff 4f       	sbci	r31, 0xFF	; 255
 408:	85 91       	lpm	r24, Z+
 40a:	94 91       	lpm	r25, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 40c:	8f b7       	in	r24, 0x3f	; 63
                cli();
 40e:	f8 94       	cli
		*reg |= bit;
 410:	ec 91       	ld	r30, X
 412:	e2 2b       	or	r30, r18
 414:	ec 93       	st	X, r30
		SREG = oldSREG;
 416:	8f bf       	out	0x3f, r24	; 63
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 418:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
 41a:	f8 94       	cli
	m = timer0_millis;
 41c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timer0_millis>
 420:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <timer0_millis+0x1>
 424:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <timer0_millis+0x2>
 428:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <timer0_millis+0x3>
	SREG = oldSREG;
 42c:	2f bf       	out	0x3f, r18	; 63
unsigned long _loopCounter = C_LOOP_COUNT;

void setup()
{
  pinMode(LED_BUILTIN, OUTPUT);
  _startTime_ms = millis();
 42e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 432:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 436:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 43a:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	
	setup();
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	28 2e       	mov	r2, r24
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	38 2e       	mov	r3, r24
}

void loop() 
{
  if (0 == _loopCounter--) {
 446:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 44a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 44e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 452:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 456:	ac 01       	movw	r20, r24
 458:	bd 01       	movw	r22, r26
 45a:	41 50       	subi	r20, 0x01	; 1
 45c:	51 09       	sbc	r21, r1
 45e:	61 09       	sbc	r22, r1
 460:	71 09       	sbc	r23, r1
 462:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
 466:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__data_start+0x1>
 46a:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__data_start+0x2>
 46e:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <__data_start+0x3>
 472:	89 2b       	or	r24, r25
 474:	8a 2b       	or	r24, r26
 476:	8b 2b       	or	r24, r27
 478:	09 f0       	breq	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 47a:	8d c0       	rjmp	.+282    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 47c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
 47e:	f8 94       	cli
	m = timer0_millis;
 480:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timer0_millis>
 484:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <timer0_millis+0x1>
 488:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <timer0_millis+0x2>
 48c:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <timer0_millis+0x3>
	SREG = oldSREG;
 490:	2f bf       	out	0x3f, r18	; 63
}

void outputResults()
{
  const unsigned long endTime_ms = millis();
  float total_ms = ((float)(endTime_ms - _startTime_ms));
 492:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <__data_end>
 496:	10 91 05 01 	lds	r17, 0x0105	; 0x800105 <__data_end+0x1>
 49a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end+0x2>
 49e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x3>
 4a2:	bc 01       	movw	r22, r24
 4a4:	cd 01       	movw	r24, r26
 4a6:	60 1b       	sub	r22, r16
 4a8:	71 0b       	sbc	r23, r17
 4aa:	82 0b       	sbc	r24, r18
 4ac:	93 0b       	sbc	r25, r19
 4ae:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__floatunsisf>
 4b2:	6b 01       	movw	r12, r22
 4b4:	7c 01       	movw	r14, r24
  const int numberOfDigits = (int)log10(total_ms);
 4b6:	0e 94 75 04 	call	0x8ea	; 0x8ea <log10>
 4ba:	0e 94 b1 03 	call	0x762	; 0x762 <__fixsfsi>
 4be:	4b 01       	movw	r8, r22
  total_ms /= pow(10, numberOfDigits);
 4c0:	07 2e       	mov	r0, r23
 4c2:	00 0c       	add	r0, r0
 4c4:	88 0b       	sbc	r24, r24
 4c6:	99 0b       	sbc	r25, r25
 4c8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__floatsisf>
 4cc:	9b 01       	movw	r18, r22
 4ce:	ac 01       	movw	r20, r24
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	70 e0       	ldi	r23, 0x00	; 0
 4d4:	80 e2       	ldi	r24, 0x20	; 32
 4d6:	91 e4       	ldi	r25, 0x41	; 65
 4d8:	0e 94 3a 05 	call	0xa74	; 0xa74 <pow>
 4dc:	9b 01       	movw	r18, r22
 4de:	ac 01       	movw	r20, r24
 4e0:	c7 01       	movw	r24, r14
 4e2:	b6 01       	movw	r22, r12
 4e4:	0e 94 3f 03 	call	0x67e	; 0x67e <__divsf3>
 4e8:	2b 01       	movw	r4, r22
 4ea:	3c 01       	movw	r6, r24
  
  for (int i = 0; i <= numberOfDigits; i++) {
 4ec:	c0 e0       	ldi	r28, 0x00	; 0
 4ee:	d0 e0       	ldi	r29, 0x00	; 0
 4f0:	8c 16       	cp	r8, r28
 4f2:	9d 06       	cpc	r9, r29
 4f4:	0c f4       	brge	.+2      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4f6:	4f c0       	rjmp	.+158    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
    digitalWrite(LED_BUILTIN, HIGH);
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	0e 94 bc 00 	call	0x178	; 0x178 <digitalWrite.constprop.0>
    delay(2000);
 4fe:	60 ed       	ldi	r22, 0xD0	; 208
 500:	77 e0       	ldi	r23, 0x07	; 7
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 2a 01 	call	0x254	; 0x254 <delay>
    digitalWrite(LED_BUILTIN, LOW);
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	0e 94 bc 00 	call	0x178	; 0x178 <digitalWrite.constprop.0>
    delay(250);
 510:	6a ef       	ldi	r22, 0xFA	; 250
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 2a 01 	call	0x254	; 0x254 <delay>
  
    int blinkCount = (int)total_ms;
 51c:	c3 01       	movw	r24, r6
 51e:	b2 01       	movw	r22, r4
 520:	0e 94 b1 03 	call	0x762	; 0x762 <__fixsfsi>
 524:	6b 01       	movw	r12, r22
 526:	7c 01       	movw	r14, r24
 528:	5b 01       	movw	r10, r22
    for (int b = 0; b < blinkCount; b++) {
 52a:	00 e0       	ldi	r16, 0x00	; 0
 52c:	10 e0       	ldi	r17, 0x00	; 0
 52e:	0a 15       	cp	r16, r10
 530:	1b 05       	cpc	r17, r11
 532:	ac f4       	brge	.+42     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
      digitalWrite(LED_BUILTIN, HIGH);
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	0e 94 bc 00 	call	0x178	; 0x178 <digitalWrite.constprop.0>
      delay(250);
 53a:	6a ef       	ldi	r22, 0xFA	; 250
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 2a 01 	call	0x254	; 0x254 <delay>
      digitalWrite(LED_BUILTIN, LOW);
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	0e 94 bc 00 	call	0x178	; 0x178 <digitalWrite.constprop.0>
      delay(250);
 54c:	6a ef       	ldi	r22, 0xFA	; 250
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 2a 01 	call	0x254	; 0x254 <delay>
    delay(2000);
    digitalWrite(LED_BUILTIN, LOW);
    delay(250);
  
    int blinkCount = (int)total_ms;
    for (int b = 0; b < blinkCount; b++) {
 558:	0f 5f       	subi	r16, 0xFF	; 255
 55a:	1f 4f       	sbci	r17, 0xFF	; 255
 55c:	e8 cf       	rjmp	.-48     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
      delay(250);
      digitalWrite(LED_BUILTIN, LOW);
      delay(250);
    }
  
    delay(1000);
 55e:	68 ee       	ldi	r22, 0xE8	; 232
 560:	73 e0       	ldi	r23, 0x03	; 3
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 2a 01 	call	0x254	; 0x254 <delay>
  
    total_ms = (total_ms - blinkCount) * 10;
 56a:	b6 01       	movw	r22, r12
 56c:	dd 0c       	add	r13, r13
 56e:	88 0b       	sbc	r24, r24
 570:	99 0b       	sbc	r25, r25
 572:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__floatsisf>
 576:	9b 01       	movw	r18, r22
 578:	ac 01       	movw	r20, r24
 57a:	c3 01       	movw	r24, r6
 57c:	b2 01       	movw	r22, r4
 57e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__subsf3>
 582:	20 e0       	ldi	r18, 0x00	; 0
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	40 e2       	ldi	r20, 0x20	; 32
 588:	51 e4       	ldi	r21, 0x41	; 65
 58a:	0e 94 cd 04 	call	0x99a	; 0x99a <__mulsf3>
 58e:	2b 01       	movw	r4, r22
 590:	3c 01       	movw	r6, r24
  const unsigned long endTime_ms = millis();
  float total_ms = ((float)(endTime_ms - _startTime_ms));
  const int numberOfDigits = (int)log10(total_ms);
  total_ms /= pow(10, numberOfDigits);
  
  for (int i = 0; i <= numberOfDigits; i++) {
 592:	21 96       	adiw	r28, 0x01	; 1
 594:	ad cf       	rjmp	.-166    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 596:	21 14       	cp	r2, r1
 598:	31 04       	cpc	r3, r1
 59a:	09 f4       	brne	.+2      	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 59c:	54 cf       	rjmp	.-344    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 59e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 5a2:	51 cf       	rjmp	.-350    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>

000005a4 <__subsf3>:
 5a4:	50 58       	subi	r21, 0x80	; 128

000005a6 <__addsf3>:
 5a6:	bb 27       	eor	r27, r27
 5a8:	aa 27       	eor	r26, r26
 5aa:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__addsf3x>
 5ae:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_round>
 5b2:	0e 94 2d 04 	call	0x85a	; 0x85a <__fp_pscA>
 5b6:	38 f0       	brcs	.+14     	; 0x5c6 <__addsf3+0x20>
 5b8:	0e 94 34 04 	call	0x868	; 0x868 <__fp_pscB>
 5bc:	20 f0       	brcs	.+8      	; 0x5c6 <__addsf3+0x20>
 5be:	39 f4       	brne	.+14     	; 0x5ce <__addsf3+0x28>
 5c0:	9f 3f       	cpi	r25, 0xFF	; 255
 5c2:	19 f4       	brne	.+6      	; 0x5ca <__addsf3+0x24>
 5c4:	26 f4       	brtc	.+8      	; 0x5ce <__addsf3+0x28>
 5c6:	0c 94 2a 04 	jmp	0x854	; 0x854 <__fp_nan>
 5ca:	0e f4       	brtc	.+2      	; 0x5ce <__addsf3+0x28>
 5cc:	e0 95       	com	r30
 5ce:	e7 fb       	bst	r30, 7
 5d0:	0c 94 24 04 	jmp	0x848	; 0x848 <__fp_inf>

000005d4 <__addsf3x>:
 5d4:	e9 2f       	mov	r30, r25
 5d6:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_split3>
 5da:	58 f3       	brcs	.-42     	; 0x5b2 <__addsf3+0xc>
 5dc:	ba 17       	cp	r27, r26
 5de:	62 07       	cpc	r22, r18
 5e0:	73 07       	cpc	r23, r19
 5e2:	84 07       	cpc	r24, r20
 5e4:	95 07       	cpc	r25, r21
 5e6:	20 f0       	brcs	.+8      	; 0x5f0 <__addsf3x+0x1c>
 5e8:	79 f4       	brne	.+30     	; 0x608 <__addsf3x+0x34>
 5ea:	a6 f5       	brtc	.+104    	; 0x654 <__addsf3x+0x80>
 5ec:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__fp_zero>
 5f0:	0e f4       	brtc	.+2      	; 0x5f4 <__addsf3x+0x20>
 5f2:	e0 95       	com	r30
 5f4:	0b 2e       	mov	r0, r27
 5f6:	ba 2f       	mov	r27, r26
 5f8:	a0 2d       	mov	r26, r0
 5fa:	0b 01       	movw	r0, r22
 5fc:	b9 01       	movw	r22, r18
 5fe:	90 01       	movw	r18, r0
 600:	0c 01       	movw	r0, r24
 602:	ca 01       	movw	r24, r20
 604:	a0 01       	movw	r20, r0
 606:	11 24       	eor	r1, r1
 608:	ff 27       	eor	r31, r31
 60a:	59 1b       	sub	r21, r25
 60c:	99 f0       	breq	.+38     	; 0x634 <__addsf3x+0x60>
 60e:	59 3f       	cpi	r21, 0xF9	; 249
 610:	50 f4       	brcc	.+20     	; 0x626 <__addsf3x+0x52>
 612:	50 3e       	cpi	r21, 0xE0	; 224
 614:	68 f1       	brcs	.+90     	; 0x670 <__addsf3x+0x9c>
 616:	1a 16       	cp	r1, r26
 618:	f0 40       	sbci	r31, 0x00	; 0
 61a:	a2 2f       	mov	r26, r18
 61c:	23 2f       	mov	r18, r19
 61e:	34 2f       	mov	r19, r20
 620:	44 27       	eor	r20, r20
 622:	58 5f       	subi	r21, 0xF8	; 248
 624:	f3 cf       	rjmp	.-26     	; 0x60c <__addsf3x+0x38>
 626:	46 95       	lsr	r20
 628:	37 95       	ror	r19
 62a:	27 95       	ror	r18
 62c:	a7 95       	ror	r26
 62e:	f0 40       	sbci	r31, 0x00	; 0
 630:	53 95       	inc	r21
 632:	c9 f7       	brne	.-14     	; 0x626 <__addsf3x+0x52>
 634:	7e f4       	brtc	.+30     	; 0x654 <__addsf3x+0x80>
 636:	1f 16       	cp	r1, r31
 638:	ba 0b       	sbc	r27, r26
 63a:	62 0b       	sbc	r22, r18
 63c:	73 0b       	sbc	r23, r19
 63e:	84 0b       	sbc	r24, r20
 640:	ba f0       	brmi	.+46     	; 0x670 <__addsf3x+0x9c>
 642:	91 50       	subi	r25, 0x01	; 1
 644:	a1 f0       	breq	.+40     	; 0x66e <__addsf3x+0x9a>
 646:	ff 0f       	add	r31, r31
 648:	bb 1f       	adc	r27, r27
 64a:	66 1f       	adc	r22, r22
 64c:	77 1f       	adc	r23, r23
 64e:	88 1f       	adc	r24, r24
 650:	c2 f7       	brpl	.-16     	; 0x642 <__addsf3x+0x6e>
 652:	0e c0       	rjmp	.+28     	; 0x670 <__addsf3x+0x9c>
 654:	ba 0f       	add	r27, r26
 656:	62 1f       	adc	r22, r18
 658:	73 1f       	adc	r23, r19
 65a:	84 1f       	adc	r24, r20
 65c:	48 f4       	brcc	.+18     	; 0x670 <__addsf3x+0x9c>
 65e:	87 95       	ror	r24
 660:	77 95       	ror	r23
 662:	67 95       	ror	r22
 664:	b7 95       	ror	r27
 666:	f7 95       	ror	r31
 668:	9e 3f       	cpi	r25, 0xFE	; 254
 66a:	08 f0       	brcs	.+2      	; 0x66e <__addsf3x+0x9a>
 66c:	b0 cf       	rjmp	.-160    	; 0x5ce <__addsf3+0x28>
 66e:	93 95       	inc	r25
 670:	88 0f       	add	r24, r24
 672:	08 f0       	brcs	.+2      	; 0x676 <__addsf3x+0xa2>
 674:	99 27       	eor	r25, r25
 676:	ee 0f       	add	r30, r30
 678:	97 95       	ror	r25
 67a:	87 95       	ror	r24
 67c:	08 95       	ret

0000067e <__divsf3>:
 67e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__divsf3x>
 682:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_round>
 686:	0e 94 34 04 	call	0x868	; 0x868 <__fp_pscB>
 68a:	58 f0       	brcs	.+22     	; 0x6a2 <__divsf3+0x24>
 68c:	0e 94 2d 04 	call	0x85a	; 0x85a <__fp_pscA>
 690:	40 f0       	brcs	.+16     	; 0x6a2 <__divsf3+0x24>
 692:	29 f4       	brne	.+10     	; 0x69e <__divsf3+0x20>
 694:	5f 3f       	cpi	r21, 0xFF	; 255
 696:	29 f0       	breq	.+10     	; 0x6a2 <__divsf3+0x24>
 698:	0c 94 24 04 	jmp	0x848	; 0x848 <__fp_inf>
 69c:	51 11       	cpse	r21, r1
 69e:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__fp_szero>
 6a2:	0c 94 2a 04 	jmp	0x854	; 0x854 <__fp_nan>

000006a6 <__divsf3x>:
 6a6:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_split3>
 6aa:	68 f3       	brcs	.-38     	; 0x686 <__divsf3+0x8>

000006ac <__divsf3_pse>:
 6ac:	99 23       	and	r25, r25
 6ae:	b1 f3       	breq	.-20     	; 0x69c <__divsf3+0x1e>
 6b0:	55 23       	and	r21, r21
 6b2:	91 f3       	breq	.-28     	; 0x698 <__divsf3+0x1a>
 6b4:	95 1b       	sub	r25, r21
 6b6:	55 0b       	sbc	r21, r21
 6b8:	bb 27       	eor	r27, r27
 6ba:	aa 27       	eor	r26, r26
 6bc:	62 17       	cp	r22, r18
 6be:	73 07       	cpc	r23, r19
 6c0:	84 07       	cpc	r24, r20
 6c2:	38 f0       	brcs	.+14     	; 0x6d2 <__divsf3_pse+0x26>
 6c4:	9f 5f       	subi	r25, 0xFF	; 255
 6c6:	5f 4f       	sbci	r21, 0xFF	; 255
 6c8:	22 0f       	add	r18, r18
 6ca:	33 1f       	adc	r19, r19
 6cc:	44 1f       	adc	r20, r20
 6ce:	aa 1f       	adc	r26, r26
 6d0:	a9 f3       	breq	.-22     	; 0x6bc <__divsf3_pse+0x10>
 6d2:	35 d0       	rcall	.+106    	; 0x73e <__divsf3_pse+0x92>
 6d4:	0e 2e       	mov	r0, r30
 6d6:	3a f0       	brmi	.+14     	; 0x6e6 <__divsf3_pse+0x3a>
 6d8:	e0 e8       	ldi	r30, 0x80	; 128
 6da:	32 d0       	rcall	.+100    	; 0x740 <__divsf3_pse+0x94>
 6dc:	91 50       	subi	r25, 0x01	; 1
 6de:	50 40       	sbci	r21, 0x00	; 0
 6e0:	e6 95       	lsr	r30
 6e2:	00 1c       	adc	r0, r0
 6e4:	ca f7       	brpl	.-14     	; 0x6d8 <__divsf3_pse+0x2c>
 6e6:	2b d0       	rcall	.+86     	; 0x73e <__divsf3_pse+0x92>
 6e8:	fe 2f       	mov	r31, r30
 6ea:	29 d0       	rcall	.+82     	; 0x73e <__divsf3_pse+0x92>
 6ec:	66 0f       	add	r22, r22
 6ee:	77 1f       	adc	r23, r23
 6f0:	88 1f       	adc	r24, r24
 6f2:	bb 1f       	adc	r27, r27
 6f4:	26 17       	cp	r18, r22
 6f6:	37 07       	cpc	r19, r23
 6f8:	48 07       	cpc	r20, r24
 6fa:	ab 07       	cpc	r26, r27
 6fc:	b0 e8       	ldi	r27, 0x80	; 128
 6fe:	09 f0       	breq	.+2      	; 0x702 <__divsf3_pse+0x56>
 700:	bb 0b       	sbc	r27, r27
 702:	80 2d       	mov	r24, r0
 704:	bf 01       	movw	r22, r30
 706:	ff 27       	eor	r31, r31
 708:	93 58       	subi	r25, 0x83	; 131
 70a:	5f 4f       	sbci	r21, 0xFF	; 255
 70c:	3a f0       	brmi	.+14     	; 0x71c <__divsf3_pse+0x70>
 70e:	9e 3f       	cpi	r25, 0xFE	; 254
 710:	51 05       	cpc	r21, r1
 712:	78 f0       	brcs	.+30     	; 0x732 <__divsf3_pse+0x86>
 714:	0c 94 24 04 	jmp	0x848	; 0x848 <__fp_inf>
 718:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__fp_szero>
 71c:	5f 3f       	cpi	r21, 0xFF	; 255
 71e:	e4 f3       	brlt	.-8      	; 0x718 <__divsf3_pse+0x6c>
 720:	98 3e       	cpi	r25, 0xE8	; 232
 722:	d4 f3       	brlt	.-12     	; 0x718 <__divsf3_pse+0x6c>
 724:	86 95       	lsr	r24
 726:	77 95       	ror	r23
 728:	67 95       	ror	r22
 72a:	b7 95       	ror	r27
 72c:	f7 95       	ror	r31
 72e:	9f 5f       	subi	r25, 0xFF	; 255
 730:	c9 f7       	brne	.-14     	; 0x724 <__divsf3_pse+0x78>
 732:	88 0f       	add	r24, r24
 734:	91 1d       	adc	r25, r1
 736:	96 95       	lsr	r25
 738:	87 95       	ror	r24
 73a:	97 f9       	bld	r25, 7
 73c:	08 95       	ret
 73e:	e1 e0       	ldi	r30, 0x01	; 1
 740:	66 0f       	add	r22, r22
 742:	77 1f       	adc	r23, r23
 744:	88 1f       	adc	r24, r24
 746:	bb 1f       	adc	r27, r27
 748:	62 17       	cp	r22, r18
 74a:	73 07       	cpc	r23, r19
 74c:	84 07       	cpc	r24, r20
 74e:	ba 07       	cpc	r27, r26
 750:	20 f0       	brcs	.+8      	; 0x75a <__divsf3_pse+0xae>
 752:	62 1b       	sub	r22, r18
 754:	73 0b       	sbc	r23, r19
 756:	84 0b       	sbc	r24, r20
 758:	ba 0b       	sbc	r27, r26
 75a:	ee 1f       	adc	r30, r30
 75c:	88 f7       	brcc	.-30     	; 0x740 <__divsf3_pse+0x94>
 75e:	e0 95       	com	r30
 760:	08 95       	ret

00000762 <__fixsfsi>:
 762:	0e 94 b8 03 	call	0x770	; 0x770 <__fixunssfsi>
 766:	68 94       	set
 768:	b1 11       	cpse	r27, r1
 76a:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__fp_szero>
 76e:	08 95       	ret

00000770 <__fixunssfsi>:
 770:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__fp_splitA>
 774:	88 f0       	brcs	.+34     	; 0x798 <__fixunssfsi+0x28>
 776:	9f 57       	subi	r25, 0x7F	; 127
 778:	98 f0       	brcs	.+38     	; 0x7a0 <__fixunssfsi+0x30>
 77a:	b9 2f       	mov	r27, r25
 77c:	99 27       	eor	r25, r25
 77e:	b7 51       	subi	r27, 0x17	; 23
 780:	b0 f0       	brcs	.+44     	; 0x7ae <__fixunssfsi+0x3e>
 782:	e1 f0       	breq	.+56     	; 0x7bc <__fixunssfsi+0x4c>
 784:	66 0f       	add	r22, r22
 786:	77 1f       	adc	r23, r23
 788:	88 1f       	adc	r24, r24
 78a:	99 1f       	adc	r25, r25
 78c:	1a f0       	brmi	.+6      	; 0x794 <__fixunssfsi+0x24>
 78e:	ba 95       	dec	r27
 790:	c9 f7       	brne	.-14     	; 0x784 <__fixunssfsi+0x14>
 792:	14 c0       	rjmp	.+40     	; 0x7bc <__fixunssfsi+0x4c>
 794:	b1 30       	cpi	r27, 0x01	; 1
 796:	91 f0       	breq	.+36     	; 0x7bc <__fixunssfsi+0x4c>
 798:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__fp_zero>
 79c:	b1 e0       	ldi	r27, 0x01	; 1
 79e:	08 95       	ret
 7a0:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__fp_zero>
 7a4:	67 2f       	mov	r22, r23
 7a6:	78 2f       	mov	r23, r24
 7a8:	88 27       	eor	r24, r24
 7aa:	b8 5f       	subi	r27, 0xF8	; 248
 7ac:	39 f0       	breq	.+14     	; 0x7bc <__fixunssfsi+0x4c>
 7ae:	b9 3f       	cpi	r27, 0xF9	; 249
 7b0:	cc f3       	brlt	.-14     	; 0x7a4 <__fixunssfsi+0x34>
 7b2:	86 95       	lsr	r24
 7b4:	77 95       	ror	r23
 7b6:	67 95       	ror	r22
 7b8:	b3 95       	inc	r27
 7ba:	d9 f7       	brne	.-10     	; 0x7b2 <__fixunssfsi+0x42>
 7bc:	3e f4       	brtc	.+14     	; 0x7cc <__fixunssfsi+0x5c>
 7be:	90 95       	com	r25
 7c0:	80 95       	com	r24
 7c2:	70 95       	com	r23
 7c4:	61 95       	neg	r22
 7c6:	7f 4f       	sbci	r23, 0xFF	; 255
 7c8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ca:	9f 4f       	sbci	r25, 0xFF	; 255
 7cc:	08 95       	ret

000007ce <__floatunsisf>:
 7ce:	e8 94       	clt
 7d0:	09 c0       	rjmp	.+18     	; 0x7e4 <__floatsisf+0x12>

000007d2 <__floatsisf>:
 7d2:	97 fb       	bst	r25, 7
 7d4:	3e f4       	brtc	.+14     	; 0x7e4 <__floatsisf+0x12>
 7d6:	90 95       	com	r25
 7d8:	80 95       	com	r24
 7da:	70 95       	com	r23
 7dc:	61 95       	neg	r22
 7de:	7f 4f       	sbci	r23, 0xFF	; 255
 7e0:	8f 4f       	sbci	r24, 0xFF	; 255
 7e2:	9f 4f       	sbci	r25, 0xFF	; 255
 7e4:	99 23       	and	r25, r25
 7e6:	a9 f0       	breq	.+42     	; 0x812 <__floatsisf+0x40>
 7e8:	f9 2f       	mov	r31, r25
 7ea:	96 e9       	ldi	r25, 0x96	; 150
 7ec:	bb 27       	eor	r27, r27
 7ee:	93 95       	inc	r25
 7f0:	f6 95       	lsr	r31
 7f2:	87 95       	ror	r24
 7f4:	77 95       	ror	r23
 7f6:	67 95       	ror	r22
 7f8:	b7 95       	ror	r27
 7fa:	f1 11       	cpse	r31, r1
 7fc:	f8 cf       	rjmp	.-16     	; 0x7ee <__floatsisf+0x1c>
 7fe:	fa f4       	brpl	.+62     	; 0x83e <__floatsisf+0x6c>
 800:	bb 0f       	add	r27, r27
 802:	11 f4       	brne	.+4      	; 0x808 <__floatsisf+0x36>
 804:	60 ff       	sbrs	r22, 0
 806:	1b c0       	rjmp	.+54     	; 0x83e <__floatsisf+0x6c>
 808:	6f 5f       	subi	r22, 0xFF	; 255
 80a:	7f 4f       	sbci	r23, 0xFF	; 255
 80c:	8f 4f       	sbci	r24, 0xFF	; 255
 80e:	9f 4f       	sbci	r25, 0xFF	; 255
 810:	16 c0       	rjmp	.+44     	; 0x83e <__floatsisf+0x6c>
 812:	88 23       	and	r24, r24
 814:	11 f0       	breq	.+4      	; 0x81a <__floatsisf+0x48>
 816:	96 e9       	ldi	r25, 0x96	; 150
 818:	11 c0       	rjmp	.+34     	; 0x83c <__floatsisf+0x6a>
 81a:	77 23       	and	r23, r23
 81c:	21 f0       	breq	.+8      	; 0x826 <__floatsisf+0x54>
 81e:	9e e8       	ldi	r25, 0x8E	; 142
 820:	87 2f       	mov	r24, r23
 822:	76 2f       	mov	r23, r22
 824:	05 c0       	rjmp	.+10     	; 0x830 <__floatsisf+0x5e>
 826:	66 23       	and	r22, r22
 828:	71 f0       	breq	.+28     	; 0x846 <__floatsisf+0x74>
 82a:	96 e8       	ldi	r25, 0x86	; 134
 82c:	86 2f       	mov	r24, r22
 82e:	70 e0       	ldi	r23, 0x00	; 0
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	2a f0       	brmi	.+10     	; 0x83e <__floatsisf+0x6c>
 834:	9a 95       	dec	r25
 836:	66 0f       	add	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	88 1f       	adc	r24, r24
 83c:	da f7       	brpl	.-10     	; 0x834 <__floatsisf+0x62>
 83e:	88 0f       	add	r24, r24
 840:	96 95       	lsr	r25
 842:	87 95       	ror	r24
 844:	97 f9       	bld	r25, 7
 846:	08 95       	ret

00000848 <__fp_inf>:
 848:	97 f9       	bld	r25, 7
 84a:	9f 67       	ori	r25, 0x7F	; 127
 84c:	80 e8       	ldi	r24, 0x80	; 128
 84e:	70 e0       	ldi	r23, 0x00	; 0
 850:	60 e0       	ldi	r22, 0x00	; 0
 852:	08 95       	ret

00000854 <__fp_nan>:
 854:	9f ef       	ldi	r25, 0xFF	; 255
 856:	80 ec       	ldi	r24, 0xC0	; 192
 858:	08 95       	ret

0000085a <__fp_pscA>:
 85a:	00 24       	eor	r0, r0
 85c:	0a 94       	dec	r0
 85e:	16 16       	cp	r1, r22
 860:	17 06       	cpc	r1, r23
 862:	18 06       	cpc	r1, r24
 864:	09 06       	cpc	r0, r25
 866:	08 95       	ret

00000868 <__fp_pscB>:
 868:	00 24       	eor	r0, r0
 86a:	0a 94       	dec	r0
 86c:	12 16       	cp	r1, r18
 86e:	13 06       	cpc	r1, r19
 870:	14 06       	cpc	r1, r20
 872:	05 06       	cpc	r0, r21
 874:	08 95       	ret

00000876 <__fp_round>:
 876:	09 2e       	mov	r0, r25
 878:	03 94       	inc	r0
 87a:	00 0c       	add	r0, r0
 87c:	11 f4       	brne	.+4      	; 0x882 <__fp_round+0xc>
 87e:	88 23       	and	r24, r24
 880:	52 f0       	brmi	.+20     	; 0x896 <__fp_round+0x20>
 882:	bb 0f       	add	r27, r27
 884:	40 f4       	brcc	.+16     	; 0x896 <__fp_round+0x20>
 886:	bf 2b       	or	r27, r31
 888:	11 f4       	brne	.+4      	; 0x88e <__fp_round+0x18>
 88a:	60 ff       	sbrs	r22, 0
 88c:	04 c0       	rjmp	.+8      	; 0x896 <__fp_round+0x20>
 88e:	6f 5f       	subi	r22, 0xFF	; 255
 890:	7f 4f       	sbci	r23, 0xFF	; 255
 892:	8f 4f       	sbci	r24, 0xFF	; 255
 894:	9f 4f       	sbci	r25, 0xFF	; 255
 896:	08 95       	ret

00000898 <__fp_split3>:
 898:	57 fd       	sbrc	r21, 7
 89a:	90 58       	subi	r25, 0x80	; 128
 89c:	44 0f       	add	r20, r20
 89e:	55 1f       	adc	r21, r21
 8a0:	59 f0       	breq	.+22     	; 0x8b8 <__fp_splitA+0x10>
 8a2:	5f 3f       	cpi	r21, 0xFF	; 255
 8a4:	71 f0       	breq	.+28     	; 0x8c2 <__fp_splitA+0x1a>
 8a6:	47 95       	ror	r20

000008a8 <__fp_splitA>:
 8a8:	88 0f       	add	r24, r24
 8aa:	97 fb       	bst	r25, 7
 8ac:	99 1f       	adc	r25, r25
 8ae:	61 f0       	breq	.+24     	; 0x8c8 <__fp_splitA+0x20>
 8b0:	9f 3f       	cpi	r25, 0xFF	; 255
 8b2:	79 f0       	breq	.+30     	; 0x8d2 <__fp_splitA+0x2a>
 8b4:	87 95       	ror	r24
 8b6:	08 95       	ret
 8b8:	12 16       	cp	r1, r18
 8ba:	13 06       	cpc	r1, r19
 8bc:	14 06       	cpc	r1, r20
 8be:	55 1f       	adc	r21, r21
 8c0:	f2 cf       	rjmp	.-28     	; 0x8a6 <__fp_split3+0xe>
 8c2:	46 95       	lsr	r20
 8c4:	f1 df       	rcall	.-30     	; 0x8a8 <__fp_splitA>
 8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <__fp_splitA+0x30>
 8c8:	16 16       	cp	r1, r22
 8ca:	17 06       	cpc	r1, r23
 8cc:	18 06       	cpc	r1, r24
 8ce:	99 1f       	adc	r25, r25
 8d0:	f1 cf       	rjmp	.-30     	; 0x8b4 <__fp_splitA+0xc>
 8d2:	86 95       	lsr	r24
 8d4:	71 05       	cpc	r23, r1
 8d6:	61 05       	cpc	r22, r1
 8d8:	08 94       	sec
 8da:	08 95       	ret

000008dc <__fp_zero>:
 8dc:	e8 94       	clt

000008de <__fp_szero>:
 8de:	bb 27       	eor	r27, r27
 8e0:	66 27       	eor	r22, r22
 8e2:	77 27       	eor	r23, r23
 8e4:	cb 01       	movw	r24, r22
 8e6:	97 f9       	bld	r25, 7
 8e8:	08 95       	ret

000008ea <log10>:
 8ea:	0e 94 85 04 	call	0x90a	; 0x90a <log>
 8ee:	29 ed       	ldi	r18, 0xD9	; 217
 8f0:	3b e5       	ldi	r19, 0x5B	; 91
 8f2:	4e ed       	ldi	r20, 0xDE	; 222
 8f4:	5e e3       	ldi	r21, 0x3E	; 62
 8f6:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__mulsf3>
 8fa:	16 f0       	brts	.+4      	; 0x900 <__stack+0x1>
 8fc:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__fp_mpack>
 900:	0c 94 2a 04 	jmp	0x854	; 0x854 <__fp_nan>
 904:	68 94       	set
 906:	0c 94 24 04 	jmp	0x848	; 0x848 <__fp_inf>

0000090a <log>:
 90a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__fp_splitA>
 90e:	a8 f3       	brcs	.-22     	; 0x8fa <log10+0x10>
 910:	99 23       	and	r25, r25
 912:	c1 f3       	breq	.-16     	; 0x904 <__stack+0x5>
 914:	ae f3       	brts	.-22     	; 0x900 <__stack+0x1>
 916:	df 93       	push	r29
 918:	cf 93       	push	r28
 91a:	1f 93       	push	r17
 91c:	0f 93       	push	r16
 91e:	ff 92       	push	r15
 920:	c9 2f       	mov	r28, r25
 922:	dd 27       	eor	r29, r29
 924:	88 23       	and	r24, r24
 926:	2a f0       	brmi	.+10     	; 0x932 <log+0x28>
 928:	21 97       	sbiw	r28, 0x01	; 1
 92a:	66 0f       	add	r22, r22
 92c:	77 1f       	adc	r23, r23
 92e:	88 1f       	adc	r24, r24
 930:	da f7       	brpl	.-10     	; 0x928 <log+0x1e>
 932:	20 e0       	ldi	r18, 0x00	; 0
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	40 e8       	ldi	r20, 0x80	; 128
 938:	5f eb       	ldi	r21, 0xBF	; 191
 93a:	9f e3       	ldi	r25, 0x3F	; 63
 93c:	88 39       	cpi	r24, 0x98	; 152
 93e:	20 f0       	brcs	.+8      	; 0x948 <log+0x3e>
 940:	80 3e       	cpi	r24, 0xE0	; 224
 942:	38 f0       	brcs	.+14     	; 0x952 <log+0x48>
 944:	21 96       	adiw	r28, 0x01	; 1
 946:	8f 77       	andi	r24, 0x7F	; 127
 948:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__addsf3>
 94c:	e8 e6       	ldi	r30, 0x68	; 104
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	04 c0       	rjmp	.+8      	; 0x95a <log+0x50>
 952:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__addsf3>
 956:	e5 e9       	ldi	r30, 0x95	; 149
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	0e 94 d2 05 	call	0xba4	; 0xba4 <__fp_powser>
 95e:	8b 01       	movw	r16, r22
 960:	be 01       	movw	r22, r28
 962:	ec 01       	movw	r28, r24
 964:	fb 2e       	mov	r15, r27
 966:	6f 57       	subi	r22, 0x7F	; 127
 968:	71 09       	sbc	r23, r1
 96a:	75 95       	asr	r23
 96c:	77 1f       	adc	r23, r23
 96e:	88 0b       	sbc	r24, r24
 970:	99 0b       	sbc	r25, r25
 972:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__floatsisf>
 976:	28 e1       	ldi	r18, 0x18	; 24
 978:	32 e7       	ldi	r19, 0x72	; 114
 97a:	41 e3       	ldi	r20, 0x31	; 49
 97c:	5f e3       	ldi	r21, 0x3F	; 63
 97e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__mulsf3x>
 982:	af 2d       	mov	r26, r15
 984:	98 01       	movw	r18, r16
 986:	ae 01       	movw	r20, r28
 988:	ff 90       	pop	r15
 98a:	0f 91       	pop	r16
 98c:	1f 91       	pop	r17
 98e:	cf 91       	pop	r28
 990:	df 91       	pop	r29
 992:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__addsf3x>
 996:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_round>

0000099a <__mulsf3>:
 99a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__mulsf3x>
 99e:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_round>
 9a2:	0e 94 2d 04 	call	0x85a	; 0x85a <__fp_pscA>
 9a6:	38 f0       	brcs	.+14     	; 0x9b6 <__mulsf3+0x1c>
 9a8:	0e 94 34 04 	call	0x868	; 0x868 <__fp_pscB>
 9ac:	20 f0       	brcs	.+8      	; 0x9b6 <__mulsf3+0x1c>
 9ae:	95 23       	and	r25, r21
 9b0:	11 f0       	breq	.+4      	; 0x9b6 <__mulsf3+0x1c>
 9b2:	0c 94 24 04 	jmp	0x848	; 0x848 <__fp_inf>
 9b6:	0c 94 2a 04 	jmp	0x854	; 0x854 <__fp_nan>
 9ba:	11 24       	eor	r1, r1
 9bc:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__fp_szero>

000009c0 <__mulsf3x>:
 9c0:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_split3>
 9c4:	70 f3       	brcs	.-36     	; 0x9a2 <__mulsf3+0x8>

000009c6 <__mulsf3_pse>:
 9c6:	95 9f       	mul	r25, r21
 9c8:	c1 f3       	breq	.-16     	; 0x9ba <__mulsf3+0x20>
 9ca:	95 0f       	add	r25, r21
 9cc:	50 e0       	ldi	r21, 0x00	; 0
 9ce:	55 1f       	adc	r21, r21
 9d0:	62 9f       	mul	r22, r18
 9d2:	f0 01       	movw	r30, r0
 9d4:	72 9f       	mul	r23, r18
 9d6:	bb 27       	eor	r27, r27
 9d8:	f0 0d       	add	r31, r0
 9da:	b1 1d       	adc	r27, r1
 9dc:	63 9f       	mul	r22, r19
 9de:	aa 27       	eor	r26, r26
 9e0:	f0 0d       	add	r31, r0
 9e2:	b1 1d       	adc	r27, r1
 9e4:	aa 1f       	adc	r26, r26
 9e6:	64 9f       	mul	r22, r20
 9e8:	66 27       	eor	r22, r22
 9ea:	b0 0d       	add	r27, r0
 9ec:	a1 1d       	adc	r26, r1
 9ee:	66 1f       	adc	r22, r22
 9f0:	82 9f       	mul	r24, r18
 9f2:	22 27       	eor	r18, r18
 9f4:	b0 0d       	add	r27, r0
 9f6:	a1 1d       	adc	r26, r1
 9f8:	62 1f       	adc	r22, r18
 9fa:	73 9f       	mul	r23, r19
 9fc:	b0 0d       	add	r27, r0
 9fe:	a1 1d       	adc	r26, r1
 a00:	62 1f       	adc	r22, r18
 a02:	83 9f       	mul	r24, r19
 a04:	a0 0d       	add	r26, r0
 a06:	61 1d       	adc	r22, r1
 a08:	22 1f       	adc	r18, r18
 a0a:	74 9f       	mul	r23, r20
 a0c:	33 27       	eor	r19, r19
 a0e:	a0 0d       	add	r26, r0
 a10:	61 1d       	adc	r22, r1
 a12:	23 1f       	adc	r18, r19
 a14:	84 9f       	mul	r24, r20
 a16:	60 0d       	add	r22, r0
 a18:	21 1d       	adc	r18, r1
 a1a:	82 2f       	mov	r24, r18
 a1c:	76 2f       	mov	r23, r22
 a1e:	6a 2f       	mov	r22, r26
 a20:	11 24       	eor	r1, r1
 a22:	9f 57       	subi	r25, 0x7F	; 127
 a24:	50 40       	sbci	r21, 0x00	; 0
 a26:	9a f0       	brmi	.+38     	; 0xa4e <__mulsf3_pse+0x88>
 a28:	f1 f0       	breq	.+60     	; 0xa66 <__mulsf3_pse+0xa0>
 a2a:	88 23       	and	r24, r24
 a2c:	4a f0       	brmi	.+18     	; 0xa40 <__mulsf3_pse+0x7a>
 a2e:	ee 0f       	add	r30, r30
 a30:	ff 1f       	adc	r31, r31
 a32:	bb 1f       	adc	r27, r27
 a34:	66 1f       	adc	r22, r22
 a36:	77 1f       	adc	r23, r23
 a38:	88 1f       	adc	r24, r24
 a3a:	91 50       	subi	r25, 0x01	; 1
 a3c:	50 40       	sbci	r21, 0x00	; 0
 a3e:	a9 f7       	brne	.-22     	; 0xa2a <__mulsf3_pse+0x64>
 a40:	9e 3f       	cpi	r25, 0xFE	; 254
 a42:	51 05       	cpc	r21, r1
 a44:	80 f0       	brcs	.+32     	; 0xa66 <__mulsf3_pse+0xa0>
 a46:	0c 94 24 04 	jmp	0x848	; 0x848 <__fp_inf>
 a4a:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__fp_szero>
 a4e:	5f 3f       	cpi	r21, 0xFF	; 255
 a50:	e4 f3       	brlt	.-8      	; 0xa4a <__mulsf3_pse+0x84>
 a52:	98 3e       	cpi	r25, 0xE8	; 232
 a54:	d4 f3       	brlt	.-12     	; 0xa4a <__mulsf3_pse+0x84>
 a56:	86 95       	lsr	r24
 a58:	77 95       	ror	r23
 a5a:	67 95       	ror	r22
 a5c:	b7 95       	ror	r27
 a5e:	f7 95       	ror	r31
 a60:	e7 95       	ror	r30
 a62:	9f 5f       	subi	r25, 0xFF	; 255
 a64:	c1 f7       	brne	.-16     	; 0xa56 <__mulsf3_pse+0x90>
 a66:	fe 2b       	or	r31, r30
 a68:	88 0f       	add	r24, r24
 a6a:	91 1d       	adc	r25, r1
 a6c:	96 95       	lsr	r25
 a6e:	87 95       	ror	r24
 a70:	97 f9       	bld	r25, 7
 a72:	08 95       	ret

00000a74 <pow>:
 a74:	fa 01       	movw	r30, r20
 a76:	ee 0f       	add	r30, r30
 a78:	ff 1f       	adc	r31, r31
 a7a:	30 96       	adiw	r30, 0x00	; 0
 a7c:	21 05       	cpc	r18, r1
 a7e:	31 05       	cpc	r19, r1
 a80:	a1 f1       	breq	.+104    	; 0xaea <pow+0x76>
 a82:	61 15       	cp	r22, r1
 a84:	71 05       	cpc	r23, r1
 a86:	61 f4       	brne	.+24     	; 0xaa0 <pow+0x2c>
 a88:	80 38       	cpi	r24, 0x80	; 128
 a8a:	bf e3       	ldi	r27, 0x3F	; 63
 a8c:	9b 07       	cpc	r25, r27
 a8e:	49 f1       	breq	.+82     	; 0xae2 <pow+0x6e>
 a90:	68 94       	set
 a92:	90 38       	cpi	r25, 0x80	; 128
 a94:	81 05       	cpc	r24, r1
 a96:	61 f0       	breq	.+24     	; 0xab0 <pow+0x3c>
 a98:	80 38       	cpi	r24, 0x80	; 128
 a9a:	bf ef       	ldi	r27, 0xFF	; 255
 a9c:	9b 07       	cpc	r25, r27
 a9e:	41 f0       	breq	.+16     	; 0xab0 <pow+0x3c>
 aa0:	99 23       	and	r25, r25
 aa2:	4a f5       	brpl	.+82     	; 0xaf6 <pow+0x82>
 aa4:	ff 3f       	cpi	r31, 0xFF	; 255
 aa6:	e1 05       	cpc	r30, r1
 aa8:	31 05       	cpc	r19, r1
 aaa:	21 05       	cpc	r18, r1
 aac:	19 f1       	breq	.+70     	; 0xaf4 <pow+0x80>
 aae:	e8 94       	clt
 ab0:	08 94       	sec
 ab2:	e7 95       	ror	r30
 ab4:	d9 01       	movw	r26, r18
 ab6:	aa 23       	and	r26, r26
 ab8:	29 f4       	brne	.+10     	; 0xac4 <pow+0x50>
 aba:	ab 2f       	mov	r26, r27
 abc:	be 2f       	mov	r27, r30
 abe:	f8 5f       	subi	r31, 0xF8	; 248
 ac0:	d0 f3       	brcs	.-12     	; 0xab6 <pow+0x42>
 ac2:	10 c0       	rjmp	.+32     	; 0xae4 <pow+0x70>
 ac4:	ff 5f       	subi	r31, 0xFF	; 255
 ac6:	70 f4       	brcc	.+28     	; 0xae4 <pow+0x70>
 ac8:	a6 95       	lsr	r26
 aca:	e0 f7       	brcc	.-8      	; 0xac4 <pow+0x50>
 acc:	f7 39       	cpi	r31, 0x97	; 151
 ace:	50 f0       	brcs	.+20     	; 0xae4 <pow+0x70>
 ad0:	19 f0       	breq	.+6      	; 0xad8 <pow+0x64>
 ad2:	ff 3a       	cpi	r31, 0xAF	; 175
 ad4:	38 f4       	brcc	.+14     	; 0xae4 <pow+0x70>
 ad6:	9f 77       	andi	r25, 0x7F	; 127
 ad8:	9f 93       	push	r25
 ada:	0d d0       	rcall	.+26     	; 0xaf6 <pow+0x82>
 adc:	0f 90       	pop	r0
 ade:	07 fc       	sbrc	r0, 7
 ae0:	90 58       	subi	r25, 0x80	; 128
 ae2:	08 95       	ret
 ae4:	46 f0       	brts	.+16     	; 0xaf6 <pow+0x82>
 ae6:	0c 94 2a 04 	jmp	0x854	; 0x854 <__fp_nan>
 aea:	60 e0       	ldi	r22, 0x00	; 0
 aec:	70 e0       	ldi	r23, 0x00	; 0
 aee:	80 e8       	ldi	r24, 0x80	; 128
 af0:	9f e3       	ldi	r25, 0x3F	; 63
 af2:	08 95       	ret
 af4:	4f e7       	ldi	r20, 0x7F	; 127
 af6:	9f 77       	andi	r25, 0x7F	; 127
 af8:	5f 93       	push	r21
 afa:	4f 93       	push	r20
 afc:	3f 93       	push	r19
 afe:	2f 93       	push	r18
 b00:	0e 94 85 04 	call	0x90a	; 0x90a <log>
 b04:	2f 91       	pop	r18
 b06:	3f 91       	pop	r19
 b08:	4f 91       	pop	r20
 b0a:	5f 91       	pop	r21
 b0c:	0e 94 cd 04 	call	0x99a	; 0x99a <__mulsf3>
 b10:	0c 94 92 05 	jmp	0xb24	; 0xb24 <exp>
 b14:	29 f4       	brne	.+10     	; 0xb20 <pow+0xac>
 b16:	16 f0       	brts	.+4      	; 0xb1c <pow+0xa8>
 b18:	0c 94 24 04 	jmp	0x848	; 0x848 <__fp_inf>
 b1c:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__fp_zero>
 b20:	0c 94 2a 04 	jmp	0x854	; 0x854 <__fp_nan>

00000b24 <exp>:
 b24:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__fp_splitA>
 b28:	a8 f3       	brcs	.-22     	; 0xb14 <pow+0xa0>
 b2a:	96 38       	cpi	r25, 0x86	; 134
 b2c:	a0 f7       	brcc	.-24     	; 0xb16 <pow+0xa2>
 b2e:	07 f8       	bld	r0, 7
 b30:	0f 92       	push	r0
 b32:	e8 94       	clt
 b34:	2b e3       	ldi	r18, 0x3B	; 59
 b36:	3a ea       	ldi	r19, 0xAA	; 170
 b38:	48 eb       	ldi	r20, 0xB8	; 184
 b3a:	5f e7       	ldi	r21, 0x7F	; 127
 b3c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__mulsf3_pse>
 b40:	0f 92       	push	r0
 b42:	0f 92       	push	r0
 b44:	0f 92       	push	r0
 b46:	4d b7       	in	r20, 0x3d	; 61
 b48:	5e b7       	in	r21, 0x3e	; 62
 b4a:	0f 92       	push	r0
 b4c:	0e 94 3b 06 	call	0xc76	; 0xc76 <modf>
 b50:	e2 ec       	ldi	r30, 0xC2	; 194
 b52:	f0 e0       	ldi	r31, 0x00	; 0
 b54:	0e 94 d2 05 	call	0xba4	; 0xba4 <__fp_powser>
 b58:	4f 91       	pop	r20
 b5a:	5f 91       	pop	r21
 b5c:	ef 91       	pop	r30
 b5e:	ff 91       	pop	r31
 b60:	e5 95       	asr	r30
 b62:	ee 1f       	adc	r30, r30
 b64:	ff 1f       	adc	r31, r31
 b66:	49 f0       	breq	.+18     	; 0xb7a <exp+0x56>
 b68:	fe 57       	subi	r31, 0x7E	; 126
 b6a:	e0 68       	ori	r30, 0x80	; 128
 b6c:	44 27       	eor	r20, r20
 b6e:	ee 0f       	add	r30, r30
 b70:	44 1f       	adc	r20, r20
 b72:	fa 95       	dec	r31
 b74:	e1 f7       	brne	.-8      	; 0xb6e <exp+0x4a>
 b76:	41 95       	neg	r20
 b78:	55 0b       	sbc	r21, r21
 b7a:	0e 94 05 06 	call	0xc0a	; 0xc0a <ldexp>
 b7e:	0f 90       	pop	r0
 b80:	07 fe       	sbrs	r0, 7
 b82:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <inverse>
 b86:	08 95       	ret

00000b88 <__fp_mpack>:
 b88:	9f 3f       	cpi	r25, 0xFF	; 255
 b8a:	31 f0       	breq	.+12     	; 0xb98 <__fp_mpack_finite+0xc>

00000b8c <__fp_mpack_finite>:
 b8c:	91 50       	subi	r25, 0x01	; 1
 b8e:	20 f4       	brcc	.+8      	; 0xb98 <__fp_mpack_finite+0xc>
 b90:	87 95       	ror	r24
 b92:	77 95       	ror	r23
 b94:	67 95       	ror	r22
 b96:	b7 95       	ror	r27
 b98:	88 0f       	add	r24, r24
 b9a:	91 1d       	adc	r25, r1
 b9c:	96 95       	lsr	r25
 b9e:	87 95       	ror	r24
 ba0:	97 f9       	bld	r25, 7
 ba2:	08 95       	ret

00000ba4 <__fp_powser>:
 ba4:	df 93       	push	r29
 ba6:	cf 93       	push	r28
 ba8:	1f 93       	push	r17
 baa:	0f 93       	push	r16
 bac:	ff 92       	push	r15
 bae:	ef 92       	push	r14
 bb0:	df 92       	push	r13
 bb2:	7b 01       	movw	r14, r22
 bb4:	8c 01       	movw	r16, r24
 bb6:	68 94       	set
 bb8:	06 c0       	rjmp	.+12     	; 0xbc6 <__fp_powser+0x22>
 bba:	da 2e       	mov	r13, r26
 bbc:	ef 01       	movw	r28, r30
 bbe:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__mulsf3x>
 bc2:	fe 01       	movw	r30, r28
 bc4:	e8 94       	clt
 bc6:	a5 91       	lpm	r26, Z+
 bc8:	25 91       	lpm	r18, Z+
 bca:	35 91       	lpm	r19, Z+
 bcc:	45 91       	lpm	r20, Z+
 bce:	55 91       	lpm	r21, Z+
 bd0:	a6 f3       	brts	.-24     	; 0xbba <__fp_powser+0x16>
 bd2:	ef 01       	movw	r28, r30
 bd4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__addsf3x>
 bd8:	fe 01       	movw	r30, r28
 bda:	97 01       	movw	r18, r14
 bdc:	a8 01       	movw	r20, r16
 bde:	da 94       	dec	r13
 be0:	69 f7       	brne	.-38     	; 0xbbc <__fp_powser+0x18>
 be2:	df 90       	pop	r13
 be4:	ef 90       	pop	r14
 be6:	ff 90       	pop	r15
 be8:	0f 91       	pop	r16
 bea:	1f 91       	pop	r17
 bec:	cf 91       	pop	r28
 bee:	df 91       	pop	r29
 bf0:	08 95       	ret

00000bf2 <inverse>:
 bf2:	9b 01       	movw	r18, r22
 bf4:	ac 01       	movw	r20, r24
 bf6:	60 e0       	ldi	r22, 0x00	; 0
 bf8:	70 e0       	ldi	r23, 0x00	; 0
 bfa:	80 e8       	ldi	r24, 0x80	; 128
 bfc:	9f e3       	ldi	r25, 0x3F	; 63
 bfe:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__divsf3>
 c02:	0c 94 24 04 	jmp	0x848	; 0x848 <__fp_inf>
 c06:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__fp_mpack>

00000c0a <ldexp>:
 c0a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__fp_splitA>
 c0e:	d8 f3       	brcs	.-10     	; 0xc06 <inverse+0x14>
 c10:	99 23       	and	r25, r25
 c12:	c9 f3       	breq	.-14     	; 0xc06 <inverse+0x14>
 c14:	94 0f       	add	r25, r20
 c16:	51 1d       	adc	r21, r1
 c18:	a3 f3       	brvs	.-24     	; 0xc02 <inverse+0x10>
 c1a:	91 50       	subi	r25, 0x01	; 1
 c1c:	50 40       	sbci	r21, 0x00	; 0
 c1e:	94 f0       	brlt	.+36     	; 0xc44 <ldexp+0x3a>
 c20:	59 f0       	breq	.+22     	; 0xc38 <ldexp+0x2e>
 c22:	88 23       	and	r24, r24
 c24:	32 f0       	brmi	.+12     	; 0xc32 <ldexp+0x28>
 c26:	66 0f       	add	r22, r22
 c28:	77 1f       	adc	r23, r23
 c2a:	88 1f       	adc	r24, r24
 c2c:	91 50       	subi	r25, 0x01	; 1
 c2e:	50 40       	sbci	r21, 0x00	; 0
 c30:	c1 f7       	brne	.-16     	; 0xc22 <ldexp+0x18>
 c32:	9e 3f       	cpi	r25, 0xFE	; 254
 c34:	51 05       	cpc	r21, r1
 c36:	2c f7       	brge	.-54     	; 0xc02 <inverse+0x10>
 c38:	88 0f       	add	r24, r24
 c3a:	91 1d       	adc	r25, r1
 c3c:	96 95       	lsr	r25
 c3e:	87 95       	ror	r24
 c40:	97 f9       	bld	r25, 7
 c42:	08 95       	ret
 c44:	5f 3f       	cpi	r21, 0xFF	; 255
 c46:	ac f0       	brlt	.+42     	; 0xc72 <ldexp+0x68>
 c48:	98 3e       	cpi	r25, 0xE8	; 232
 c4a:	9c f0       	brlt	.+38     	; 0xc72 <ldexp+0x68>
 c4c:	bb 27       	eor	r27, r27
 c4e:	86 95       	lsr	r24
 c50:	77 95       	ror	r23
 c52:	67 95       	ror	r22
 c54:	b7 95       	ror	r27
 c56:	08 f4       	brcc	.+2      	; 0xc5a <ldexp+0x50>
 c58:	b1 60       	ori	r27, 0x01	; 1
 c5a:	93 95       	inc	r25
 c5c:	c1 f7       	brne	.-16     	; 0xc4e <ldexp+0x44>
 c5e:	bb 0f       	add	r27, r27
 c60:	58 f7       	brcc	.-42     	; 0xc38 <ldexp+0x2e>
 c62:	11 f4       	brne	.+4      	; 0xc68 <ldexp+0x5e>
 c64:	60 ff       	sbrs	r22, 0
 c66:	e8 cf       	rjmp	.-48     	; 0xc38 <ldexp+0x2e>
 c68:	6f 5f       	subi	r22, 0xFF	; 255
 c6a:	7f 4f       	sbci	r23, 0xFF	; 255
 c6c:	8f 4f       	sbci	r24, 0xFF	; 255
 c6e:	9f 4f       	sbci	r25, 0xFF	; 255
 c70:	e3 cf       	rjmp	.-58     	; 0xc38 <ldexp+0x2e>
 c72:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__fp_szero>

00000c76 <modf>:
 c76:	fa 01       	movw	r30, r20
 c78:	dc 01       	movw	r26, r24
 c7a:	aa 0f       	add	r26, r26
 c7c:	bb 1f       	adc	r27, r27
 c7e:	9b 01       	movw	r18, r22
 c80:	ac 01       	movw	r20, r24
 c82:	bf 57       	subi	r27, 0x7F	; 127
 c84:	28 f4       	brcc	.+10     	; 0xc90 <modf+0x1a>
 c86:	22 27       	eor	r18, r18
 c88:	33 27       	eor	r19, r19
 c8a:	44 27       	eor	r20, r20
 c8c:	50 78       	andi	r21, 0x80	; 128
 c8e:	20 c0       	rjmp	.+64     	; 0xcd0 <modf+0x5a>
 c90:	b7 51       	subi	r27, 0x17	; 23
 c92:	90 f4       	brcc	.+36     	; 0xcb8 <modf+0x42>
 c94:	ab 2f       	mov	r26, r27
 c96:	00 24       	eor	r0, r0
 c98:	46 95       	lsr	r20
 c9a:	37 95       	ror	r19
 c9c:	27 95       	ror	r18
 c9e:	01 1c       	adc	r0, r1
 ca0:	a3 95       	inc	r26
 ca2:	d2 f3       	brmi	.-12     	; 0xc98 <modf+0x22>
 ca4:	00 20       	and	r0, r0
 ca6:	71 f0       	breq	.+28     	; 0xcc4 <modf+0x4e>
 ca8:	22 0f       	add	r18, r18
 caa:	33 1f       	adc	r19, r19
 cac:	44 1f       	adc	r20, r20
 cae:	b3 95       	inc	r27
 cb0:	da f3       	brmi	.-10     	; 0xca8 <modf+0x32>
 cb2:	0e d0       	rcall	.+28     	; 0xcd0 <modf+0x5a>
 cb4:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__subsf3>
 cb8:	61 30       	cpi	r22, 0x01	; 1
 cba:	71 05       	cpc	r23, r1
 cbc:	a0 e8       	ldi	r26, 0x80	; 128
 cbe:	8a 07       	cpc	r24, r26
 cc0:	b9 46       	sbci	r27, 0x69	; 105
 cc2:	30 f4       	brcc	.+12     	; 0xcd0 <modf+0x5a>
 cc4:	9b 01       	movw	r18, r22
 cc6:	ac 01       	movw	r20, r24
 cc8:	66 27       	eor	r22, r22
 cca:	77 27       	eor	r23, r23
 ccc:	88 27       	eor	r24, r24
 cce:	90 78       	andi	r25, 0x80	; 128
 cd0:	30 96       	adiw	r30, 0x00	; 0
 cd2:	21 f0       	breq	.+8      	; 0xcdc <modf+0x66>
 cd4:	20 83       	st	Z, r18
 cd6:	31 83       	std	Z+1, r19	; 0x01
 cd8:	42 83       	std	Z+2, r20	; 0x02
 cda:	53 83       	std	Z+3, r21	; 0x03
 cdc:	08 95       	ret

00000cde <_exit>:
 cde:	f8 94       	cli

00000ce0 <__stop_program>:
 ce0:	ff cf       	rjmp	.-2      	; 0xce0 <__stop_program>

Disassembly of section .bss:

00800104 <__bss_start>:
  800104:	00 00       	nop
	...

00800108 <timer0_fract>:
	...

00800109 <timer0_millis>:
  800109:	00 00       	nop
	...

0080010d <timer0_overflow_count>:
  80010d:	00 00       	nop
	...

Disassembly of section .comment:

00000000 <_end-0x800111>:
   0:	47 43       	sbci	r20, 0x37	; 55
   2:	43 3a       	cpi	r20, 0xA3	; 163
   4:	20 28       	or	r2, r0
   6:	47 4e       	sbci	r20, 0xE7	; 231
   8:	55 29       	or	r21, r5
   a:	20 35       	cpi	r18, 0x50	; 80
   c:	2e 34       	cpi	r18, 0x4E	; 78
   e:	2e 30       	cpi	r18, 0x0E	; 14
	...

Disassembly of section .note.gnu.avr.deviceinfo:

00000000 <.note.gnu.avr.deviceinfo>:
   0:	04 00       	.word	0x0004	; ????
   2:	00 00       	nop
   4:	2d 00       	.word	0x002d	; ????
   6:	00 00       	nop
   8:	01 00       	.word	0x0001	; ????
   a:	00 00       	nop
   c:	41 56       	subi	r20, 0x61	; 97
   e:	52 00       	.word	0x0052	; ????
  10:	00 00       	nop
  12:	00 00       	nop
  14:	00 80       	ld	r0, Z
  16:	00 00       	nop
  18:	00 01       	movw	r0, r0
  1a:	00 00       	nop
  1c:	00 08       	sbc	r0, r0
  1e:	00 00       	nop
  20:	00 00       	nop
  22:	00 00       	nop
  24:	00 04       	cpc	r0, r0
  26:	00 00       	nop
  28:	08 00       	.word	0x0008	; ????
  2a:	00 00       	nop
  2c:	01 00       	.word	0x0001	; ????
  2e:	00 00       	nop
  30:	00 61       	ori	r16, 0x10	; 16
  32:	74 6d       	ori	r23, 0xD4	; 212
  34:	65 67       	ori	r22, 0x75	; 117
  36:	61 33       	cpi	r22, 0x31	; 49
  38:	32 38       	cpi	r19, 0x82	; 130
  3a:	70 00       	.word	0x0070	; ????
  3c:	00 00       	nop
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	24 00       	.word	0x0024	; ????
   2:	00 00       	nop
   4:	02 00       	.word	0x0002	; ????
   6:	f4 05       	cpc	r31, r4
   8:	00 00       	nop
   a:	04 00       	.word	0x0004	; ????
   c:	00 00       	nop
   e:	00 00       	nop
  10:	78 01       	movw	r14, r16
  12:	00 00       	nop
  14:	e4 01       	movw	r28, r8
  16:	00 00       	nop
  18:	5c 03       	fmul	r21, r20
  1a:	00 00       	nop
  1c:	48 02       	muls	r20, r24
	...
  26:	00 00       	nop
  28:	1c 00       	.word	0x001c	; ????
  2a:	00 00       	nop
  2c:	02 00       	.word	0x0002	; ????
  2e:	e0 0e       	add	r14, r16
  30:	00 00       	nop
  32:	04 00       	.word	0x0004	; ????
  34:	00 00       	nop
  36:	00 00       	nop
  38:	de 0c       	add	r13, r14
  3a:	00 00       	nop
  3c:	04 00       	.word	0x0004	; ????
	...
  46:	00 00       	nop
  48:	1c 00       	.word	0x001c	; ????
  4a:	00 00       	nop
  4c:	02 00       	.word	0x0002	; ????
  4e:	8e 0f       	add	r24, r30
  50:	00 00       	nop
  52:	04 00       	.word	0x0004	; ????
  54:	00 00       	nop
  56:	00 00       	nop
  58:	46 01       	movw	r8, r12
  5a:	00 00       	nop
  5c:	16 00       	.word	0x0016	; ????
	...
  66:	00 00       	nop
  68:	1c 00       	.word	0x001c	; ????
  6a:	00 00       	nop
  6c:	02 00       	.word	0x0002	; ????
  6e:	3c 10       	cpse	r3, r12
  70:	00 00       	nop
  72:	04 00       	.word	0x0004	; ????
  74:	00 00       	nop
  76:	00 00       	nop
  78:	5c 01       	movw	r10, r24
  7a:	00 00       	nop
  7c:	10 00       	.word	0x0010	; ????
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	f0 05       	cpc	r31, r0
       2:	00 00       	nop
       4:	02 00       	.word	0x0002	; ????
       6:	00 00       	nop
       8:	00 00       	nop
       a:	04 01       	movw	r0, r8
	...
      14:	02 0f       	add	r16, r18
      16:	00 00       	nop
      18:	00 01       	movw	r0, r0
      1a:	08 03       	fmul	r16, r16
      1c:	17 00       	.word	0x0017	; ????
      1e:	00 00       	nop
      20:	02 07       	cpc	r16, r18
      22:	04 14       	cp	r0, r4
      24:	00 00       	nop
      26:	00 05       	cpc	r16, r0
      28:	1b 00       	.word	0x001b	; ????
      2a:	00 00       	nop
      2c:	ff 03       	fmulsu	r23, r23
      2e:	00 06       	cpc	r0, r16
      30:	20 00       	.word	0x0020	; ????
      32:	00 00       	nop
      34:	00 00       	nop
      36:	22 00       	.word	0x0022	; ????
      38:	00 00       	nop
      3a:	01 05       	cpc	r16, r1
      3c:	03 00       	.word	0x0003	; ????
      3e:	00 81       	ld	r16, Z
      40:	00 07       	cpc	r16, r16
      42:	29 00       	.word	0x0029	; ????
      44:	00 00       	nop
      46:	00 00       	nop
      48:	14 00       	.word	0x0014	; ????
      4a:	00 00       	nop
      4c:	01 05       	cpc	r16, r1
      4e:	03 c6       	rjmp	.+3078   	; 0xc56 <ldexp+0x4c>
      50:	00 80       	ld	r0, Z
      52:	00 08       	sbc	r0, r0
      54:	2e 00       	.word	0x002e	; ????
      56:	00 00       	nop
      58:	00 00       	nop
      5a:	14 00       	.word	0x0014	; ????
      5c:	00 00       	nop
      5e:	01 05       	cpc	r16, r1
      60:	03 c0       	rjmp	.+6      	; 0x68 <__SREG__+0x29>
      62:	00 80       	ld	r0, Z
      64:	00 09       	sbc	r16, r0
      66:	35 00       	.word	0x0035	; ????
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	14 00       	.word	0x0014	; ????
      6e:	00 00       	nop
      70:	01 05       	cpc	r16, r1
      72:	03 c1       	rjmp	.+518    	; 0x27a <delay+0x26>
      74:	00 80       	ld	r0, Z
      76:	00 0a       	sbc	r0, r16
      78:	3c 00       	.word	0x003c	; ????
      7a:	00 00       	nop
      7c:	00 00       	nop
      7e:	14 00       	.word	0x0014	; ????
      80:	00 00       	nop
      82:	01 05       	cpc	r16, r1
      84:	03 c2       	rjmp	.+1030   	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
      86:	00 80       	ld	r0, Z
      88:	00 0b       	sbc	r16, r16
      8a:	43 00       	.word	0x0043	; ????
      8c:	00 00       	nop
      8e:	00 00       	nop
      90:	1b 00       	.word	0x001b	; ????
      92:	00 00       	nop
      94:	01 05       	cpc	r16, r1
      96:	03 c4       	rjmp	.+2054   	; 0x89e <__fp_split3+0x6>
      98:	00 80       	ld	r0, Z
      9a:	00 0c       	add	r0, r0
      9c:	49 00       	.word	0x0049	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	14 00       	.word	0x0014	; ????
      a4:	00 00       	nop
      a6:	01 05       	cpc	r16, r1
      a8:	03 bd       	out	0x23, r16	; 35
      aa:	00 80       	ld	r0, Z
      ac:	00 0d       	add	r16, r0
      ae:	4f 00       	.word	0x004f	; ????
      b0:	00 00       	nop
      b2:	00 00       	nop
      b4:	14 00       	.word	0x0014	; ????
      b6:	00 00       	nop
      b8:	01 05       	cpc	r16, r1
      ba:	03 b8       	out	0x03, r0	; 3
      bc:	00 80       	ld	r0, Z
      be:	00 0e       	add	r0, r16
      c0:	54 00       	.word	0x0054	; ????
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	14 00       	.word	0x0014	; ????
      c8:	00 00       	nop
      ca:	01 05       	cpc	r16, r1
      cc:	03 bc       	out	0x23, r0	; 35
      ce:	00 80       	ld	r0, Z
      d0:	00 0f       	add	r16, r16
      d2:	59 00       	.word	0x0059	; ????
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	14 00       	.word	0x0014	; ????
      da:	00 00       	nop
      dc:	01 05       	cpc	r16, r1
      de:	03 b9       	out	0x03, r16	; 3
      e0:	00 80       	ld	r0, Z
      e2:	00 10       	cpse	r0, r0
      e4:	5e 00       	.word	0x005e	; ????
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	14 00       	.word	0x0014	; ????
      ec:	00 00       	nop
      ee:	01 05       	cpc	r16, r1
      f0:	03 bb       	out	0x13, r16	; 19
      f2:	00 80       	ld	r0, Z
      f4:	00 11       	cpse	r16, r0
      f6:	63 00       	.word	0x0063	; ????
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	14 00       	.word	0x0014	; ????
      fe:	00 00       	nop
     100:	01 05       	cpc	r16, r1
     102:	03 ba       	out	0x13, r0	; 19
     104:	00 80       	ld	r0, Z
     106:	00 12       	cpse	r0, r16
     108:	68 00       	.word	0x0068	; ????
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	14 00       	.word	0x0014	; ????
     110:	00 00       	nop
     112:	01 05       	cpc	r16, r1
     114:	03 6f       	ori	r16, 0xF3	; 243
     116:	00 80       	ld	r0, Z
     118:	00 13       	cpse	r16, r16
     11a:	6f 00       	.word	0x006f	; ????
     11c:	00 00       	nop
     11e:	00 00       	nop
     120:	14 00       	.word	0x0014	; ????
     122:	00 00       	nop
     124:	01 05       	cpc	r16, r1
     126:	03 36       	cpi	r16, 0x63	; 99
     128:	00 80       	ld	r0, Z
     12a:	00 14       	cp	r0, r0
     12c:	75 00       	.word	0x0075	; ????
     12e:	00 00       	nop
     130:	00 00       	nop
     132:	14 00       	.word	0x0014	; ????
     134:	00 00       	nop
     136:	01 05       	cpc	r16, r1
     138:	03 80       	ldd	r0, Z+3	; 0x03
     13a:	00 80       	ld	r0, Z
     13c:	00 15       	cp	r16, r0
     13e:	7c 00       	.word	0x007c	; ????
     140:	00 00       	nop
     142:	00 00       	nop
     144:	14 00       	.word	0x0014	; ????
     146:	00 00       	nop
     148:	01 05       	cpc	r16, r1
     14a:	03 81       	ldd	r16, Z+3	; 0x03
     14c:	00 80       	ld	r0, Z
     14e:	00 16       	cp	r0, r16
     150:	83 00       	.word	0x0083	; ????
     152:	00 00       	nop
     154:	00 00       	nop
     156:	14 00       	.word	0x0014	; ????
     158:	00 00       	nop
     15a:	01 05       	cpc	r16, r1
     15c:	03 82       	std	Z+3, r0	; 0x03
     15e:	00 80       	ld	r0, Z
     160:	00 17       	cp	r16, r16
     162:	8a 00       	.word	0x008a	; ????
     164:	00 00       	nop
     166:	00 00       	nop
     168:	1b 00       	.word	0x001b	; ????
     16a:	00 00       	nop
     16c:	01 05       	cpc	r16, r1
     16e:	03 84       	ldd	r0, Z+11	; 0x0b
     170:	00 80       	ld	r0, Z
     172:	00 18       	sub	r0, r0
     174:	90 00       	.word	0x0090	; ????
     176:	00 00       	nop
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
     178:	00 00       	nop
     17a:	1b 00       	.word	0x001b	; ????
     17c:	00 00       	nop
	uint8_t bit = digitalPinToBitMask(pin);
     17e:	01 05       	cpc	r16, r1
     180:	03 88       	ldd	r0, Z+19	; 0x13
     182:	00 80       	ld	r0, Z
	uint8_t port = digitalPinToPort(pin);
     184:	00 19       	sub	r16, r0
     186:	96 00       	.word	0x0096	; ????
     188:	00 00       	nop
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     18a:	00 00       	nop
     18c:	1b 00       	.word	0x001b	; ????
     18e:	00 00       	nop

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     190:	01 05       	cpc	r16, r1
     192:	03 8a       	std	Z+19, r0	; 0x13
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     194:	00 80       	ld	r0, Z
     196:	00 1a       	sub	r0, r16
     198:	9c 00       	.word	0x009c	; ????
     19a:	00 00       	nop
     19c:	00 00       	nop
     19e:	1b 00       	.word	0x001b	; ????
     1a0:	00 00       	nop
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     1a2:	01 05       	cpc	r16, r1
     1a4:	03 86       	std	Z+11, r0	; 0x0b
     1a6:	00 80       	ld	r0, Z
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     1a8:	00 1b       	sub	r16, r16
     1aa:	a1 00       	.word	0x00a1	; ????
     1ac:	00 00       	nop
     1ae:	00 00       	nop
     1b0:	14 00       	.word	0x0014	; ????
     1b2:	00 00       	nop
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     1b4:	01 05       	cpc	r16, r1
     1b6:	03 43       	sbci	r16, 0x33	; 51
     1b8:	00 80       	ld	r0, Z
     1ba:	00 1c       	adc	r0, r0
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     1bc:	a7 00       	.word	0x00a7	; ????
     1be:	00 00       	nop
     1c0:	00 00       	nop
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     1c2:	14 00       	.word	0x0014	; ????
     1c4:	00 00       	nop
     1c6:	01 05       	cpc	r16, r1
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     1c8:	03 70       	andi	r16, 0x03	; 3
     1ca:	00 80       	ld	r0, Z
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     1cc:	00 1d       	adc	r16, r0
     1ce:	ae 00       	.word	0x00ae	; ????
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     1d0:	00 00       	nop
     1d2:	00 00       	nop
     1d4:	14 00       	.word	0x0014	; ????
     1d6:	00 00       	nop
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     1d8:	01 05       	cpc	r16, r1
     1da:	03 37       	cpi	r16, 0x73	; 115
     1dc:	00 80       	ld	r0, Z
     1de:	00 1e       	adc	r0, r16
     1e0:	b4 00       	.word	0x00b4	; ????

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
     1e2:	00 00       	nop
     1e4:	00 00       	nop
     1e6:	14 00       	.word	0x0014	; ????
     1e8:	00 00       	nop
     1ea:	01 05       	cpc	r16, r1
     1ec:	03 b0       	in	r0, 0x03	; 3
     1ee:	00 80       	ld	r0, Z

	uint8_t oldSREG = SREG;
     1f0:	00 1f       	adc	r16, r16
	cli();
     1f2:	bb 00       	.word	0x00bb	; ????

	if (val == LOW) {
     1f4:	00 00       	nop
     1f6:	00 00       	nop
		*out &= ~bit;
     1f8:	14 00       	.word	0x0014	; ????
     1fa:	00 00       	nop
     1fc:	01 05       	cpc	r16, r1
     1fe:	03 b1       	in	r16, 0x03	; 3
	} else {
		*out |= bit;
     200:	00 80       	ld	r0, Z
     202:	00 20       	and	r0, r0
     204:	c2 00       	.word	0x00c2	; ????
	}

	SREG = oldSREG;
     206:	00 00       	nop
     208:	00 00       	nop
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     20a:	14 00       	.word	0x0014	; ????
	
	cli();
     20c:	00 00       	nop
	m = timer0_overflow_count;
     20e:	01 05       	cpc	r16, r1
     210:	03 b2       	in	r0, 0x13	; 19
     212:	00 80       	ld	r0, Z
     214:	00 21       	and	r16, r0
     216:	c8 00       	.word	0x00c8	; ????
     218:	00 00       	nop
     21a:	00 00       	nop
     21c:	14 00       	.word	0x0014	; ????
#if defined(TCNT0)
	t = TCNT0;
     21e:	00 00       	nop
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     220:	01 05       	cpc	r16, r1
     222:	03 b4       	in	r0, 0x23	; 35
     224:	00 80       	ld	r0, Z
     226:	00 22       	and	r0, r16
		m++;
     228:	ce 00       	.word	0x00ce	; ????
     22a:	00 00       	nop
     22c:	00 00       	nop
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     22e:	14 00       	.word	0x0014	; ????
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     230:	00 00       	nop
     232:	01 05       	cpc	r16, r1
     234:	03 b3       	in	r16, 0x13	; 19
     236:	00 80       	ld	r0, Z
     238:	00 23       	and	r16, r16
     23a:	d4 00       	.word	0x00d4	; ????
     23c:	00 00       	nop
     23e:	00 00       	nop
     240:	14 00       	.word	0x0014	; ????
     242:	00 00       	nop
     244:	01 05       	cpc	r16, r1
     246:	03 b6       	in	r0, 0x33	; 51
     248:	00 80       	ld	r0, Z
     24a:	00 24       	eor	r0, r0
     24c:	d9 00       	.word	0x00d9	; ????
     24e:	00 00       	nop
     250:	00 00       	nop
}
     252:	14 00       	.word	0x0014	; ????

void delay(unsigned long ms)
{
     254:	00 00       	nop
     256:	01 05       	cpc	r16, r1
     258:	03 43       	sbci	r16, 0x33	; 51
     25a:	00 80       	ld	r0, Z
     25c:	00 25       	eor	r16, r0
     25e:	df 00       	.word	0x00df	; ????
     260:	00 00       	nop
     262:	00 00       	nop
     264:	14 00       	.word	0x0014	; ????
     266:	00 00       	nop
	uint32_t start = micros();
     268:	01 05       	cpc	r16, r1
     26a:	03 7c       	andi	r16, 0xC3	; 195
     26c:	00 80       	ld	r0, Z
     26e:	00 26       	eor	r0, r16

	while (ms > 0) {
     270:	e5 00       	.word	0x00e5	; ????
     272:	00 00       	nop
     274:	00 00       	nop
     276:	1b 00       	.word	0x001b	; ????
     278:	00 00       	nop
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     27a:	01 05       	cpc	r16, r1
     27c:	03 78       	andi	r16, 0x83	; 131
     27e:	00 80       	ld	r0, Z
     280:	00 27       	eor	r16, r16
     282:	e9 00       	.word	0x00e9	; ????
     284:	00 00       	nop
     286:	00 00       	nop
     288:	14 00       	.word	0x0014	; ????
     28a:	00 00       	nop
     28c:	01 05       	cpc	r16, r1
     28e:	03 7a       	andi	r16, 0xA3	; 163
     290:	00 80       	ld	r0, Z
     292:	00 28       	or	r0, r0
			ms--;
     294:	f0 00       	.word	0x00f0	; ????
     296:	00 00       	nop
     298:	00 00       	nop
     29a:	14 00       	.word	0x0014	; ????
     29c:	00 00       	nop
			start += 1000;
     29e:	01 05       	cpc	r16, r1
     2a0:	03 7b       	andi	r16, 0xB3	; 179
     2a2:	00 80       	ld	r0, Z
     2a4:	00 29       	or	r16, r0
     2a6:	f7 00       	.word	0x00f7	; ????
     2a8:	00 00       	nop
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     2aa:	00 00       	nop
     2ac:	14 00       	.word	0x0014	; ????
     2ae:	00 00       	nop
     2b0:	01 05       	cpc	r16, r1
     2b2:	03 7e       	andi	r16, 0xE3	; 227
     2b4:	00 80       	ld	r0, Z
			ms--;
			start += 1000;
		}
	}
}
     2b6:	00 2a       	or	r0, r16
     2b8:	fd 00       	.word	0x00fd	; ????
     2ba:	00 00       	nop
     2bc:	00 00       	nop
     2be:	14 00       	.word	0x0014	; ????
     2c0:	00 00       	nop
     2c2:	01 05       	cpc	r16, r1
     2c4:	03 50       	subi	r16, 0x03	; 3
     2c6:	00 80       	ld	r0, Z
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     2c8:	00 2b       	or	r16, r16
     2ca:	02 01       	movw	r0, r4
     2cc:	00 00       	nop
     2ce:	00 00       	nop
     2d0:	14 00       	.word	0x0014	; ????
     2d2:	00 00       	nop
     2d4:	01 05       	cpc	r16, r1
     2d6:	03 7f       	andi	r16, 0xF3	; 243
     2d8:	00 80       	ld	r0, Z
     2da:	00 2c       	mov	r0, r0
     2dc:	08 01       	movw	r0, r16
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     2de:	00 00       	nop
     2e0:	00 00       	nop
     2e2:	14 00       	.word	0x0014	; ????
     2e4:	00 00       	nop
     2e6:	01 05       	cpc	r16, r1
     2e8:	03 25       	eor	r16, r3
     2ea:	00 80       	ld	r0, Z
     2ec:	00 2d       	mov	r16, r0
	unsigned char f = timer0_fract;
     2ee:	0e 01       	movw	r0, r28
     2f0:	00 00       	nop

	m += MILLIS_INC;
	f += FRACT_INC;
     2f2:	00 00       	nop
     2f4:	14 00       	.word	0x0014	; ????
	if (f >= FRACT_MAX) {
     2f6:	00 00       	nop
     2f8:	01 05       	cpc	r16, r1
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     2fa:	03 24       	eor	r0, r3
     2fc:	00 80       	ld	r0, Z
     2fe:	00 2e       	mov	r0, r16
     300:	13 01       	movw	r2, r6
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     302:	00 00       	nop
     304:	00 00       	nop
		m += 1;
     306:	14 00       	.word	0x0014	; ????
     308:	00 00       	nop
     30a:	01 05       	cpc	r16, r1
	}

	timer0_fract = f;
     30c:	03 23       	and	r16, r19
     30e:	00 80       	ld	r0, Z
	timer0_millis = m;
     310:	00 2f       	mov	r16, r16
     312:	18 01       	movw	r2, r16
     314:	00 00       	nop
     316:	00 00       	nop
     318:	14 00       	.word	0x0014	; ????
     31a:	00 00       	nop
     31c:	01 05       	cpc	r16, r1
     31e:	03 28       	or	r0, r3
	timer0_overflow_count++;
     320:	00 80       	ld	r0, Z
     322:	00 30       	cpi	r16, 0x00	; 0
     324:	1e 01       	movw	r2, r28
     326:	00 00       	nop
     328:	00 00       	nop
     32a:	14 00       	.word	0x0014	; ????
     32c:	00 00       	nop
     32e:	01 05       	cpc	r16, r1
     330:	03 27       	eor	r16, r19
     332:	00 80       	ld	r0, Z
     334:	00 31       	cpi	r16, 0x10	; 16
     336:	23 01       	movw	r4, r6
     338:	00 00       	nop
     33a:	00 00       	nop
     33c:	14 00       	.word	0x0014	; ????
     33e:	00 00       	nop
     340:	01 05       	cpc	r16, r1
     342:	03 26       	eor	r0, r19
     344:	00 80       	ld	r0, Z
}
     346:	00 32       	cpi	r16, 0x20	; 32
     348:	28 01       	movw	r4, r16
     34a:	00 00       	nop
     34c:	00 00       	nop
     34e:	14 00       	.word	0x0014	; ????
     350:	00 00       	nop
     352:	01 05       	cpc	r16, r1
     354:	03 2b       	or	r16, r19
     356:	00 80       	ld	r0, Z
     358:	00 33       	cpi	r16, 0x30	; 48
     35a:	2e 01       	movw	r4, r28

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     35c:	00 00       	nop
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     35e:	00 00       	nop
     360:	14 00       	.word	0x0014	; ????
     362:	00 00       	nop
	sbi(TCCR0A, WGM00);
     364:	01 05       	cpc	r16, r1
     366:	03 2a       	or	r0, r19
     368:	00 80       	ld	r0, Z
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     36a:	00 34       	cpi	r16, 0x40	; 64
     36c:	33 01       	movw	r6, r6
     36e:	00 00       	nop
	sbi(TCCR0B, CS00);
     370:	00 00       	nop
     372:	14 00       	.word	0x0014	; ????
     374:	00 00       	nop

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     376:	01 05       	cpc	r16, r1
     378:	03 29       	or	r16, r3
     37a:	00 80       	ld	r0, Z
     37c:	00 35       	cpi	r16, 0x50	; 80
     37e:	38 01       	movw	r6, r16
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     380:	00 00       	nop
     382:	00 00       	nop

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     384:	14 00       	.word	0x0014	; ????
     386:	00 00       	nop
     388:	01 05       	cpc	r16, r1
     38a:	03 48       	sbci	r16, 0x83	; 131
     38c:	00 80       	ld	r0, Z
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     38e:	00 36       	cpi	r16, 0x60	; 96
     390:	3e 01       	movw	r6, r28
     392:	00 00       	nop
     394:	00 00       	nop
     396:	14 00       	.word	0x0014	; ????
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     398:	00 00       	nop
     39a:	01 05       	cpc	r16, r1
     39c:	03 47       	sbci	r16, 0x73	; 115
     39e:	00 80       	ld	r0, Z
     3a0:	00 37       	cpi	r16, 0x70	; 112

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     3a2:	44 01       	movw	r8, r8
     3a4:	00 00       	nop
     3a6:	00 00       	nop
     3a8:	14 00       	.word	0x0014	; ????
     3aa:	00 00       	nop

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     3ac:	01 05       	cpc	r16, r1
     3ae:	03 46       	sbci	r16, 0x63	; 99
     3b0:	00 80       	ld	r0, Z
     3b2:	00 38       	cpi	r16, 0x80	; 128
     3b4:	4a 01       	movw	r8, r20
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     3b6:	00 00       	nop
     3b8:	00 00       	nop
     3ba:	14 00       	.word	0x0014	; ????
     3bc:	00 00       	nop
     3be:	01 05       	cpc	r16, r1
		sbi(ADCSRA, ADPS1);
     3c0:	03 45       	sbci	r16, 0x53	; 83
     3c2:	00 80       	ld	r0, Z
     3c4:	00 39       	cpi	r16, 0x90	; 144
     3c6:	51 01       	movw	r10, r2
     3c8:	00 00       	nop
		sbi(ADCSRA, ADPS0);
     3ca:	00 00       	nop
     3cc:	14 00       	.word	0x0014	; ????
     3ce:	00 00       	nop
     3d0:	01 05       	cpc	r16, r1
     3d2:	03 44       	sbci	r16, 0x43	; 67
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     3d4:	00 80       	ld	r0, Z
     3d6:	00 3a       	cpi	r16, 0xA0	; 160
     3d8:	58 01       	movw	r10, r16
     3da:	00 00       	nop
     3dc:	00 00       	nop
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     3de:	14 00       	.word	0x0014	; ????
     3e0:	00 00       	nop
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
     3e2:	01 05       	cpc	r16, r1
     3e4:	03 6e       	ori	r16, 0xE3	; 227
     3e6:	00 80       	ld	r0, Z
	uint8_t port = digitalPinToPort(pin);
     3e8:	00 3b       	cpi	r16, 0xB0	; 176
     3ea:	5f 01       	movw	r10, r30
     3ec:	00 00       	nop
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     3ee:	00 00       	nop
     3f0:	14 00       	.word	0x0014	; ????

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     3f2:	00 00       	nop
     3f4:	01 05       	cpc	r16, r1
     3f6:	03 35       	cpi	r16, 0x53	; 83
     3f8:	00 80       	ld	r0, Z
     3fa:	00 3c       	cpi	r16, 0xC0	; 192
     3fc:	65 01       	movw	r12, r10
     3fe:	00 00       	nop
     400:	00 00       	nop
	out = portOutputRegister(port);
     402:	14 00       	.word	0x0014	; ????
     404:	00 00       	nop
     406:	01 05       	cpc	r16, r1
     408:	03 43       	sbci	r16, 0x33	; 51
     40a:	00 80       	ld	r0, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
     40c:	00 3d       	cpi	r16, 0xD0	; 208
                cli();
     40e:	6b 01       	movw	r12, r22
		*reg |= bit;
     410:	00 00       	nop
     412:	00 00       	nop
     414:	14 00       	.word	0x0014	; ????
		SREG = oldSREG;
     416:	00 00       	nop
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     418:	01 05       	cpc	r16, r1

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     41a:	03 69       	ori	r16, 0x93	; 147
	m = timer0_millis;
     41c:	00 80       	ld	r0, Z
     41e:	00 3e       	cpi	r16, 0xE0	; 224
     420:	71 01       	movw	r14, r2
     422:	00 00       	nop
     424:	00 00       	nop
     426:	14 00       	.word	0x0014	; ????
     428:	00 00       	nop
     42a:	01 05       	cpc	r16, r1
	SREG = oldSREG;
     42c:	03 3d       	cpi	r16, 0xD3	; 211
unsigned long _loopCounter = C_LOOP_COUNT;

void setup()
{
  pinMode(LED_BUILTIN, OUTPUT);
  _startTime_ms = millis();
     42e:	00 80       	ld	r0, Z
     430:	00 3f       	cpi	r16, 0xF0	; 240
     432:	77 01       	movw	r14, r14
     434:	00 00       	nop
     436:	00 00       	nop
     438:	14 00       	.word	0x0014	; ????
     43a:	00 00       	nop
     43c:	01 05       	cpc	r16, r1
     43e:	03 3c       	cpi	r16, 0xC3	; 195
     440:	00 80       	ld	r0, Z
     442:	00 40       	sbci	r16, 0x00	; 0
     444:	7c 01       	movw	r14, r24
}

void loop() 
{
  if (0 == _loopCounter--) {
     446:	00 00       	nop
     448:	00 00       	nop
     44a:	14 00       	.word	0x0014	; ????
     44c:	00 00       	nop
     44e:	01 05       	cpc	r16, r1
     450:	03 68       	ori	r16, 0x83	; 131
     452:	00 80       	ld	r0, Z
     454:	00 41       	sbci	r16, 0x10	; 16
     456:	82 01       	movw	r16, r4
     458:	00 00       	nop
     45a:	00 00       	nop
     45c:	14 00       	.word	0x0014	; ????
     45e:	00 00       	nop
     460:	01 05       	cpc	r16, r1
     462:	03 6d       	ori	r16, 0xD3	; 211
     464:	00 80       	ld	r0, Z
     466:	00 42       	sbci	r16, 0x20	; 32
     468:	89 01       	movw	r16, r18
     46a:	00 00       	nop
     46c:	00 00       	nop
     46e:	14 00       	.word	0x0014	; ????
     470:	00 00       	nop
     472:	01 05       	cpc	r16, r1
     474:	03 6c       	ori	r16, 0xC3	; 195
     476:	00 80       	ld	r0, Z
     478:	00 43       	sbci	r16, 0x30	; 48
     47a:	90 01       	movw	r18, r0
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     47c:	00 00       	nop

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     47e:	00 00       	nop
	m = timer0_millis;
     480:	14 00       	.word	0x0014	; ????
     482:	00 00       	nop
     484:	01 05       	cpc	r16, r1
     486:	03 6b       	ori	r16, 0xB3	; 179
     488:	00 80       	ld	r0, Z
     48a:	00 44       	sbci	r16, 0x40	; 64
     48c:	97 01       	movw	r18, r14
     48e:	00 00       	nop
	SREG = oldSREG;
     490:	00 00       	nop
}

void outputResults()
{
  const unsigned long endTime_ms = millis();
  float total_ms = ((float)(endTime_ms - _startTime_ms));
     492:	14 00       	.word	0x0014	; ????
     494:	00 00       	nop
     496:	01 05       	cpc	r16, r1
     498:	03 3b       	cpi	r16, 0xB3	; 179
     49a:	00 80       	ld	r0, Z
     49c:	00 45       	sbci	r16, 0x50	; 80
     49e:	9d 01       	movw	r18, r26
     4a0:	00 00       	nop
     4a2:	00 00       	nop
     4a4:	14 00       	.word	0x0014	; ????
     4a6:	00 00       	nop
     4a8:	01 05       	cpc	r16, r1
     4aa:	03 4e       	sbci	r16, 0xE3	; 227
     4ac:	00 80       	ld	r0, Z
     4ae:	00 46       	sbci	r16, 0x60	; 96
     4b0:	a2 01       	movw	r20, r4
     4b2:	00 00       	nop
     4b4:	00 00       	nop
  const int numberOfDigits = (int)log10(total_ms);
     4b6:	14 00       	.word	0x0014	; ????
     4b8:	00 00       	nop
     4ba:	01 05       	cpc	r16, r1
     4bc:	03 4d       	sbci	r16, 0xD3	; 211
     4be:	00 80       	ld	r0, Z
  total_ms /= pow(10, numberOfDigits);
     4c0:	00 47       	sbci	r16, 0x70	; 112
     4c2:	a7 01       	movw	r20, r14
     4c4:	00 00       	nop
     4c6:	00 00       	nop
     4c8:	14 00       	.word	0x0014	; ????
     4ca:	00 00       	nop
     4cc:	01 05       	cpc	r16, r1
     4ce:	03 4c       	sbci	r16, 0xC3	; 195
     4d0:	00 80       	ld	r0, Z
     4d2:	00 48       	sbci	r16, 0x80	; 128
     4d4:	ac 01       	movw	r20, r24
     4d6:	00 00       	nop
     4d8:	00 00       	nop
     4da:	14 00       	.word	0x0014	; ????
     4dc:	00 00       	nop
     4de:	01 05       	cpc	r16, r1
     4e0:	03 60       	ori	r16, 0x03	; 3
     4e2:	00 80       	ld	r0, Z
     4e4:	00 49       	sbci	r16, 0x90	; 144
     4e6:	b3 01       	movw	r22, r6
     4e8:	00 00       	nop
     4ea:	00 00       	nop
  
  for (int i = 0; i <= numberOfDigits; i++) {
     4ec:	14 00       	.word	0x0014	; ????
     4ee:	00 00       	nop
     4f0:	01 05       	cpc	r16, r1
     4f2:	03 64       	ori	r16, 0x43	; 67
     4f4:	00 80       	ld	r0, Z
     4f6:	00 4a       	sbci	r16, 0xA0	; 160
    digitalWrite(LED_BUILTIN, HIGH);
     4f8:	b7 01       	movw	r22, r14
     4fa:	00 00       	nop
     4fc:	00 00       	nop
    delay(2000);
     4fe:	14 00       	.word	0x0014	; ????
     500:	00 00       	nop
     502:	01 05       	cpc	r16, r1
     504:	03 66       	ori	r16, 0x63	; 99
     506:	00 80       	ld	r0, Z
     508:	00 4b       	sbci	r16, 0xB0	; 176
    digitalWrite(LED_BUILTIN, LOW);
     50a:	be 01       	movw	r22, r28
     50c:	00 00       	nop
     50e:	00 00       	nop
    delay(250);
     510:	14 00       	.word	0x0014	; ????
     512:	00 00       	nop
     514:	01 05       	cpc	r16, r1
     516:	03 61       	ori	r16, 0x13	; 19
     518:	00 80       	ld	r0, Z
     51a:	00 4c       	sbci	r16, 0xC0	; 192
  
    int blinkCount = (int)total_ms;
     51c:	c4 01       	movw	r24, r8
     51e:	00 00       	nop
     520:	00 00       	nop
     522:	14 00       	.word	0x0014	; ????
     524:	00 00       	nop
     526:	01 05       	cpc	r16, r1
     528:	03 5f       	subi	r16, 0xF3	; 243
    for (int b = 0; b < blinkCount; b++) {
     52a:	00 80       	ld	r0, Z
     52c:	00 4d       	sbci	r16, 0xD0	; 208
     52e:	c9 01       	movw	r24, r18
     530:	00 00       	nop
     532:	00 00       	nop
      digitalWrite(LED_BUILTIN, HIGH);
     534:	1b 00       	.word	0x001b	; ????
     536:	00 00       	nop
     538:	01 05       	cpc	r16, r1
      delay(250);
     53a:	03 5d       	subi	r16, 0xD3	; 211
     53c:	00 80       	ld	r0, Z
     53e:	00 4e       	sbci	r16, 0xE0	; 224
     540:	cc 01       	movw	r24, r24
     542:	00 00       	nop
     544:	00 00       	nop
      digitalWrite(LED_BUILTIN, LOW);
     546:	14 00       	.word	0x0014	; ????
     548:	00 00       	nop
     54a:	01 05       	cpc	r16, r1
      delay(250);
     54c:	03 57       	subi	r16, 0x73	; 115
     54e:	00 80       	ld	r0, Z
     550:	00 4f       	sbci	r16, 0xF0	; 240
     552:	d3 01       	movw	r26, r6
     554:	00 00       	nop
     556:	00 00       	nop
    delay(2000);
    digitalWrite(LED_BUILTIN, LOW);
    delay(250);
  
    int blinkCount = (int)total_ms;
    for (int b = 0; b < blinkCount; b++) {
     558:	14 00       	.word	0x0014	; ????
     55a:	00 00       	nop
     55c:	01 05       	cpc	r16, r1
      delay(250);
      digitalWrite(LED_BUILTIN, LOW);
      delay(250);
    }
  
    delay(1000);
     55e:	03 55       	subi	r16, 0x53	; 83
     560:	00 80       	ld	r0, Z
     562:	00 50       	subi	r16, 0x00	; 0
     564:	d9 01       	movw	r26, r18
     566:	00 00       	nop
     568:	00 00       	nop
  
    total_ms = (total_ms - blinkCount) * 10;
     56a:	14 00       	.word	0x0014	; ????
     56c:	00 00       	nop
     56e:	01 05       	cpc	r16, r1
     570:	03 54       	subi	r16, 0x43	; 67
     572:	00 80       	ld	r0, Z
     574:	00 51       	subi	r16, 0x10	; 16
     576:	df 01       	movw	r26, r30
     578:	00 00       	nop
     57a:	00 00       	nop
     57c:	14 00       	.word	0x0014	; ????
     57e:	00 00       	nop
     580:	01 05       	cpc	r16, r1
     582:	03 53       	subi	r16, 0x33	; 51
     584:	00 80       	ld	r0, Z
     586:	00 52       	subi	r16, 0x20	; 32
     588:	e4 01       	movw	r28, r8
     58a:	00 00       	nop
     58c:	00 00       	nop
     58e:	14 00       	.word	0x0014	; ????
     590:	00 00       	nop
  const unsigned long endTime_ms = millis();
  float total_ms = ((float)(endTime_ms - _startTime_ms));
  const int numberOfDigits = (int)log10(total_ms);
  total_ms /= pow(10, numberOfDigits);
  
  for (int i = 0; i <= numberOfDigits; i++) {
     592:	01 05       	cpc	r16, r1
     594:	03 4b       	sbci	r16, 0xB3	; 179
     596:	00 80       	ld	r0, Z
     598:	00 53       	subi	r16, 0x30	; 48
     59a:	eb 01       	movw	r28, r22
     59c:	00 00       	nop
     59e:	00 00       	nop
     5a0:	14 00       	.word	0x0014	; ????
     5a2:	00 00       	nop
     5a4:	01 05       	cpc	r16, r1
     5a6:	03 4a       	sbci	r16, 0xA3	; 163
     5a8:	00 80       	ld	r0, Z
     5aa:	00 54       	subi	r16, 0x40	; 64
     5ac:	f2 01       	movw	r30, r4
     5ae:	00 00       	nop
     5b0:	00 00       	nop
     5b2:	14 00       	.word	0x0014	; ????
     5b4:	00 00       	nop
     5b6:	01 05       	cpc	r16, r1
     5b8:	03 3e       	cpi	r16, 0xE3	; 227
     5ba:	00 80       	ld	r0, Z
     5bc:	00 55       	subi	r16, 0x50	; 80
     5be:	f9 01       	movw	r30, r18
     5c0:	00 00       	nop
     5c2:	00 00       	nop
     5c4:	1b 00       	.word	0x001b	; ????
     5c6:	00 00       	nop
     5c8:	01 05       	cpc	r16, r1
     5ca:	03 41       	sbci	r16, 0x13	; 19
     5cc:	00 80       	ld	r0, Z
     5ce:	00 56       	subi	r16, 0x60	; 96
     5d0:	fe 01       	movw	r30, r28
     5d2:	00 00       	nop
     5d4:	00 00       	nop
     5d6:	14 00       	.word	0x0014	; ????
     5d8:	00 00       	nop
     5da:	01 05       	cpc	r16, r1
     5dc:	03 40       	sbci	r16, 0x03	; 3
     5de:	00 80       	ld	r0, Z
     5e0:	00 57       	subi	r16, 0x70	; 112
     5e2:	03 02       	muls	r16, r19
     5e4:	00 00       	nop
     5e6:	00 00       	nop
     5e8:	14 00       	.word	0x0014	; ????
     5ea:	00 00       	nop
     5ec:	01 05       	cpc	r16, r1
     5ee:	03 3f       	cpi	r16, 0xF3	; 243
     5f0:	00 80       	ld	r0, Z
     5f2:	00 00       	nop
     5f4:	e8 08       	sbc	r14, r8
     5f6:	00 00       	nop
     5f8:	02 00       	.word	0x0002	; ????
     5fa:	a2 05       	cpc	r26, r2
     5fc:	00 00       	nop
     5fe:	04 01       	movw	r0, r8
     600:	19 03       	fmul	r17, r17
     602:	00 00       	nop
     604:	04 8c       	ldd	r0, Z+28	; 0x1c
     606:	04 00       	.word	0x0004	; ????
     608:	00 58       	subi	r16, 0x80	; 128
	...
     612:	00 00       	nop
     614:	00 1a       	sub	r0, r16
     616:	00 00       	nop
     618:	00 02       	muls	r16, r16
     61a:	04 04       	cpc	r0, r4
     61c:	a3 02       	muls	r26, r19
     61e:	00 00       	nop
     620:	03 30       	cpi	r16, 0x03	; 3
     622:	04 00       	.word	0x0004	; ????
     624:	00 05       	cpc	r16, r0
     626:	7e 37       	cpi	r23, 0x7E	; 126
     628:	00 00       	nop
     62a:	00 02       	muls	r16, r16
     62c:	01 08       	sbc	r0, r1
     62e:	c0 02       	muls	r28, r16
     630:	00 00       	nop
     632:	03 83       	std	Z+3, r16	; 0x03
     634:	04 00       	.word	0x0004	; ????
     636:	00 05       	cpc	r16, r0
     638:	80 49       	sbci	r24, 0x90	; 144
     63a:	00 00       	nop
     63c:	00 02       	muls	r16, r16
     63e:	02 07       	cpc	r16, r18
     640:	e5 02       	muls	r30, r21
     642:	00 00       	nop
     644:	03 99       	sbic	0x00, 3	; 0
     646:	04 00       	.word	0x0004	; ????
     648:	00 05       	cpc	r16, r0
     64a:	82 5b       	subi	r24, 0xB2	; 178
     64c:	00 00       	nop
     64e:	00 02       	muls	r16, r16
     650:	04 07       	cpc	r16, r20
     652:	e0 02       	muls	r30, r16
     654:	00 00       	nop
     656:	04 02       	muls	r16, r20
     658:	05 69       	ori	r16, 0x95	; 149
     65a:	6e 74       	andi	r22, 0x4E	; 78
     65c:	00 05       	cpc	r16, r0
     65e:	fc 03       	fmulsu	r23, r20
     660:	00 00       	nop
     662:	01 1d       	adc	r16, r1
     664:	01 57       	subi	r16, 0x71	; 113
     666:	01 00       	.word	0x0001	; ????
     668:	00 06       	cpc	r0, r16
     66a:	70 69       	ori	r23, 0x90	; 144
     66c:	6e 00       	.word	0x006e	; ????
     66e:	01 1d       	adc	r16, r1
     670:	2c 00       	.word	0x002c	; ????
     672:	00 00       	nop
     674:	07 38       	cpi	r16, 0x87	; 135
     676:	04 00       	.word	0x0004	; ????
     678:	00 01       	movw	r0, r0
     67a:	1d 2c       	mov	r1, r13
     67c:	00 00       	nop
     67e:	00 08       	sbc	r0, r0
     680:	62 69       	ori	r22, 0x92	; 146
     682:	74 00       	.word	0x0074	; ????
     684:	01 1f       	adc	r16, r17
     686:	2c 00       	.word	0x002c	; ????
     688:	00 00       	nop
     68a:	09 65       	ori	r16, 0x59	; 89
     68c:	04 00       	.word	0x0004	; ????
     68e:	00 01       	movw	r0, r0
     690:	20 2c       	mov	r2, r0
     692:	00 00       	nop
     694:	00 08       	sbc	r0, r0
     696:	72 65       	ori	r23, 0x52	; 82
     698:	67 00       	.word	0x0067	; ????
     69a:	01 21       	and	r16, r1
     69c:	57 01       	movw	r10, r14
     69e:	00 00       	nop
     6a0:	08 6f       	ori	r16, 0xF8	; 248
     6a2:	75 74       	andi	r23, 0x45	; 69
     6a4:	00 01       	movw	r0, r0
     6a6:	21 57       	subi	r18, 0x71	; 113
     6a8:	01 00       	.word	0x0001	; ????
     6aa:	00 0a       	sbc	r0, r16
     6ac:	c8 00       	.word	0x00c8	; ????
     6ae:	00 00       	nop
     6b0:	09 04       	cpc	r0, r9
     6b2:	04 00       	.word	0x0004	; ????
     6b4:	00 01       	movw	r0, r0
     6b6:	36 2c       	mov	r3, r6
     6b8:	00 00       	nop
     6ba:	00 00       	nop
     6bc:	0a d9       	rcall	.-3564   	; 0xfffff8d2 <__eeprom_end+0xff7ef8d2>
     6be:	00 00       	nop
     6c0:	00 09       	sbc	r16, r0
     6c2:	04 04       	cpc	r0, r4
     6c4:	00 00       	nop
     6c6:	01 30       	cpi	r16, 0x01	; 1
     6c8:	2c 00       	.word	0x002c	; ????
     6ca:	00 00       	nop
     6cc:	00 0a       	sbc	r0, r16
     6ce:	ea 00       	.word	0x00ea	; ????
     6d0:	00 00       	nop
     6d2:	09 04       	cpc	r0, r9
     6d4:	04 00       	.word	0x0004	; ????
     6d6:	00 01       	movw	r0, r0
     6d8:	2a 2c       	mov	r2, r10
     6da:	00 00       	nop
     6dc:	00 00       	nop
     6de:	0a 06       	cpc	r0, r26
     6e0:	01 00       	.word	0x0001	; ????
     6e2:	00 09       	sbc	r16, r0
     6e4:	31 02       	muls	r19, r17
     6e6:	00 00       	nop
     6e8:	01 27       	eor	r16, r17
     6ea:	3e 00       	.word	0x003e	; ????
     6ec:	00 00       	nop
     6ee:	09 48       	sbci	r16, 0x89	; 137
     6f0:	04 00       	.word	0x0004	; ????
     6f2:	00 01       	movw	r0, r0
     6f4:	27 3e       	cpi	r18, 0xE7	; 231
     6f6:	00 00       	nop
     6f8:	00 00       	nop
     6fa:	0a 22       	and	r0, r26
     6fc:	01 00       	.word	0x0001	; ????
     6fe:	00 09       	sbc	r16, r0
     700:	31 02       	muls	r19, r17
     702:	00 00       	nop
     704:	01 26       	eor	r0, r17
     706:	3e 00       	.word	0x003e	; ????
     708:	00 00       	nop
     70a:	09 48       	sbci	r16, 0x89	; 137
     70c:	04 00       	.word	0x0004	; ????
     70e:	00 01       	movw	r0, r0
     710:	26 3e       	cpi	r18, 0xE6	; 230
     712:	00 00       	nop
     714:	00 00       	nop
     716:	0a 3e       	cpi	r16, 0xEA	; 234
     718:	01 00       	.word	0x0001	; ????
     71a:	00 09       	sbc	r16, r0
     71c:	31 02       	muls	r19, r17
     71e:	00 00       	nop
     720:	01 20       	and	r0, r1
     722:	3e 00       	.word	0x003e	; ????
     724:	00 00       	nop
     726:	09 48       	sbci	r16, 0x89	; 137
     728:	04 00       	.word	0x0004	; ????
     72a:	00 01       	movw	r0, r0
     72c:	20 2c       	mov	r2, r0
     72e:	00 00       	nop
     730:	00 00       	nop
     732:	0b 09       	sbc	r16, r11
     734:	31 02       	muls	r19, r17
     736:	00 00       	nop
     738:	01 1f       	adc	r16, r17
     73a:	3e 00       	.word	0x003e	; ????
     73c:	00 00       	nop
     73e:	09 48       	sbci	r16, 0x89	; 137
     740:	04 00       	.word	0x0004	; ????
     742:	00 01       	movw	r0, r0
     744:	1f 2c       	mov	r1, r15
     746:	00 00       	nop
     748:	00 00       	nop
     74a:	00 0c       	add	r0, r0
     74c:	02 64       	ori	r16, 0x42	; 66
     74e:	01 00       	.word	0x0001	; ????
     750:	00 02       	muls	r16, r16
     752:	01 08       	sbc	r0, r1
     754:	30 04       	cpc	r3, r0
     756:	00 00       	nop
     758:	0d 5d       	subi	r16, 0xDD	; 221
     75a:	01 00       	.word	0x0001	; ????
     75c:	00 05       	cpc	r16, r0
     75e:	6d 02       	muls	r22, r29
     760:	00 00       	nop
     762:	01 8a       	std	Z+17, r0	; 0x11
     764:	01 2f       	mov	r16, r17
     766:	02 00       	.word	0x0002	; ????
     768:	00 06       	cpc	r0, r16
     76a:	70 69       	ori	r23, 0x90	; 144
     76c:	6e 00       	.word	0x006e	; ????
     76e:	01 8a       	std	Z+17, r0	; 0x11
     770:	2c 00       	.word	0x002c	; ????
     772:	00 00       	nop
     774:	06 76       	andi	r16, 0x66	; 102
     776:	61 6c       	ori	r22, 0xC1	; 193
     778:	00 01       	movw	r0, r0
     77a:	8a 2c       	mov	r8, r10
     77c:	00 00       	nop
     77e:	00 09       	sbc	r16, r0
     780:	ce 02       	muls	r28, r30
     782:	00 00       	nop
     784:	01 8c       	ldd	r0, Z+25	; 0x19
     786:	2c 00       	.word	0x002c	; ????
     788:	00 00       	nop
     78a:	08 62       	ori	r16, 0x28	; 40
     78c:	69 74       	andi	r22, 0x49	; 73
     78e:	00 01       	movw	r0, r0
     790:	8d 2c       	mov	r8, r13
     792:	00 00       	nop
     794:	00 09       	sbc	r16, r0
     796:	65 04       	cpc	r6, r5
     798:	00 00       	nop
     79a:	01 8e       	std	Z+25, r0	; 0x19
     79c:	2c 00       	.word	0x002c	; ????
     79e:	00 00       	nop
     7a0:	08 6f       	ori	r16, 0xF8	; 248
     7a2:	75 74       	andi	r23, 0x45	; 69
     7a4:	00 01       	movw	r0, r0
     7a6:	8f 57       	subi	r24, 0x7F	; 127
     7a8:	01 00       	.word	0x0001	; ????
     7aa:	00 09       	sbc	r16, r0
     7ac:	04 04       	cpc	r0, r4
     7ae:	00 00       	nop
     7b0:	01 99       	sbic	0x00, 1	; 0
     7b2:	2c 00       	.word	0x002c	; ????
     7b4:	00 00       	nop
     7b6:	0a de       	rcall	.-1004   	; 0x3cc <main+0x70>
     7b8:	01 00       	.word	0x0001	; ????
     7ba:	00 09       	sbc	r16, r0
     7bc:	31 02       	muls	r19, r17
     7be:	00 00       	nop
     7c0:	01 97       	sbiw	r24, 0x01	; 1
     7c2:	3e 00       	.word	0x003e	; ????
     7c4:	00 00       	nop
     7c6:	09 48       	sbci	r16, 0x89	; 137
     7c8:	04 00       	.word	0x0004	; ????
     7ca:	00 01       	movw	r0, r0
     7cc:	97 3e       	cpi	r25, 0xE7	; 231
     7ce:	00 00       	nop
     7d0:	00 00       	nop
     7d2:	0a fa       	.word	0xfa0a	; ????
     7d4:	01 00       	.word	0x0001	; ????
     7d6:	00 09       	sbc	r16, r0
     7d8:	31 02       	muls	r19, r17
     7da:	00 00       	nop
     7dc:	01 8e       	std	Z+25, r0	; 0x19
     7de:	3e 00       	.word	0x003e	; ????
     7e0:	00 00       	nop
     7e2:	09 48       	sbci	r16, 0x89	; 137
     7e4:	04 00       	.word	0x0004	; ????
     7e6:	00 01       	movw	r0, r0
     7e8:	8e 2c       	mov	r8, r14
     7ea:	00 00       	nop
     7ec:	00 00       	nop
     7ee:	0a 16       	cp	r0, r26
     7f0:	02 00       	.word	0x0002	; ????
     7f2:	00 09       	sbc	r16, r0
     7f4:	31 02       	muls	r19, r17
     7f6:	00 00       	nop
     7f8:	01 8d       	ldd	r16, Z+25	; 0x19
     7fa:	3e 00       	.word	0x003e	; ????
     7fc:	00 00       	nop
     7fe:	09 48       	sbci	r16, 0x89	; 137
     800:	04 00       	.word	0x0004	; ????
     802:	00 01       	movw	r0, r0
     804:	8d 2c       	mov	r8, r13
     806:	00 00       	nop
     808:	00 00       	nop
     80a:	0b 09       	sbc	r16, r11
     80c:	31 02       	muls	r19, r17
     80e:	00 00       	nop
     810:	01 8c       	ldd	r0, Z+25	; 0x19
     812:	3e 00       	.word	0x003e	; ????
     814:	00 00       	nop
     816:	09 48       	sbci	r16, 0x89	; 137
     818:	04 00       	.word	0x0004	; ????
     81a:	00 01       	movw	r0, r0
     81c:	8c 2c       	mov	r8, r12
     81e:	00 00       	nop
     820:	00 00       	nop
     822:	00 05       	cpc	r16, r0
     824:	3d 04       	cpc	r3, r13
     826:	00 00       	nop
     828:	01 4b       	sbci	r16, 0xB1	; 177
     82a:	01 47       	sbci	r16, 0x71	; 113
     82c:	02 00       	.word	0x0002	; ????
     82e:	00 07       	cpc	r16, r16
     830:	ce 02       	muls	r28, r30
     832:	00 00       	nop
     834:	01 4b       	sbci	r16, 0xB1	; 177
     836:	2c 00       	.word	0x002c	; ????
     838:	00 00       	nop
     83a:	00 0e       	add	r0, r16
     83c:	0c 04       	cpc	r0, r12
     83e:	00 00       	nop
     840:	01 01       	movw	r0, r2
     842:	5e 02       	muls	r21, r30
     844:	00 00       	nop
     846:	09 ce       	rjmp	.-1006   	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     848:	02 00       	.word	0x0002	; ????
     84a:	00 01       	movw	r0, r0
     84c:	4b 2c       	mov	r4, r11
     84e:	00 00       	nop
     850:	00 00       	nop
     852:	0f 69       	ori	r16, 0x9F	; 159
     854:	01 00       	.word	0x0001	; ????
     856:	00 78       	andi	r16, 0x80	; 128
     858:	01 00       	.word	0x0001	; ????
     85a:	00 0a       	sbc	r0, r16
     85c:	02 00       	.word	0x0002	; ????
     85e:	00 03       	mulsu	r16, r16
     860:	92 20       	and	r9, r2
     862:	02 01       	movw	r0, r4
     864:	59 03       	fmul	r21, r17
     866:	00 00       	nop
     868:	10 80       	ld	r1, Z
     86a:	01 00       	.word	0x0001	; ????
     86c:	00 00       	nop
     86e:	00 00       	nop
     870:	00 11       	cpse	r16, r0
     872:	8b 01       	movw	r16, r22
     874:	00 00       	nop
     876:	3a 00       	.word	0x003a	; ????
     878:	00 00       	nop
     87a:	11 96       	adiw	r26, 0x01	; 1
     87c:	01 00       	.word	0x0001	; ????
     87e:	00 84       	ldd	r0, Z+8	; 0x08
     880:	00 00       	nop
     882:	00 11       	cpse	r16, r0
     884:	a1 01       	movw	r20, r2
     886:	00 00       	nop
     888:	b0 00       	.word	0x00b0	; ????
     88a:	00 00       	nop
     88c:	11 ac       	ldd	r1, Z+57	; 0x39
     88e:	01 00       	.word	0x0001	; ????
     890:	00 c3       	rjmp	.+1536   	; 0xe92 <__data_load_end+0x1ac>
     892:	00 00       	nop
     894:	00 11       	cpse	r16, r0
     896:	b7 01       	movw	r22, r14
     898:	00 00       	nop
     89a:	db 00       	.word	0x00db	; ????
     89c:	00 00       	nop
     89e:	12 75       	andi	r17, 0x52	; 82
     8a0:	01 00       	.word	0x0001	; ????
     8a2:	00 0d       	add	r16, r0
     8a4:	13 78       	andi	r17, 0x83	; 131
     8a6:	01 00       	.word	0x0001	; ????
     8a8:	00 7e       	andi	r16, 0xE0	; 224
     8aa:	01 00       	.word	0x0001	; ????
     8ac:	00 d0       	rcall	.+0      	; 0x8ae <__fp_splitA+0x6>
     8ae:	02 00       	.word	0x0002	; ????
     8b0:	00 11       	cpse	r16, r0
     8b2:	17 02       	muls	r17, r23
     8b4:	00 00       	nop
     8b6:	ee 00       	.word	0x00ee	; ????
     8b8:	00 00       	nop
     8ba:	11 22       	and	r1, r17
     8bc:	02 00       	.word	0x0002	; ????
     8be:	00 3a       	cpi	r16, 0xA0	; 160
     8c0:	00 00       	nop
     8c2:	00 00       	nop
     8c4:	13 7e       	andi	r17, 0xE3	; 227
     8c6:	01 00       	.word	0x0001	; ????
     8c8:	00 84       	ldd	r0, Z+8	; 0x08
     8ca:	01 00       	.word	0x0001	; ????
     8cc:	00 f0       	brcs	.+0      	; 0x8ce <__fp_splitA+0x26>
     8ce:	02 00       	.word	0x0002	; ????
     8d0:	00 11       	cpse	r16, r0
     8d2:	ff 01       	movw	r30, r30
     8d4:	00 00       	nop
     8d6:	06 01       	movw	r0, r12
     8d8:	00 00       	nop
     8da:	11 0a       	sbc	r1, r17
     8dc:	02 00       	.word	0x0002	; ????
     8de:	00 84       	ldd	r0, Z+8	; 0x08
     8e0:	00 00       	nop
     8e2:	00 00       	nop
     8e4:	13 84       	ldd	r1, Z+11	; 0x0b
     8e6:	01 00       	.word	0x0001	; ????
     8e8:	00 8a       	std	Z+16, r0	; 0x10
     8ea:	01 00       	.word	0x0001	; ????
     8ec:	00 10       	cpse	r0, r0
     8ee:	03 00       	.word	0x0003	; ????
     8f0:	00 11       	cpse	r16, r0
     8f2:	e3 01       	movw	r28, r6
     8f4:	00 00       	nop
     8f6:	1e 01       	movw	r2, r28
     8f8:	00 00       	nop
     8fa:	11 ee       	ldi	r17, 0xE1	; 225
     8fc:	01 00       	.word	0x0001	; ????
     8fe:	00 b0       	in	r0, 0x00	; 0
     900:	00 00       	nop
     902:	00 00       	nop
     904:	14 2f       	mov	r17, r20
     906:	02 00       	.word	0x0002	; ????
     908:	00 94       	com	r0
     90a:	01 00       	.word	0x0001	; ????
     90c:	00 e2       	ldi	r16, 0x20	; 32
     90e:	01 00       	.word	0x0001	; ????
     910:	00 01       	movw	r0, r0
     912:	95 3c       	cpi	r25, 0xC5	; 197
     914:	03 00       	.word	0x0003	; ????
     916:	00 10       	cpse	r0, r0
     918:	3b 02       	muls	r19, r27
     91a:	00 00       	nop
     91c:	36 01       	movw	r6, r12
     91e:	00 00       	nop
     920:	15 c8       	rjmp	.-4054   	; 0xfffff94c <__eeprom_end+0xff7ef94c>
     922:	01 00       	.word	0x0001	; ????
     924:	00 cc       	rjmp	.-2048   	; 0x126 <digital_pin_to_timer_PGM>
     926:	01 00       	.word	0x0001	; ????
     928:	00 16       	cp	r0, r16
     92a:	52 02       	muls	r21, r18
     92c:	00 00       	nop
     92e:	00 00       	nop
     930:	15 e2       	ldi	r17, 0x25	; 37
     932:	01 00       	.word	0x0001	; ????
     934:	00 f0       	brcs	.+0      	; 0x936 <log+0x2c>
     936:	01 00       	.word	0x0001	; ????
     938:	00 11       	cpse	r16, r0
     93a:	c7 01       	movw	r24, r14
     93c:	00 00       	nop
     93e:	80 01       	movw	r16, r0
     940:	00 00       	nop
     942:	11 d2       	rcall	.+1058   	; 0xd66 <__data_load_end+0x80>
     944:	01 00       	.word	0x0001	; ????
     946:	00 c3       	rjmp	.+1536   	; 0xf48 <__data_load_end+0x262>
     948:	00 00       	nop
     94a:	00 00       	nop
     94c:	00 17       	cp	r16, r16
     94e:	7f 02       	muls	r23, r31
     950:	00 00       	nop
     952:	02 4f       	sbci	r16, 0xF2	; 242
     954:	5b 00       	.word	0x005b	; ????
     956:	00 00       	nop
     958:	0a 02       	muls	r16, r26
     95a:	00 00       	nop
     95c:	54 02       	muls	r21, r20
     95e:	00 00       	nop
     960:	03 92       	.word	0x9203	; ????
     962:	20 02       	muls	r18, r16
     964:	01 9d       	mul	r16, r1
     966:	03 00       	.word	0x0003	; ????
     968:	00 18       	sub	r0, r0
     96a:	6d 00       	.word	0x006d	; ????
     96c:	02 50       	subi	r16, 0x02	; 2
     96e:	5b 00       	.word	0x005b	; ????
     970:	00 00       	nop
     972:	98 01       	movw	r18, r16
     974:	00 00       	nop
     976:	19 04       	cpc	r1, r9
     978:	04 00       	.word	0x0004	; ????
     97a:	00 02       	muls	r16, r16
     97c:	51 2c       	mov	r5, r1
     97e:	00 00       	nop
     980:	00 b6       	in	r0, 0x30	; 48
     982:	01 00       	.word	0x0001	; ????
     984:	00 1a       	sub	r0, r16
     986:	74 00       	.word	0x0074	; ????
     988:	02 51       	subi	r16, 0x12	; 18
     98a:	2c 00       	.word	0x002c	; ????
     98c:	00 00       	nop
     98e:	01 62       	ori	r16, 0x21	; 33
     990:	00 1b       	sub	r16, r16
     992:	c8 04       	cpc	r12, r8
     994:	00 00       	nop
     996:	06 1c       	adc	r0, r6
     998:	01 1c       	adc	r0, r1
     99a:	ba 02       	muls	r27, r26
     99c:	00 00       	nop
     99e:	02 6a       	ori	r16, 0xA2	; 162
     9a0:	54 02       	muls	r21, r20
     9a2:	00 00       	nop
     9a4:	c8 02       	muls	r28, r24
     9a6:	00 00       	nop
     9a8:	d5 01       	movw	r26, r10
     9aa:	00 00       	nop
     9ac:	01 ed       	ldi	r16, 0xD1	; 209
     9ae:	03 00       	.word	0x0003	; ????
     9b0:	00 1d       	adc	r16, r0
     9b2:	6d 73       	andi	r22, 0x3D	; 61
     9b4:	00 02       	muls	r16, r16
     9b6:	6a 5b       	subi	r22, 0xBA	; 186
     9b8:	00 00       	nop
     9ba:	00 52       	subi	r16, 0x20	; 32
     9bc:	02 00       	.word	0x0002	; ????
     9be:	00 19       	sub	r16, r0
     9c0:	67 02       	muls	r22, r23
     9c2:	00 00       	nop
     9c4:	02 6c       	ori	r16, 0xC2	; 194
     9c6:	50 00       	.word	0x0050	; ????
     9c8:	00 00       	nop
     9ca:	86 02       	muls	r24, r22
     9cc:	00 00       	nop
     9ce:	1e 6c       	ori	r17, 0xCE	; 206
     9d0:	02 00       	.word	0x0002	; ????
     9d2:	00 59       	subi	r16, 0x90	; 144
     9d4:	03 00       	.word	0x0003	; ????
     9d6:	00 1e       	adc	r0, r16
     9d8:	7e 02       	muls	r23, r30
     9da:	00 00       	nop
     9dc:	59 03       	fmul	r21, r17
     9de:	00 00       	nop
     9e0:	00 1f       	adc	r16, r16
     9e2:	01 77       	andi	r16, 0x71	; 113
     9e4:	04 00       	.word	0x0004	; ????
     9e6:	00 02       	muls	r16, r16
     9e8:	2d c8       	rjmp	.-4006   	; 0xfffffa44 <__eeprom_end+0xff7efa44>
     9ea:	02 00       	.word	0x0002	; ????
     9ec:	00 5c       	subi	r16, 0xC0	; 192
     9ee:	03 00       	.word	0x0003	; ????
     9f0:	00 c8       	rjmp	.-4096   	; 0xfffff9f2 <__eeprom_end+0xff7ef9f2>
     9f2:	02 00       	.word	0x0002	; ????
     9f4:	00 01       	movw	r0, r0
     9f6:	21 04       	cpc	r2, r1
     9f8:	00 00       	nop
     9fa:	18 6d       	ori	r17, 0xD8	; 216
     9fc:	00 02       	muls	r16, r16
     9fe:	32 5b       	subi	r19, 0xB2	; 178
     a00:	00 00       	nop
     a02:	00 45       	sbci	r16, 0x50	; 80
     a04:	03 00       	.word	0x0003	; ????
     a06:	00 18       	sub	r0, r0
     a08:	66 00       	.word	0x0066	; ????
     a0a:	02 33       	cpi	r16, 0x32	; 50
     a0c:	37 00       	.word	0x0037	; ????
     a0e:	00 00       	nop
     a10:	b8 03       	fmulsu	r19, r16
     a12:	00 00       	nop
     a14:	00 1b       	sub	r16, r16
     a16:	3a 02       	muls	r19, r26
     a18:	00 00       	nop
     a1a:	04 06       	cpc	r0, r20
     a1c:	01 1b       	sub	r16, r17
     a1e:	d4 02       	muls	r29, r20
     a20:	00 00       	nop
     a22:	03 1c       	adc	r0, r3
     a24:	01 1b       	sub	r16, r17
     a26:	7a 02       	muls	r23, r26
     a28:	00 00       	nop
     a2a:	02 f1       	brmi	.+64     	; 0xa6c <__mulsf3_pse+0xa6>
     a2c:	01 20       	and	r0, r1
     a2e:	f5 03       	fmuls	r23, r21
     a30:	00 00       	nop
     a32:	02 41       	sbci	r16, 0x12	; 18
     a34:	5b 00       	.word	0x005b	; ????
     a36:	00 00       	nop
     a38:	01 5e       	subi	r16, 0xE1	; 225
     a3a:	04 00       	.word	0x0004	; ????
     a3c:	00 08       	sbc	r0, r0
     a3e:	6d 00       	.word	0x006d	; ????
     a40:	02 43       	sbci	r16, 0x32	; 50
     a42:	5b 00       	.word	0x005b	; ????
     a44:	00 00       	nop
     a46:	09 04       	cpc	r0, r9
     a48:	04 00       	.word	0x0004	; ????
     a4a:	00 02       	muls	r16, r16
     a4c:	44 2c       	mov	r4, r4
     a4e:	00 00       	nop
     a50:	00 00       	nop
     a52:	1b 9e       	mul	r1, r27
     a54:	02 00       	.word	0x0002	; ????
     a56:	00 04       	cpc	r0, r0
     a58:	0c 01       	movw	r0, r24
     a5a:	05 f2       	brhs	.-128    	; 0x9dc <__mulsf3_pse+0x16>
     a5c:	02 00       	.word	0x0002	; ????
     a5e:	00 04       	cpc	r0, r0
     a60:	13 01       	movw	r2, r6
     a62:	b7 04       	cpc	r11, r7
     a64:	00 00       	nop
     a66:	09 40       	sbci	r16, 0x09	; 9
     a68:	02 00       	.word	0x0002	; ????
     a6a:	00 04       	cpc	r0, r0
     a6c:	15 be       	out	0x35, r1	; 53
     a6e:	04 00       	.word	0x0004	; ????
     a70:	00 09       	sbc	r16, r0
     a72:	a2 04       	cpc	r10, r2
     a74:	00 00       	nop
     a76:	04 16       	cp	r0, r20
     a78:	25 00       	.word	0x0025	; ????
     a7a:	00 00       	nop
     a7c:	09 ab       	std	Y+49, r16	; 0x31
     a7e:	04 00       	.word	0x0004	; ????
     a80:	00 04       	cpc	r0, r0
     a82:	17 ca       	rjmp	.-3026   	; 0xfffffeb2 <__eeprom_end+0xff7efeb2>
     a84:	04 00       	.word	0x0004	; ????
     a86:	00 0b       	sbc	r16, r16
     a88:	08 69       	ori	r16, 0x98	; 152
     a8a:	00 04       	cpc	r0, r0
     a8c:	1a 62       	ori	r17, 0x2A	; 42
     a8e:	00 00       	nop
     a90:	00 0b       	sbc	r16, r16
     a92:	09 5a       	subi	r16, 0xA9	; 169
     a94:	04 00       	.word	0x0004	; ????
     a96:	00 04       	cpc	r0, r0
     a98:	20 62       	ori	r18, 0x20	; 32
     a9a:	00 00       	nop
     a9c:	00 0b       	sbc	r16, r16
     a9e:	08 62       	ori	r16, 0x28	; 40
     aa0:	00 04       	cpc	r0, r0
     aa2:	21 62       	ori	r18, 0x21	; 33
     aa4:	00 00       	nop
     aa6:	00 00       	nop
     aa8:	00 00       	nop
     aaa:	00 02       	muls	r16, r16
     aac:	04 07       	cpc	r16, r20
     aae:	e0 02       	muls	r30, r16
     ab0:	00 00       	nop
     ab2:	21 b7       	in	r18, 0x31	; 49
     ab4:	04 00       	.word	0x0004	; ????
     ab6:	00 04       	cpc	r0, r0
     ab8:	02 05       	cpc	r16, r2
     aba:	69 6e       	ori	r22, 0xE9	; 233
     abc:	74 00       	.word	0x0074	; ????
     abe:	21 c3       	rjmp	.+1602   	; 0x1102 <__data_load_end+0x41c>
     ac0:	04 00       	.word	0x0004	; ????
     ac2:	00 22       	and	r0, r16
     ac4:	01 1e       	adc	r0, r17
     ac6:	04 00       	.word	0x0004	; ????
     ac8:	00 03       	mulsu	r16, r16
     aca:	21 62       	ori	r18, 0x21	; 33
     acc:	00 00       	nop
     ace:	00 01       	movw	r0, r0
     ad0:	5c 03       	fmul	r21, r20
     ad2:	00 00       	nop
     ad4:	a4 05       	cpc	r26, r4
     ad6:	00 00       	nop
     ad8:	03 92       	.word	0x9203	; ????
     ada:	20 02       	muls	r18, r16
     adc:	01 e4       	ldi	r16, 0x41	; 65
     ade:	07 00       	.word	0x0007	; ????
     ae0:	00 23       	and	r16, r16
     ae2:	31 04       	cpc	r3, r1
     ae4:	00 00       	nop
     ae6:	5c 03       	fmul	r21, r20
     ae8:	00 00       	nop
     aea:	e2 03       	fmuls	r22, r18
     aec:	00 00       	nop
     aee:	03 23       	and	r16, r19
     af0:	14 21       	and	r17, r4
     af2:	04 00       	.word	0x0004	; ????
     af4:	00 e2       	ldi	r16, 0x20	; 32
     af6:	03 00       	.word	0x0003	; ????
     af8:	00 3e       	cpi	r16, 0xE0	; 224
     afa:	04 00       	.word	0x0004	; ????
     afc:	00 03       	mulsu	r16, r16
     afe:	2b 1b       	sub	r18, r27
     b00:	06 00       	.word	0x0006	; ????
     b02:	00 14       	cp	r0, r0
     b04:	69 00       	.word	0x0069	; ????
     b06:	00 00       	nop
     b08:	e2 03       	fmuls	r22, r18
     b0a:	00 00       	nop
     b0c:	18 04       	cpc	r1, r8
     b0e:	00 00       	nop
     b10:	04 08       	sbc	r0, r4
     b12:	ee 05       	cpc	r30, r14
     b14:	00 00       	nop
     b16:	10 75       	andi	r17, 0x50	; 80
     b18:	00 00       	nop
     b1a:	00 fd       	sbrc	r16, 0
     b1c:	03 00       	.word	0x0003	; ????
     b1e:	00 10       	cpse	r0, r0
     b20:	80 00       	.word	0x0080	; ????
     b22:	00 00       	nop
     b24:	11 04       	cpc	r1, r1
     b26:	00 00       	nop
     b28:	15 e2       	ldi	r17, 0x25	; 37
     b2a:	03 00       	.word	0x0003	; ????
     b2c:	00 18       	sub	r0, r0
     b2e:	04 00       	.word	0x0004	; ????
     b30:	00 11       	cpse	r16, r0
     b32:	8b 00       	.word	0x008b	; ????
     b34:	00 00       	nop
     b36:	25 04       	cpc	r2, r5
     b38:	00 00       	nop
     b3a:	11 96       	adiw	r26, 0x01	; 1
     b3c:	00 00       	nop
     b3e:	00 38       	cpi	r16, 0x80	; 128
     b40:	04 00       	.word	0x0004	; ????
     b42:	00 11       	cpse	r16, r0
     b44:	a1 00       	.word	0x00a1	; ????
     b46:	00 00       	nop
     b48:	4b 04       	cpc	r4, r11
     b4a:	00 00       	nop
     b4c:	16 ac       	ldd	r1, Z+62	; 0x3e
     b4e:	00 00       	nop
     b50:	00 13       	cpse	r16, r16
     b52:	e2 03       	fmuls	r22, r18
     b54:	00 00       	nop
     b56:	e8 03       	fmulsu	r22, r16
     b58:	00 00       	nop
     b5a:	7d 05       	cpc	r23, r13
     b5c:	00 00       	nop
     b5e:	11 3f       	cpi	r17, 0xF1	; 241
     b60:	01 00       	.word	0x0001	; ????
     b62:	00 63       	ori	r16, 0x30	; 48
     b64:	04 00       	.word	0x0004	; ????
     b66:	00 11       	cpse	r16, r0
     b68:	4a 01       	movw	r8, r20
     b6a:	00 00       	nop
     b6c:	7b 04       	cpc	r7, r11
     b6e:	00 00       	nop
     b70:	00 13       	cpse	r16, r16
     b72:	e8 03       	fmulsu	r22, r16
     b74:	00 00       	nop
     b76:	ee 03       	fmulsu	r22, r22
     b78:	00 00       	nop
     b7a:	9d 05       	cpc	r25, r13
     b7c:	00 00       	nop
     b7e:	11 27       	eor	r17, r17
     b80:	01 00       	.word	0x0001	; ????
     b82:	00 8e       	std	Z+24, r0	; 0x18
     b84:	04 00       	.word	0x0004	; ????
     b86:	00 11       	cpse	r16, r0
     b88:	32 01       	movw	r6, r4
     b8a:	00 00       	nop
     b8c:	38 04       	cpc	r3, r8
     b8e:	00 00       	nop
     b90:	00 13       	cpse	r16, r16
     b92:	f2 03       	fmuls	r23, r18
     b94:	00 00       	nop
     b96:	02 04       	cpc	r0, r2
     b98:	00 00       	nop
     b9a:	bd 05       	cpc	r27, r13
     b9c:	00 00       	nop
     b9e:	11 0b       	sbc	r17, r17
     ba0:	01 00       	.word	0x0001	; ????
     ba2:	00 a6       	std	Z+40, r0	; 0x28
     ba4:	04 00       	.word	0x0004	; ????
     ba6:	00 11       	cpse	r16, r0
     ba8:	16 01       	movw	r2, r12
     baa:	00 00       	nop
     bac:	4b 04       	cpc	r4, r11
     bae:	00 00       	nop
     bb0:	00 13       	cpse	r16, r16
     bb2:	02 04       	cpc	r0, r2
     bb4:	00 00       	nop
     bb6:	0c 04       	cpc	r0, r12
     bb8:	00 00       	nop
     bba:	d9 05       	cpc	r29, r9
     bbc:	00 00       	nop
     bbe:	11 ef       	ldi	r17, 0xF1	; 241
     bc0:	00 00       	nop
     bc2:	00 be       	out	0x30, r0	; 48
     bc4:	04 00       	.word	0x0004	; ????
     bc6:	00 16       	cp	r0, r16
     bc8:	fa 00       	.word	0x00fa	; ????
     bca:	00 00       	nop
     bcc:	00 15       	cp	r16, r0
     bce:	0c 04       	cpc	r0, r12
     bd0:	00 00       	nop
     bd2:	18 04       	cpc	r1, r8
     bd4:	00 00       	nop
     bd6:	11 bc       	out	0x21, r1	; 33
     bd8:	00 00       	nop
     bda:	00 d6       	rcall	.+3072   	; 0x17dc <__data_load_end+0xaf6>
     bdc:	04 00       	.word	0x0004	; ????
     bde:	00 00       	nop
     be0:	00 00       	nop
     be2:	24 39       	cpi	r18, 0x94	; 148
     be4:	04 00       	.word	0x0004	; ????
     be6:	00 18       	sub	r0, r0
     be8:	04 00       	.word	0x0004	; ????
     bea:	00 2e       	mov	r0, r16
     bec:	04 00       	.word	0x0004	; ????
     bee:	00 04       	cpc	r0, r0
     bf0:	09 15       	cp	r16, r9
     bf2:	18 04       	cpc	r1, r8
     bf4:	00 00       	nop
     bf6:	2e 04       	cpc	r2, r14
     bf8:	00 00       	nop
     bfa:	11 49       	sbci	r17, 0x91	; 145
     bfc:	04 00       	.word	0x0004	; ????
     bfe:	00 e9       	ldi	r16, 0x90	; 144
     c00:	04 00       	.word	0x0004	; ????
     c02:	00 11       	cpse	r16, r0
     c04:	52 04       	cpc	r5, r2
     c06:	00 00       	nop
     c08:	07 05       	cpc	r16, r7
     c0a:	00 00       	nop
     c0c:	00 00       	nop
     c0e:	00 25       	eor	r16, r0
     c10:	5e 04       	cpc	r5, r14
     c12:	00 00       	nop
     c14:	46 04       	cpc	r4, r6
     c16:	00 00       	nop
     c18:	00 00       	nop
     c1a:	00 00       	nop
     c1c:	03 2e       	mov	r0, r19
     c1e:	de 07       	cpc	r29, r30
     c20:	00 00       	nop
     c22:	26 66       	ori	r18, 0x66	; 102
     c24:	04 00       	.word	0x0004	; ????
     c26:	00 7c       	andi	r16, 0xC0	; 192
     c28:	04 00       	.word	0x0004	; ????
     c2a:	00 20       	and	r0, r0
     c2c:	00 00       	nop
     c2e:	00 04       	cpc	r0, r0
     c30:	0f 27       	eor	r16, r31
     c32:	20 00       	.word	0x0020	; ????
     c34:	00 00       	nop
     c36:	16 72       	andi	r17, 0x26	; 38
     c38:	04 00       	.word	0x0004	; ????
     c3a:	00 11       	cpse	r16, r0
     c3c:	7d 04       	cpc	r7, r13
     c3e:	00 00       	nop
     c40:	1a 05       	cpc	r17, r10
     c42:	00 00       	nop
     c44:	11 88       	ldd	r1, Z+17	; 0x11
     c46:	04 00       	.word	0x0004	; ????
     c48:	00 4e       	sbci	r16, 0xE0	; 224
     c4a:	05 00       	.word	0x0005	; ????
     c4c:	00 14       	cp	r0, r0
     c4e:	39 04       	cpc	r3, r9
     c50:	00 00       	nop
     c52:	7c 04       	cpc	r7, r12
     c54:	00 00       	nop
     c56:	92 04       	cpc	r9, r2
     c58:	00 00       	nop
     c5a:	04 15       	cp	r16, r4
     c5c:	89 06       	cpc	r8, r25
     c5e:	00 00       	nop
     c60:	15 7c       	andi	r17, 0xC5	; 197
     c62:	04 00       	.word	0x0004	; ????
     c64:	00 92 04 00 	sts	0x0004, r0	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
     c68:	00 11       	cpse	r16, r0
     c6a:	49 04       	cpc	r4, r9
     c6c:	00 00       	nop
     c6e:	66 05       	cpc	r22, r6
     c70:	00 00       	nop
     c72:	11 52       	subi	r17, 0x21	; 33
     c74:	04 00       	.word	0x0004	; ????
     c76:	00 84       	ldd	r0, Z+8	; 0x08
     c78:	05 00       	.word	0x0005	; ????
     c7a:	00 00       	nop
     c7c:	00 28       	or	r0, r0
     c7e:	28 00       	.word	0x0028	; ????
     c80:	00 00       	nop
     c82:	a3 07       	cpc	r26, r19
     c84:	00 00       	nop
     c86:	11 94       	neg	r1
     c88:	04 00       	.word	0x0004	; ????
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	05 00       	.word	0x0005	; ????
     c8e:	00 27       	eor	r16, r16
     c90:	40 00       	.word	0x0040	; ????
     c92:	00 00       	nop
     c94:	11 9e       	mul	r1, r17
     c96:	04 00       	.word	0x0004	; ????
     c98:	00 bb       	out	0x10, r16	; 16
     c9a:	05 00       	.word	0x0005	; ????
     c9c:	00 13       	cpse	r16, r16
     c9e:	2e 05       	cpc	r18, r14
     ca0:	00 00       	nop
     ca2:	5e 05       	cpc	r21, r14
     ca4:	00 00       	nop
     ca6:	20 07       	cpc	r18, r16
     ca8:	00 00       	nop
     caa:	11 aa       	std	Z+49, r1	; 0x31
     cac:	04 00       	.word	0x0004	; ????
     cae:	00 d3       	rcall	.+1536   	; 0x12b0 <__data_load_end+0x5ca>
     cb0:	05 00       	.word	0x0005	; ????
     cb2:	00 29       	or	r16, r0
     cb4:	3a 05       	cpc	r19, r10
     cb6:	00 00       	nop
     cb8:	5e 02       	muls	r21, r30
     cba:	00 00       	nop
     cbc:	d2 06       	cpc	r13, r18
     cbe:	00 00       	nop
     cc0:	2a 01       	movw	r4, r20
     cc2:	68 01       	movw	r12, r16
     cc4:	31 00       	.word	0x0031	; ????
     cc6:	29 46       	sbci	r18, 0x69	; 105
     cc8:	05 00       	.word	0x0005	; ????
     cca:	00 a5       	ldd	r16, Z+40	; 0x28
     ccc:	03 00       	.word	0x0003	; ????
     cce:	00 f1       	brcs	.+64     	; 0xd10 <__data_load_end+0x2a>
     cd0:	06 00       	.word	0x0006	; ????
     cd2:	00 2a       	or	r0, r16
     cd4:	0c 66       	ori	r16, 0x6C	; 108
     cd6:	93 01       	movw	r18, r6
     cd8:	67 93       	lat	Z, r22
     cda:	01 68       	ori	r16, 0x81	; 129
     cdc:	93 01       	movw	r18, r6
     cde:	69 93       	st	Y+, r22
     ce0:	01 02       	muls	r16, r17
     ce2:	08 fa       	.word	0xfa08	; ????
     ce4:	00 29       	or	r16, r0
     ce6:	4c 05       	cpc	r20, r12
     ce8:	00 00       	nop
     cea:	5e 02       	muls	r21, r30
     cec:	00 00       	nop
     cee:	04 07       	cpc	r16, r20
     cf0:	00 00       	nop
     cf2:	2a 01       	movw	r4, r20
     cf4:	68 01       	movw	r12, r16
     cf6:	30 00       	.word	0x0030	; ????
     cf8:	2b 58       	subi	r18, 0x8B	; 139
     cfa:	05 00       	.word	0x0005	; ????
     cfc:	00 a5       	ldd	r16, Z+40	; 0x28
     cfe:	03 00       	.word	0x0003	; ????
     d00:	00 2a       	or	r0, r16
     d02:	0c 66       	ori	r16, 0x6C	; 108
     d04:	93 01       	movw	r18, r6
     d06:	67 93       	lat	Z, r22
     d08:	01 68       	ori	r16, 0x81	; 129
     d0a:	93 01       	movw	r18, r6
     d0c:	69 93       	st	Y+, r22
     d0e:	01 02       	muls	r16, r17
     d10:	08 fa       	.word	0xfa08	; ????
     d12:	00 00       	nop
     d14:	29 fe       	.word	0xfe29	; ????
     d16:	04 00       	.word	0x0004	; ????
     d18:	00 5e       	subi	r16, 0xE0	; 224
     d1a:	02 00       	.word	0x0002	; ????
     d1c:	00 33       	cpi	r16, 0x30	; 48
     d1e:	07 00       	.word	0x0007	; ????
     d20:	00 2a       	or	r0, r16
     d22:	01 68       	ori	r16, 0x81	; 129
     d24:	01 31       	cpi	r16, 0x11	; 17
     d26:	00 29       	or	r16, r0
     d28:	0a 05       	cpc	r16, r10
     d2a:	00 00       	nop
     d2c:	a5 03       	fmuls	r18, r21
     d2e:	00 00       	nop
     d30:	53 07       	cpc	r21, r19
     d32:	00 00       	nop
     d34:	2a 0c       	add	r2, r10
     d36:	66 93       	lac	Z, r22
     d38:	01 67       	ori	r16, 0x71	; 113
     d3a:	93 01       	movw	r18, r6
     d3c:	68 93       	.word	0x9368	; ????
     d3e:	01 69       	ori	r16, 0x91	; 145
     d40:	93 01       	movw	r18, r6
     d42:	03 0a       	sbc	r0, r19
     d44:	d0 07       	cpc	r29, r16
     d46:	00 29       	or	r16, r0
     d48:	10 05       	cpc	r17, r0
     d4a:	00 00       	nop
     d4c:	5e 02       	muls	r21, r30
     d4e:	00 00       	nop
     d50:	66 07       	cpc	r22, r22
     d52:	00 00       	nop
     d54:	2a 01       	movw	r4, r20
     d56:	68 01       	movw	r12, r16
     d58:	30 00       	.word	0x0030	; ????
     d5a:	29 1c       	adc	r2, r9
     d5c:	05 00       	.word	0x0005	; ????
     d5e:	00 a5       	ldd	r16, Z+40	; 0x28
     d60:	03 00       	.word	0x0003	; ????
     d62:	00 85       	ldd	r16, Z+8	; 0x08
     d64:	07 00       	.word	0x0007	; ????
     d66:	00 2a       	or	r0, r16
     d68:	0c 66       	ori	r16, 0x6C	; 108
     d6a:	93 01       	movw	r18, r6
     d6c:	67 93       	lat	Z, r22
     d6e:	01 68       	ori	r16, 0x81	; 129
     d70:	93 01       	movw	r18, r6
     d72:	69 93       	st	Y+, r22
     d74:	01 02       	muls	r16, r17
     d76:	08 fa       	.word	0xfa08	; ????
     d78:	00 2b       	or	r16, r16
     d7a:	6a 05       	cpc	r22, r10
     d7c:	00 00       	nop
     d7e:	a5 03       	fmuls	r18, r21
     d80:	00 00       	nop
     d82:	2a 0c       	add	r2, r10
     d84:	66 93       	lac	Z, r22
     d86:	01 67       	ori	r16, 0x71	; 113
     d88:	93 01       	movw	r18, r6
     d8a:	68 93       	.word	0x9368	; ????
     d8c:	01 69       	ori	r16, 0x91	; 145
     d8e:	93 01       	movw	r18, r6
     d90:	03 0a       	sbc	r0, r19
     d92:	e8 03       	fmulsu	r22, r16
     d94:	00 00       	nop
     d96:	00 2c       	mov	r0, r0
     d98:	ba 04       	cpc	r11, r10
     d9a:	00 00       	nop
     d9c:	bf 07       	cpc	r27, r31
     d9e:	00 00       	nop
     da0:	2a 0c       	add	r2, r10
     da2:	66 93       	lac	Z, r22
     da4:	01 67       	ori	r16, 0x71	; 113
     da6:	93 01       	movw	r18, r6
     da8:	68 93       	.word	0x9368	; ????
     daa:	01 69       	ori	r16, 0x91	; 145
     dac:	93 01       	movw	r18, r6
     dae:	03 f5       	brvc	.+64     	; 0xdf0 <__data_load_end+0x10a>
     db0:	0c 25       	eor	r16, r12
     db2:	00 2d       	mov	r16, r0
     db4:	dc 04       	cpc	r13, r12
     db6:	00 00       	nop
     db8:	2a 0c       	add	r2, r10
     dba:	66 93       	lac	Z, r22
     dbc:	01 67       	ori	r16, 0x71	; 113
     dbe:	93 01       	movw	r18, r6
     dc0:	68 93       	.word	0x9368	; ????
     dc2:	01 69       	ori	r16, 0x91	; 145
     dc4:	93 01       	movw	r18, r6
     dc6:	07 f4       	brid	.+0      	; 0xdc8 <__data_load_end+0xe2>
     dc8:	25 04       	cpc	r2, r5
     dca:	00 00       	nop
     dcc:	20 41       	sbci	r18, 0x10	; 16
     dce:	00 00       	nop
     dd0:	00 00       	nop
     dd2:	2e a2       	std	Y+38, r2	; 0x26
     dd4:	05 00       	.word	0x0005	; ????
     dd6:	00 00       	nop
     dd8:	2f fb       	.word	0xfb2f	; ????
     dda:	07 00       	.word	0x0007	; ????
     ddc:	00 f4       	brcc	.+0      	; 0xdde <__data_load_end+0xf8>
     dde:	07 00       	.word	0x0007	; ????
     de0:	00 30       	cpi	r16, 0x00	; 0
     de2:	f4 07       	cpc	r31, r20
     de4:	00 00       	nop
     de6:	04 00       	.word	0x0004	; ????
     de8:	02 02       	muls	r16, r18
     dea:	07 51       	subi	r16, 0x17	; 23
     dec:	04 00       	.word	0x0004	; ????
     dee:	00 21       	and	r16, r0
     df0:	3e 00       	.word	0x003e	; ????
     df2:	00 00       	nop
     df4:	31 a9       	ldd	r19, Z+49	; 0x31
     df6:	02 00       	.word	0x0002	; ????
     df8:	00 07       	cpc	r16, r16
     dfa:	7e 11       	cpse	r23, r14
     dfc:	08 00       	.word	0x0008	; ????
     dfe:	00 05       	cpc	r16, r0
     e00:	03 ea       	ldi	r16, 0xA3	; 163
     e02:	00 00       	nop
     e04:	00 21       	and	r16, r0
     e06:	e4 07       	cpc	r30, r20
     e08:	00 00       	nop
     e0a:	31 ba       	out	0x11, r3	; 17
     e0c:	04 00       	.word	0x0004	; ????
     e0e:	00 04       	cpc	r0, r0
     e10:	02 5b       	subi	r16, 0xB2	; 178
     e12:	00 00       	nop
     e14:	00 05       	cpc	r16, r0
     e16:	03 04       	cpc	r0, r3
     e18:	01 80       	ldd	r0, Z+1	; 0x01
     e1a:	00 31       	cpi	r16, 0x10	; 16
     e1c:	6a 04       	cpc	r6, r10
     e1e:	00 00       	nop
     e20:	04 04       	cpc	r0, r4
     e22:	5b 00       	.word	0x005b	; ????
     e24:	00 00       	nop
     e26:	05 03       	mulsu	r16, r21
     e28:	00 01       	movw	r0, r0
     e2a:	80 00       	.word	0x0080	; ????
     e2c:	31 23       	and	r19, r17
     e2e:	04 00       	.word	0x0004	; ????
     e30:	00 02       	muls	r16, r16
     e32:	28 37       	cpi	r18, 0x78	; 120
     e34:	00 00       	nop
     e36:	00 05       	cpc	r16, r0
     e38:	03 08       	sbc	r0, r3
     e3a:	01 80       	ldd	r0, Z+1	; 0x01
     e3c:	00 31       	cpi	r16, 0x10	; 16
     e3e:	ee 03       	fmulsu	r22, r22
     e40:	00 00       	nop
     e42:	02 27       	eor	r16, r18
     e44:	61 08       	sbc	r6, r1
     e46:	00 00       	nop
     e48:	05 03       	mulsu	r16, r21
     e4a:	09 01       	movw	r0, r18
     e4c:	80 00       	.word	0x0080	; ????
     e4e:	02 04       	cpc	r0, r2
     e50:	07 e0       	ldi	r16, 0x07	; 7
     e52:	02 00       	.word	0x0002	; ????
     e54:	00 0d       	add	r16, r0
     e56:	5a 08       	sbc	r5, r10
     e58:	00 00       	nop
     e5a:	31 08       	sbc	r3, r1
     e5c:	02 00       	.word	0x0002	; ????
     e5e:	00 02       	muls	r16, r16
     e60:	26 61       	ori	r18, 0x16	; 22
     e62:	08 00       	.word	0x0008	; ????
     e64:	00 05       	cpc	r16, r0
     e66:	03 0d       	add	r16, r3
     e68:	01 80       	ldd	r0, Z+1	; 0x01
     e6a:	00 31       	cpi	r16, 0x10	; 16
     e6c:	1e 02       	muls	r17, r30
     e6e:	00 00       	nop
     e70:	07 86       	std	Z+15, r0	; 0x0f
     e72:	88 08       	sbc	r8, r8
     e74:	00 00       	nop
     e76:	05 03       	mulsu	r16, r21
     e78:	f4 00       	.word	0x00f4	; ????
     e7a:	00 00       	nop
     e7c:	21 e4       	ldi	r18, 0x41	; 65
     e7e:	07 00       	.word	0x0007	; ????
     e80:	00 2f       	mov	r16, r16
     e82:	a4 08       	sbc	r10, r4
     e84:	00 00       	nop
     e86:	9d 08       	sbc	r9, r13
     e88:	00 00       	nop
     e8a:	30 f4       	brcc	.+12     	; 0xe98 <__data_load_end+0x1b2>
     e8c:	07 00       	.word	0x0007	; ????
     e8e:	00 13       	cpse	r16, r16
     e90:	00 02       	muls	r16, r16
     e92:	01 08       	sbc	r0, r1
     e94:	30 04       	cpc	r3, r0
     e96:	00 00       	nop
     e98:	21 9d       	mul	r18, r1
     e9a:	08 00       	.word	0x0008	; ????
     e9c:	00 31       	cpi	r16, 0x10	; 16
     e9e:	86 02       	muls	r24, r22
     ea0:	00 00       	nop
     ea2:	07 96       	adiw	r24, 0x07	; 7
     ea4:	ba 08       	sbc	r11, r10
     ea6:	00 00       	nop
     ea8:	05 03       	mulsu	r16, r21
     eaa:	fe 00       	.word	0x00fe	; ????
     eac:	00 00       	nop
     eae:	21 8d       	ldd	r18, Z+25	; 0x19
     eb0:	08 00       	.word	0x0008	; ????
     eb2:	00 31       	cpi	r16, 0x10	; 16
     eb4:	4b 02       	muls	r20, r27
     eb6:	00 00       	nop
     eb8:	07 ad       	ldd	r16, Z+63	; 0x3f
     eba:	d0 08       	sbc	r13, r0
     ebc:	00 00       	nop
     ebe:	05 03       	mulsu	r16, r21
     ec0:	12 01       	movw	r2, r4
     ec2:	00 00       	nop
     ec4:	21 8d       	ldd	r18, Z+25	; 0x19
     ec6:	08 00       	.word	0x0008	; ????
     ec8:	00 31       	cpi	r16, 0x10	; 16
     eca:	00 03       	mulsu	r16, r16
     ecc:	00 00       	nop
     ece:	07 c4       	rjmp	.+2062   	; 0x16de <__data_load_end+0x9f8>
     ed0:	e6 08       	sbc	r14, r6
     ed2:	00 00       	nop
     ed4:	05 03       	mulsu	r16, r21
     ed6:	26 01       	movw	r4, r12
     ed8:	00 00       	nop
     eda:	21 8d       	ldd	r18, Z+25	; 0x19
     edc:	08 00       	.word	0x0008	; ????
     ede:	00 00       	nop
     ee0:	aa 00       	.word	0x00aa	; ????
     ee2:	00 00       	nop
     ee4:	02 00       	.word	0x0002	; ????
     ee6:	1d 08       	sbc	r1, r13
     ee8:	00 00       	nop
     eea:	04 01       	movw	r0, r8
     eec:	21 06       	cpc	r2, r17
     eee:	00 00       	nop
     ef0:	de 0c       	add	r13, r14
     ef2:	00 00       	nop
     ef4:	e2 0c       	add	r14, r2
     ef6:	00 00       	nop
     ef8:	2e 2e       	mov	r2, r30
     efa:	2f 2e       	mov	r2, r31
     efc:	2e 2f       	mov	r18, r30
     efe:	2e 2e       	mov	r2, r30
     f00:	2f 2e       	mov	r2, r31
     f02:	2e 2f       	mov	r18, r30
     f04:	67 63       	ori	r22, 0x37	; 55
     f06:	63 2f       	mov	r22, r19
     f08:	6c 69       	ori	r22, 0x9C	; 156
     f0a:	62 67       	ori	r22, 0x72	; 114
     f0c:	63 63       	ori	r22, 0x33	; 51
     f0e:	2f 63       	ori	r18, 0x3F	; 63
     f10:	6f 6e       	ori	r22, 0xEF	; 239
     f12:	66 69       	ori	r22, 0x96	; 150
     f14:	67 2f       	mov	r22, r23
     f16:	61 76       	andi	r22, 0x61	; 97
     f18:	72 2f       	mov	r23, r18
     f1a:	6c 69       	ori	r22, 0x9C	; 156
     f1c:	62 31       	cpi	r22, 0x12	; 18
     f1e:	66 75       	andi	r22, 0x56	; 86
     f20:	6e 63       	ori	r22, 0x3E	; 62
     f22:	73 2e       	mov	r7, r19
     f24:	53 00       	.word	0x0053	; ????
     f26:	2f 55       	subi	r18, 0x5F	; 95
     f28:	73 65       	ori	r23, 0x53	; 83
     f2a:	72 73       	andi	r23, 0x32	; 50
     f2c:	2f 6a       	ori	r18, 0xAF	; 175
     f2e:	65 6e       	ori	r22, 0xE5	; 229
     f30:	6b 69       	ori	r22, 0x9B	; 155
     f32:	6e 73       	andi	r22, 0x3E	; 62
     f34:	2f 6a       	ori	r18, 0xAF	; 175
     f36:	65 6e       	ori	r22, 0xE5	; 229
     f38:	6b 69       	ori	r22, 0x9B	; 155
     f3a:	6e 73       	andi	r22, 0x3E	; 62
     f3c:	2f 77       	andi	r18, 0x7F	; 127
     f3e:	6f 72       	andi	r22, 0x2F	; 47
     f40:	6b 73       	andi	r22, 0x3B	; 59
     f42:	70 61       	ori	r23, 0x10	; 16
     f44:	63 65       	ori	r22, 0x53	; 83
     f46:	2f 61       	ori	r18, 0x1F	; 31
     f48:	76 72       	andi	r23, 0x26	; 38
     f4a:	2d 67       	ori	r18, 0x7D	; 125
     f4c:	63 63       	ori	r22, 0x33	; 51
     f4e:	2d 73       	andi	r18, 0x3D	; 61
     f50:	74 61       	ori	r23, 0x14	; 20
     f52:	67 69       	ori	r22, 0x97	; 151
     f54:	6e 67       	ori	r22, 0x7E	; 126
     f56:	2f 6c       	ori	r18, 0xCF	; 207
     f58:	61 62       	ori	r22, 0x21	; 33
     f5a:	65 6c       	ori	r22, 0xC5	; 197
     f5c:	2f 6d       	ori	r18, 0xDF	; 223
     f5e:	61 63       	ori	r22, 0x31	; 49
     f60:	2d 6d       	ori	r18, 0xDD	; 221
     f62:	69 6e       	ori	r22, 0xE9	; 233
     f64:	69 2f       	mov	r22, r25
     f66:	67 63       	ori	r22, 0x37	; 55
     f68:	63 2d       	mov	r22, r3
     f6a:	62 75       	andi	r22, 0x52	; 82
     f6c:	69 6c       	ori	r22, 0xC9	; 201
     f6e:	64 2f       	mov	r22, r20
     f70:	61 76       	andi	r22, 0x61	; 97
     f72:	72 2f       	mov	r23, r18
     f74:	61 76       	andi	r22, 0x61	; 97
     f76:	72 35       	cpi	r23, 0x52	; 82
     f78:	2f 6c       	ori	r18, 0xCF	; 207
     f7a:	69 62       	ori	r22, 0x29	; 41
     f7c:	67 63       	ori	r22, 0x37	; 55
     f7e:	63 00       	.word	0x0063	; ????
     f80:	47 4e       	sbci	r20, 0xE7	; 231
     f82:	55 20       	and	r5, r5
     f84:	41 53       	subi	r20, 0x31	; 49
     f86:	20 32       	cpi	r18, 0x20	; 32
     f88:	2e 32       	cpi	r18, 0x2E	; 46
     f8a:	36 00       	.word	0x0036	; ????
     f8c:	01 80       	ldd	r0, Z+1	; 0x01
     f8e:	aa 00       	.word	0x00aa	; ????
     f90:	00 00       	nop
     f92:	02 00       	.word	0x0002	; ????
     f94:	31 08       	sbc	r3, r1
     f96:	00 00       	nop
     f98:	04 01       	movw	r0, r8
     f9a:	83 06       	cpc	r8, r19
     f9c:	00 00       	nop
     f9e:	46 01       	movw	r8, r12
     fa0:	00 00       	nop
     fa2:	5c 01       	movw	r10, r24
     fa4:	00 00       	nop
     fa6:	2e 2e       	mov	r2, r30
     fa8:	2f 2e       	mov	r2, r31
     faa:	2e 2f       	mov	r18, r30
     fac:	2e 2e       	mov	r2, r30
     fae:	2f 2e       	mov	r2, r31
     fb0:	2e 2f       	mov	r18, r30
     fb2:	67 63       	ori	r22, 0x37	; 55
     fb4:	63 2f       	mov	r22, r19
     fb6:	6c 69       	ori	r22, 0x9C	; 156
     fb8:	62 67       	ori	r22, 0x72	; 114
     fba:	63 63       	ori	r22, 0x33	; 51
     fbc:	2f 63       	ori	r18, 0x3F	; 63
     fbe:	6f 6e       	ori	r22, 0xEF	; 239
     fc0:	66 69       	ori	r22, 0x96	; 150
     fc2:	67 2f       	mov	r22, r23
     fc4:	61 76       	andi	r22, 0x61	; 97
     fc6:	72 2f       	mov	r23, r18
     fc8:	6c 69       	ori	r22, 0x9C	; 156
     fca:	62 31       	cpi	r22, 0x12	; 18
     fcc:	66 75       	andi	r22, 0x56	; 86
     fce:	6e 63       	ori	r22, 0x3E	; 62
     fd0:	73 2e       	mov	r7, r19
     fd2:	53 00       	.word	0x0053	; ????
     fd4:	2f 55       	subi	r18, 0x5F	; 95
     fd6:	73 65       	ori	r23, 0x53	; 83
     fd8:	72 73       	andi	r23, 0x32	; 50
     fda:	2f 6a       	ori	r18, 0xAF	; 175
     fdc:	65 6e       	ori	r22, 0xE5	; 229
     fde:	6b 69       	ori	r22, 0x9B	; 155
     fe0:	6e 73       	andi	r22, 0x3E	; 62
     fe2:	2f 6a       	ori	r18, 0xAF	; 175
     fe4:	65 6e       	ori	r22, 0xE5	; 229
     fe6:	6b 69       	ori	r22, 0x9B	; 155
     fe8:	6e 73       	andi	r22, 0x3E	; 62
     fea:	2f 77       	andi	r18, 0x7F	; 127
     fec:	6f 72       	andi	r22, 0x2F	; 47
     fee:	6b 73       	andi	r22, 0x3B	; 59
     ff0:	70 61       	ori	r23, 0x10	; 16
     ff2:	63 65       	ori	r22, 0x53	; 83
     ff4:	2f 61       	ori	r18, 0x1F	; 31
     ff6:	76 72       	andi	r23, 0x26	; 38
     ff8:	2d 67       	ori	r18, 0x7D	; 125
     ffa:	63 63       	ori	r22, 0x33	; 51
     ffc:	2d 73       	andi	r18, 0x3D	; 61
     ffe:	74 61       	ori	r23, 0x14	; 20
    1000:	67 69       	ori	r22, 0x97	; 151
    1002:	6e 67       	ori	r22, 0x7E	; 126
    1004:	2f 6c       	ori	r18, 0xCF	; 207
    1006:	61 62       	ori	r22, 0x21	; 33
    1008:	65 6c       	ori	r22, 0xC5	; 197
    100a:	2f 6d       	ori	r18, 0xDF	; 223
    100c:	61 63       	ori	r22, 0x31	; 49
    100e:	2d 6d       	ori	r18, 0xDD	; 221
    1010:	69 6e       	ori	r22, 0xE9	; 233
    1012:	69 2f       	mov	r22, r25
    1014:	67 63       	ori	r22, 0x37	; 55
    1016:	63 2d       	mov	r22, r3
    1018:	62 75       	andi	r22, 0x52	; 82
    101a:	69 6c       	ori	r22, 0xC9	; 201
    101c:	64 2f       	mov	r22, r20
    101e:	61 76       	andi	r22, 0x61	; 97
    1020:	72 2f       	mov	r23, r18
    1022:	61 76       	andi	r22, 0x61	; 97
    1024:	72 35       	cpi	r23, 0x52	; 82
    1026:	2f 6c       	ori	r18, 0xCF	; 207
    1028:	69 62       	ori	r22, 0x29	; 41
    102a:	67 63       	ori	r22, 0x37	; 55
    102c:	63 00       	.word	0x0063	; ????
    102e:	47 4e       	sbci	r20, 0xE7	; 231
    1030:	55 20       	and	r5, r5
    1032:	41 53       	subi	r20, 0x31	; 49
    1034:	20 32       	cpi	r18, 0x20	; 32
    1036:	2e 32       	cpi	r18, 0x2E	; 46
    1038:	36 00       	.word	0x0036	; ????
    103a:	01 80       	ldd	r0, Z+1	; 0x01
    103c:	aa 00       	.word	0x00aa	; ????
    103e:	00 00       	nop
    1040:	02 00       	.word	0x0002	; ????
    1042:	45 08       	sbc	r4, r5
    1044:	00 00       	nop
    1046:	04 01       	movw	r0, r8
    1048:	1b 07       	cpc	r17, r27
    104a:	00 00       	nop
    104c:	5c 01       	movw	r10, r24
    104e:	00 00       	nop
    1050:	6c 01       	movw	r12, r24
    1052:	00 00       	nop
    1054:	2e 2e       	mov	r2, r30
    1056:	2f 2e       	mov	r2, r31
    1058:	2e 2f       	mov	r18, r30
    105a:	2e 2e       	mov	r2, r30
    105c:	2f 2e       	mov	r2, r31
    105e:	2e 2f       	mov	r18, r30
    1060:	67 63       	ori	r22, 0x37	; 55
    1062:	63 2f       	mov	r22, r19
    1064:	6c 69       	ori	r22, 0x9C	; 156
    1066:	62 67       	ori	r22, 0x72	; 114
    1068:	63 63       	ori	r22, 0x33	; 51
    106a:	2f 63       	ori	r18, 0x3F	; 63
    106c:	6f 6e       	ori	r22, 0xEF	; 239
    106e:	66 69       	ori	r22, 0x96	; 150
    1070:	67 2f       	mov	r22, r23
    1072:	61 76       	andi	r22, 0x61	; 97
    1074:	72 2f       	mov	r23, r18
    1076:	6c 69       	ori	r22, 0x9C	; 156
    1078:	62 31       	cpi	r22, 0x12	; 18
    107a:	66 75       	andi	r22, 0x56	; 86
    107c:	6e 63       	ori	r22, 0x3E	; 62
    107e:	73 2e       	mov	r7, r19
    1080:	53 00       	.word	0x0053	; ????
    1082:	2f 55       	subi	r18, 0x5F	; 95
    1084:	73 65       	ori	r23, 0x53	; 83
    1086:	72 73       	andi	r23, 0x32	; 50
    1088:	2f 6a       	ori	r18, 0xAF	; 175
    108a:	65 6e       	ori	r22, 0xE5	; 229
    108c:	6b 69       	ori	r22, 0x9B	; 155
    108e:	6e 73       	andi	r22, 0x3E	; 62
    1090:	2f 6a       	ori	r18, 0xAF	; 175
    1092:	65 6e       	ori	r22, 0xE5	; 229
    1094:	6b 69       	ori	r22, 0x9B	; 155
    1096:	6e 73       	andi	r22, 0x3E	; 62
    1098:	2f 77       	andi	r18, 0x7F	; 127
    109a:	6f 72       	andi	r22, 0x2F	; 47
    109c:	6b 73       	andi	r22, 0x3B	; 59
    109e:	70 61       	ori	r23, 0x10	; 16
    10a0:	63 65       	ori	r22, 0x53	; 83
    10a2:	2f 61       	ori	r18, 0x1F	; 31
    10a4:	76 72       	andi	r23, 0x26	; 38
    10a6:	2d 67       	ori	r18, 0x7D	; 125
    10a8:	63 63       	ori	r22, 0x33	; 51
    10aa:	2d 73       	andi	r18, 0x3D	; 61
    10ac:	74 61       	ori	r23, 0x14	; 20
    10ae:	67 69       	ori	r22, 0x97	; 151
    10b0:	6e 67       	ori	r22, 0x7E	; 126
    10b2:	2f 6c       	ori	r18, 0xCF	; 207
    10b4:	61 62       	ori	r22, 0x21	; 33
    10b6:	65 6c       	ori	r22, 0xC5	; 197
    10b8:	2f 6d       	ori	r18, 0xDF	; 223
    10ba:	61 63       	ori	r22, 0x31	; 49
    10bc:	2d 6d       	ori	r18, 0xDD	; 221
    10be:	69 6e       	ori	r22, 0xE9	; 233
    10c0:	69 2f       	mov	r22, r25
    10c2:	67 63       	ori	r22, 0x37	; 55
    10c4:	63 2d       	mov	r22, r3
    10c6:	62 75       	andi	r22, 0x52	; 82
    10c8:	69 6c       	ori	r22, 0xC9	; 201
    10ca:	64 2f       	mov	r22, r20
    10cc:	61 76       	andi	r22, 0x61	; 97
    10ce:	72 2f       	mov	r23, r18
    10d0:	61 76       	andi	r22, 0x61	; 97
    10d2:	72 35       	cpi	r23, 0x52	; 82
    10d4:	2f 6c       	ori	r18, 0xCF	; 207
    10d6:	69 62       	ori	r22, 0x29	; 41
    10d8:	67 63       	ori	r22, 0x37	; 55
    10da:	63 00       	.word	0x0063	; ????
    10dc:	47 4e       	sbci	r20, 0xE7	; 231
    10de:	55 20       	and	r5, r5
    10e0:	41 53       	subi	r20, 0x31	; 49
    10e2:	20 32       	cpi	r18, 0x20	; 32
    10e4:	2e 32       	cpi	r18, 0x2E	; 46
    10e6:	36 00       	.word	0x0036	; ????
    10e8:	01 80       	ldd	r0, Z+1	; 0x01

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	01 11       	cpse	r16, r1
   2:	01 25       	eor	r16, r1
   4:	0e 10       	cpse	r0, r14
   6:	06 00       	.word	0x0006	; ????
   8:	00 02       	muls	r16, r16
   a:	24 00       	.word	0x0024	; ????
   c:	03 0e       	add	r0, r19
   e:	0b 0b       	sbc	r16, r27
  10:	3e 0b       	sbc	r19, r30
  12:	00 00       	nop
  14:	03 24       	eor	r0, r3
  16:	00 03       	mulsu	r16, r16
  18:	0e 0b       	sbc	r16, r30
  1a:	0b 3e       	cpi	r16, 0xEB	; 235
  1c:	0b 00       	.word	0x000b	; ????
  1e:	00 04       	cpc	r0, r0
  20:	01 01       	movw	r0, r2
  22:	49 13       	cpse	r20, r25
  24:	00 00       	nop
  26:	05 21       	and	r16, r5
  28:	00 49       	sbci	r16, 0x90	; 144
  2a:	13 2f       	mov	r17, r19
  2c:	05 00       	.word	0x0005	; ????
  2e:	00 06       	cpc	r0, r16
  30:	34 00       	.word	0x0034	; ????
  32:	03 0e       	add	r0, r19
  34:	3a 0b       	sbc	r19, r26
  36:	3b 0b       	sbc	r19, r27
  38:	49 13       	cpse	r20, r25
  3a:	3f 0c       	add	r3, r15
  3c:	02 0a       	sbc	r0, r18
  3e:	00 00       	nop
  40:	07 34       	cpi	r16, 0x47	; 71
  42:	00 03       	mulsu	r16, r16
  44:	0e 3a       	cpi	r16, 0xAE	; 174
  46:	0b 3b       	cpi	r16, 0xBB	; 187
  48:	0b 49       	sbci	r16, 0x9B	; 155
  4a:	13 3f       	cpi	r17, 0xF3	; 243
  4c:	0c 02       	muls	r16, r28
  4e:	0a 00       	.word	0x000a	; ????
  50:	00 08       	sbc	r0, r0
  52:	34 00       	.word	0x0034	; ????
  54:	03 0e       	add	r0, r19
  56:	3a 0b       	sbc	r19, r26
  58:	3b 0b       	sbc	r19, r27
  5a:	49 13       	cpse	r20, r25
  5c:	3f 0c       	add	r3, r15
  5e:	02 0a       	sbc	r0, r18
  60:	00 00       	nop
  62:	09 34       	cpi	r16, 0x49	; 73
  64:	00 03       	mulsu	r16, r16
  66:	0e 3a       	cpi	r16, 0xAE	; 174
  68:	0b 3b       	cpi	r16, 0xBB	; 187
  6a:	0b 49       	sbci	r16, 0x9B	; 155
  6c:	13 3f       	cpi	r17, 0xF3	; 243
  6e:	0c 02       	muls	r16, r28
  70:	0a 00       	.word	0x000a	; ????
  72:	00 0a       	sbc	r0, r16
  74:	34 00       	.word	0x0034	; ????
  76:	03 0e       	add	r0, r19
  78:	3a 0b       	sbc	r19, r26
  7a:	3b 0b       	sbc	r19, r27
  7c:	49 13       	cpse	r20, r25
  7e:	3f 0c       	add	r3, r15
  80:	02 0a       	sbc	r0, r18
  82:	00 00       	nop
  84:	0b 34       	cpi	r16, 0x4B	; 75
  86:	00 03       	mulsu	r16, r16
  88:	0e 3a       	cpi	r16, 0xAE	; 174
  8a:	0b 3b       	cpi	r16, 0xBB	; 187
  8c:	0b 49       	sbci	r16, 0x9B	; 155
  8e:	13 3f       	cpi	r17, 0xF3	; 243
  90:	0c 02       	muls	r16, r28
  92:	0a 00       	.word	0x000a	; ????
  94:	00 0c       	add	r0, r0
  96:	34 00       	.word	0x0034	; ????
  98:	03 0e       	add	r0, r19
  9a:	3a 0b       	sbc	r19, r26
  9c:	3b 0b       	sbc	r19, r27
  9e:	49 13       	cpse	r20, r25
  a0:	3f 0c       	add	r3, r15
  a2:	02 0a       	sbc	r0, r18
  a4:	00 00       	nop
  a6:	0d 34       	cpi	r16, 0x4D	; 77
  a8:	00 03       	mulsu	r16, r16
  aa:	0e 3a       	cpi	r16, 0xAE	; 174
  ac:	0b 3b       	cpi	r16, 0xBB	; 187
  ae:	0b 49       	sbci	r16, 0x9B	; 155
  b0:	13 3f       	cpi	r17, 0xF3	; 243
  b2:	0c 02       	muls	r16, r28
  b4:	0a 00       	.word	0x000a	; ????
  b6:	00 0e       	add	r0, r16
  b8:	34 00       	.word	0x0034	; ????
  ba:	03 0e       	add	r0, r19
  bc:	3a 0b       	sbc	r19, r26
  be:	3b 0b       	sbc	r19, r27
  c0:	49 13       	cpse	r20, r25
  c2:	3f 0c       	add	r3, r15
  c4:	02 0a       	sbc	r0, r18
  c6:	00 00       	nop
  c8:	0f 34       	cpi	r16, 0x4F	; 79
  ca:	00 03       	mulsu	r16, r16
  cc:	0e 3a       	cpi	r16, 0xAE	; 174
  ce:	0b 3b       	cpi	r16, 0xBB	; 187
  d0:	0b 49       	sbci	r16, 0x9B	; 155
  d2:	13 3f       	cpi	r17, 0xF3	; 243
  d4:	0c 02       	muls	r16, r28
  d6:	0a 00       	.word	0x000a	; ????
  d8:	00 10       	cpse	r0, r0
  da:	34 00       	.word	0x0034	; ????
  dc:	03 0e       	add	r0, r19
  de:	3a 0b       	sbc	r19, r26
  e0:	3b 0b       	sbc	r19, r27
  e2:	49 13       	cpse	r20, r25
  e4:	3f 0c       	add	r3, r15
  e6:	02 0a       	sbc	r0, r18
  e8:	00 00       	nop
  ea:	11 34       	cpi	r17, 0x41	; 65
  ec:	00 03       	mulsu	r16, r16
  ee:	0e 3a       	cpi	r16, 0xAE	; 174
  f0:	0b 3b       	cpi	r16, 0xBB	; 187
  f2:	0b 49       	sbci	r16, 0x9B	; 155
  f4:	13 3f       	cpi	r17, 0xF3	; 243
  f6:	0c 02       	muls	r16, r28
  f8:	0a 00       	.word	0x000a	; ????
  fa:	00 12       	cpse	r0, r16
  fc:	34 00       	.word	0x0034	; ????
  fe:	03 0e       	add	r0, r19
 100:	3a 0b       	sbc	r19, r26
 102:	3b 0b       	sbc	r19, r27
 104:	49 13       	cpse	r20, r25
 106:	3f 0c       	add	r3, r15
 108:	02 0a       	sbc	r0, r18
 10a:	00 00       	nop
 10c:	13 34       	cpi	r17, 0x43	; 67
 10e:	00 03       	mulsu	r16, r16
 110:	0e 3a       	cpi	r16, 0xAE	; 174
 112:	0b 3b       	cpi	r16, 0xBB	; 187
 114:	0b 49       	sbci	r16, 0x9B	; 155
 116:	13 3f       	cpi	r17, 0xF3	; 243
 118:	0c 02       	muls	r16, r28
 11a:	0a 00       	.word	0x000a	; ????
 11c:	00 14       	cp	r0, r0
 11e:	34 00       	.word	0x0034	; ????
 120:	03 0e       	add	r0, r19
 122:	3a 0b       	sbc	r19, r26
 124:	3b 0b       	sbc	r19, r27
 126:	49 13       	cpse	r20, r25
 128:	3f 0c       	add	r3, r15
 12a:	02 0a       	sbc	r0, r18
 12c:	00 00       	nop
 12e:	15 34       	cpi	r17, 0x45	; 69
 130:	00 03       	mulsu	r16, r16
 132:	0e 3a       	cpi	r16, 0xAE	; 174
 134:	0b 3b       	cpi	r16, 0xBB	; 187
 136:	0b 49       	sbci	r16, 0x9B	; 155
 138:	13 3f       	cpi	r17, 0xF3	; 243
 13a:	0c 02       	muls	r16, r28
 13c:	0a 00       	.word	0x000a	; ????
 13e:	00 16       	cp	r0, r16
 140:	34 00       	.word	0x0034	; ????
 142:	03 0e       	add	r0, r19
 144:	3a 0b       	sbc	r19, r26
 146:	3b 0b       	sbc	r19, r27
 148:	49 13       	cpse	r20, r25
 14a:	3f 0c       	add	r3, r15
 14c:	02 0a       	sbc	r0, r18
 14e:	00 00       	nop
 150:	17 34       	cpi	r17, 0x47	; 71
 152:	00 03       	mulsu	r16, r16
 154:	0e 3a       	cpi	r16, 0xAE	; 174
 156:	0b 3b       	cpi	r16, 0xBB	; 187
 158:	0b 49       	sbci	r16, 0x9B	; 155
 15a:	13 3f       	cpi	r17, 0xF3	; 243
 15c:	0c 02       	muls	r16, r28
 15e:	0a 00       	.word	0x000a	; ????
 160:	00 18       	sub	r0, r0
 162:	34 00       	.word	0x0034	; ????
 164:	03 0e       	add	r0, r19
 166:	3a 0b       	sbc	r19, r26
 168:	3b 0b       	sbc	r19, r27
 16a:	49 13       	cpse	r20, r25
 16c:	3f 0c       	add	r3, r15
 16e:	02 0a       	sbc	r0, r18
 170:	00 00       	nop
 172:	19 34       	cpi	r17, 0x49	; 73
 174:	00 03       	mulsu	r16, r16
 176:	0e 3a       	cpi	r16, 0xAE	; 174
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
 178:	0b 3b       	cpi	r16, 0xBB	; 187
 17a:	0b 49       	sbci	r16, 0x9B	; 155
 17c:	13 3f       	cpi	r17, 0xF3	; 243
	uint8_t bit = digitalPinToBitMask(pin);
 17e:	0c 02       	muls	r16, r28
 180:	0a 00       	.word	0x000a	; ????
 182:	00 1a       	sub	r0, r16
	uint8_t port = digitalPinToPort(pin);
 184:	34 00       	.word	0x0034	; ????
 186:	03 0e       	add	r0, r19
 188:	3a 0b       	sbc	r19, r26
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 18a:	3b 0b       	sbc	r19, r27
 18c:	49 13       	cpse	r20, r25
 18e:	3f 0c       	add	r3, r15

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 190:	02 0a       	sbc	r0, r18
 192:	00 00       	nop
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 194:	1b 34       	cpi	r17, 0x4B	; 75
 196:	00 03       	mulsu	r16, r16
 198:	0e 3a       	cpi	r16, 0xAE	; 174
 19a:	0b 3b       	cpi	r16, 0xBB	; 187
 19c:	0b 49       	sbci	r16, 0x9B	; 155
 19e:	13 3f       	cpi	r17, 0xF3	; 243
 1a0:	0c 02       	muls	r16, r28
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 1a2:	0a 00       	.word	0x000a	; ????
 1a4:	00 1c       	adc	r0, r0
 1a6:	34 00       	.word	0x0034	; ????
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 1a8:	03 0e       	add	r0, r19
 1aa:	3a 0b       	sbc	r19, r26
 1ac:	3b 0b       	sbc	r19, r27
 1ae:	49 13       	cpse	r20, r25
 1b0:	3f 0c       	add	r3, r15
 1b2:	02 0a       	sbc	r0, r18
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 1b4:	00 00       	nop
 1b6:	1d 34       	cpi	r17, 0x4D	; 77
 1b8:	00 03       	mulsu	r16, r16
 1ba:	0e 3a       	cpi	r16, 0xAE	; 174
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 1bc:	0b 3b       	cpi	r16, 0xBB	; 187
 1be:	0b 49       	sbci	r16, 0x9B	; 155
 1c0:	13 3f       	cpi	r17, 0xF3	; 243
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 1c2:	0c 02       	muls	r16, r28
 1c4:	0a 00       	.word	0x000a	; ????
 1c6:	00 1e       	adc	r0, r16
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 1c8:	34 00       	.word	0x0034	; ????
 1ca:	03 0e       	add	r0, r19
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 1cc:	3a 0b       	sbc	r19, r26
 1ce:	3b 0b       	sbc	r19, r27
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 1d0:	49 13       	cpse	r20, r25
 1d2:	3f 0c       	add	r3, r15
 1d4:	02 0a       	sbc	r0, r18
 1d6:	00 00       	nop
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 1d8:	1f 34       	cpi	r17, 0x4F	; 79
 1da:	00 03       	mulsu	r16, r16
 1dc:	0e 3a       	cpi	r16, 0xAE	; 174
 1de:	0b 3b       	cpi	r16, 0xBB	; 187
 1e0:	0b 49       	sbci	r16, 0x9B	; 155

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 1e2:	13 3f       	cpi	r17, 0xF3	; 243
 1e4:	0c 02       	muls	r16, r28
 1e6:	0a 00       	.word	0x000a	; ????
 1e8:	00 20       	and	r0, r0
 1ea:	34 00       	.word	0x0034	; ????
 1ec:	03 0e       	add	r0, r19
 1ee:	3a 0b       	sbc	r19, r26

	uint8_t oldSREG = SREG;
 1f0:	3b 0b       	sbc	r19, r27
	cli();
 1f2:	49 13       	cpse	r20, r25

	if (val == LOW) {
 1f4:	3f 0c       	add	r3, r15
 1f6:	02 0a       	sbc	r0, r18
		*out &= ~bit;
 1f8:	00 00       	nop
 1fa:	21 34       	cpi	r18, 0x41	; 65
 1fc:	00 03       	mulsu	r16, r16
 1fe:	0e 3a       	cpi	r16, 0xAE	; 174
	} else {
		*out |= bit;
 200:	0b 3b       	cpi	r16, 0xBB	; 187
 202:	0b 49       	sbci	r16, 0x9B	; 155
 204:	13 3f       	cpi	r17, 0xF3	; 243
	}

	SREG = oldSREG;
 206:	0c 02       	muls	r16, r28
 208:	0a 00       	.word	0x000a	; ????
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 20a:	00 22       	and	r0, r16
	
	cli();
 20c:	34 00       	.word	0x0034	; ????
	m = timer0_overflow_count;
 20e:	03 0e       	add	r0, r19
 210:	3a 0b       	sbc	r19, r26
 212:	3b 0b       	sbc	r19, r27
 214:	49 13       	cpse	r20, r25
 216:	3f 0c       	add	r3, r15
 218:	02 0a       	sbc	r0, r18
 21a:	00 00       	nop
 21c:	23 34       	cpi	r18, 0x43	; 67
#if defined(TCNT0)
	t = TCNT0;
 21e:	00 03       	mulsu	r16, r16
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 220:	0e 3a       	cpi	r16, 0xAE	; 174
 222:	0b 3b       	cpi	r16, 0xBB	; 187
 224:	0b 49       	sbci	r16, 0x9B	; 155
 226:	13 3f       	cpi	r17, 0xF3	; 243
		m++;
 228:	0c 02       	muls	r16, r28
 22a:	0a 00       	.word	0x000a	; ????
 22c:	00 24       	eor	r0, r0
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 22e:	34 00       	.word	0x0034	; ????
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 230:	03 0e       	add	r0, r19
 232:	3a 0b       	sbc	r19, r26
 234:	3b 0b       	sbc	r19, r27
 236:	49 13       	cpse	r20, r25
 238:	3f 0c       	add	r3, r15
 23a:	02 0a       	sbc	r0, r18
 23c:	00 00       	nop
 23e:	25 34       	cpi	r18, 0x45	; 69
 240:	00 03       	mulsu	r16, r16
 242:	0e 3a       	cpi	r16, 0xAE	; 174
 244:	0b 3b       	cpi	r16, 0xBB	; 187
 246:	0b 49       	sbci	r16, 0x9B	; 155
 248:	13 3f       	cpi	r17, 0xF3	; 243
 24a:	0c 02       	muls	r16, r28
 24c:	0a 00       	.word	0x000a	; ????
 24e:	00 26       	eor	r0, r16
 250:	34 00       	.word	0x0034	; ????
}
 252:	03 0e       	add	r0, r19

void delay(unsigned long ms)
{
 254:	3a 0b       	sbc	r19, r26
 256:	3b 0b       	sbc	r19, r27
 258:	49 13       	cpse	r20, r25
 25a:	3f 0c       	add	r3, r15
 25c:	02 0a       	sbc	r0, r18
 25e:	00 00       	nop
 260:	27 34       	cpi	r18, 0x47	; 71
 262:	00 03       	mulsu	r16, r16
 264:	0e 3a       	cpi	r16, 0xAE	; 174
 266:	0b 3b       	cpi	r16, 0xBB	; 187
	uint32_t start = micros();
 268:	0b 49       	sbci	r16, 0x9B	; 155
 26a:	13 3f       	cpi	r17, 0xF3	; 243
 26c:	0c 02       	muls	r16, r28
 26e:	0a 00       	.word	0x000a	; ????

	while (ms > 0) {
 270:	00 28       	or	r0, r0
 272:	34 00       	.word	0x0034	; ????
 274:	03 0e       	add	r0, r19
 276:	3a 0b       	sbc	r19, r26
 278:	3b 0b       	sbc	r19, r27
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 27a:	49 13       	cpse	r20, r25
 27c:	3f 0c       	add	r3, r15
 27e:	02 0a       	sbc	r0, r18
 280:	00 00       	nop
 282:	29 34       	cpi	r18, 0x49	; 73
 284:	00 03       	mulsu	r16, r16
 286:	0e 3a       	cpi	r16, 0xAE	; 174
 288:	0b 3b       	cpi	r16, 0xBB	; 187
 28a:	0b 49       	sbci	r16, 0x9B	; 155
 28c:	13 3f       	cpi	r17, 0xF3	; 243
 28e:	0c 02       	muls	r16, r28
 290:	0a 00       	.word	0x000a	; ????
 292:	00 2a       	or	r0, r16
			ms--;
 294:	34 00       	.word	0x0034	; ????
 296:	03 0e       	add	r0, r19
 298:	3a 0b       	sbc	r19, r26
 29a:	3b 0b       	sbc	r19, r27
 29c:	49 13       	cpse	r20, r25
			start += 1000;
 29e:	3f 0c       	add	r3, r15
 2a0:	02 0a       	sbc	r0, r18
 2a2:	00 00       	nop
 2a4:	2b 34       	cpi	r18, 0x4B	; 75
 2a6:	00 03       	mulsu	r16, r16
 2a8:	0e 3a       	cpi	r16, 0xAE	; 174
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 2aa:	0b 3b       	cpi	r16, 0xBB	; 187
 2ac:	0b 49       	sbci	r16, 0x9B	; 155
 2ae:	13 3f       	cpi	r17, 0xF3	; 243
 2b0:	0c 02       	muls	r16, r28
 2b2:	0a 00       	.word	0x000a	; ????
 2b4:	00 2c       	mov	r0, r0
			ms--;
			start += 1000;
		}
	}
}
 2b6:	34 00       	.word	0x0034	; ????
 2b8:	03 0e       	add	r0, r19
 2ba:	3a 0b       	sbc	r19, r26
 2bc:	3b 0b       	sbc	r19, r27
 2be:	49 13       	cpse	r20, r25
 2c0:	3f 0c       	add	r3, r15
 2c2:	02 0a       	sbc	r0, r18
 2c4:	00 00       	nop
 2c6:	2d 34       	cpi	r18, 0x4D	; 77
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 2c8:	00 03       	mulsu	r16, r16
 2ca:	0e 3a       	cpi	r16, 0xAE	; 174
 2cc:	0b 3b       	cpi	r16, 0xBB	; 187
 2ce:	0b 49       	sbci	r16, 0x9B	; 155
 2d0:	13 3f       	cpi	r17, 0xF3	; 243
 2d2:	0c 02       	muls	r16, r28
 2d4:	0a 00       	.word	0x000a	; ????
 2d6:	00 2e       	mov	r0, r16
 2d8:	34 00       	.word	0x0034	; ????
 2da:	03 0e       	add	r0, r19
 2dc:	3a 0b       	sbc	r19, r26
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 2de:	3b 0b       	sbc	r19, r27
 2e0:	49 13       	cpse	r20, r25
 2e2:	3f 0c       	add	r3, r15
 2e4:	02 0a       	sbc	r0, r18
 2e6:	00 00       	nop
 2e8:	2f 34       	cpi	r18, 0x4F	; 79
 2ea:	00 03       	mulsu	r16, r16
 2ec:	0e 3a       	cpi	r16, 0xAE	; 174
	unsigned char f = timer0_fract;
 2ee:	0b 3b       	cpi	r16, 0xBB	; 187
 2f0:	0b 49       	sbci	r16, 0x9B	; 155

	m += MILLIS_INC;
	f += FRACT_INC;
 2f2:	13 3f       	cpi	r17, 0xF3	; 243
 2f4:	0c 02       	muls	r16, r28
	if (f >= FRACT_MAX) {
 2f6:	0a 00       	.word	0x000a	; ????
 2f8:	00 30       	cpi	r16, 0x00	; 0
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 2fa:	34 00       	.word	0x0034	; ????
 2fc:	03 0e       	add	r0, r19
 2fe:	3a 0b       	sbc	r19, r26
 300:	3b 0b       	sbc	r19, r27
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 302:	49 13       	cpse	r20, r25
 304:	3f 0c       	add	r3, r15
		m += 1;
 306:	02 0a       	sbc	r0, r18
 308:	00 00       	nop
 30a:	31 34       	cpi	r19, 0x41	; 65
	}

	timer0_fract = f;
 30c:	00 03       	mulsu	r16, r16
 30e:	0e 3a       	cpi	r16, 0xAE	; 174
	timer0_millis = m;
 310:	0b 3b       	cpi	r16, 0xBB	; 187
 312:	0b 49       	sbci	r16, 0x9B	; 155
 314:	13 3f       	cpi	r17, 0xF3	; 243
 316:	0c 02       	muls	r16, r28
 318:	0a 00       	.word	0x000a	; ????
 31a:	00 32       	cpi	r16, 0x20	; 32
 31c:	34 00       	.word	0x0034	; ????
 31e:	03 0e       	add	r0, r19
	timer0_overflow_count++;
 320:	3a 0b       	sbc	r19, r26
 322:	3b 0b       	sbc	r19, r27
 324:	49 13       	cpse	r20, r25
 326:	3f 0c       	add	r3, r15
 328:	02 0a       	sbc	r0, r18
 32a:	00 00       	nop
 32c:	33 34       	cpi	r19, 0x43	; 67
 32e:	00 03       	mulsu	r16, r16
 330:	0e 3a       	cpi	r16, 0xAE	; 174
 332:	0b 3b       	cpi	r16, 0xBB	; 187
 334:	0b 49       	sbci	r16, 0x9B	; 155
 336:	13 3f       	cpi	r17, 0xF3	; 243
 338:	0c 02       	muls	r16, r28
 33a:	0a 00       	.word	0x000a	; ????
 33c:	00 34       	cpi	r16, 0x40	; 64
 33e:	34 00       	.word	0x0034	; ????
 340:	03 0e       	add	r0, r19
 342:	3a 0b       	sbc	r19, r26
 344:	3b 0b       	sbc	r19, r27
}
 346:	49 13       	cpse	r20, r25
 348:	3f 0c       	add	r3, r15
 34a:	02 0a       	sbc	r0, r18
 34c:	00 00       	nop
 34e:	35 34       	cpi	r19, 0x45	; 69
 350:	00 03       	mulsu	r16, r16
 352:	0e 3a       	cpi	r16, 0xAE	; 174
 354:	0b 3b       	cpi	r16, 0xBB	; 187
 356:	0b 49       	sbci	r16, 0x9B	; 155
 358:	13 3f       	cpi	r17, 0xF3	; 243
 35a:	0c 02       	muls	r16, r28

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 35c:	0a 00       	.word	0x000a	; ????
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 35e:	00 36       	cpi	r16, 0x60	; 96
 360:	34 00       	.word	0x0034	; ????
 362:	03 0e       	add	r0, r19
	sbi(TCCR0A, WGM00);
 364:	3a 0b       	sbc	r19, r26
 366:	3b 0b       	sbc	r19, r27
 368:	49 13       	cpse	r20, r25
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 36a:	3f 0c       	add	r3, r15
 36c:	02 0a       	sbc	r0, r18
 36e:	00 00       	nop
	sbi(TCCR0B, CS00);
 370:	37 34       	cpi	r19, 0x47	; 71
 372:	00 03       	mulsu	r16, r16
 374:	0e 3a       	cpi	r16, 0xAE	; 174

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 376:	0b 3b       	cpi	r16, 0xBB	; 187
 378:	0b 49       	sbci	r16, 0x9B	; 155
 37a:	13 3f       	cpi	r17, 0xF3	; 243
 37c:	0c 02       	muls	r16, r28
 37e:	0a 00       	.word	0x000a	; ????
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 380:	00 38       	cpi	r16, 0x80	; 128
 382:	34 00       	.word	0x0034	; ????

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 384:	03 0e       	add	r0, r19
 386:	3a 0b       	sbc	r19, r26
 388:	3b 0b       	sbc	r19, r27
 38a:	49 13       	cpse	r20, r25
 38c:	3f 0c       	add	r3, r15
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 38e:	02 0a       	sbc	r0, r18
 390:	00 00       	nop
 392:	39 34       	cpi	r19, 0x49	; 73
 394:	00 03       	mulsu	r16, r16
 396:	0e 3a       	cpi	r16, 0xAE	; 174
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 398:	0b 3b       	cpi	r16, 0xBB	; 187
 39a:	0b 49       	sbci	r16, 0x9B	; 155
 39c:	13 3f       	cpi	r17, 0xF3	; 243
 39e:	0c 02       	muls	r16, r28
 3a0:	0a 00       	.word	0x000a	; ????

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 3a2:	00 3a       	cpi	r16, 0xA0	; 160
 3a4:	34 00       	.word	0x0034	; ????
 3a6:	03 0e       	add	r0, r19
 3a8:	3a 0b       	sbc	r19, r26
 3aa:	3b 0b       	sbc	r19, r27

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 3ac:	49 13       	cpse	r20, r25
 3ae:	3f 0c       	add	r3, r15
 3b0:	02 0a       	sbc	r0, r18
 3b2:	00 00       	nop
 3b4:	3b 34       	cpi	r19, 0x4B	; 75
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 3b6:	00 03       	mulsu	r16, r16
 3b8:	0e 3a       	cpi	r16, 0xAE	; 174
 3ba:	0b 3b       	cpi	r16, 0xBB	; 187
 3bc:	0b 49       	sbci	r16, 0x9B	; 155
 3be:	13 3f       	cpi	r17, 0xF3	; 243
		sbi(ADCSRA, ADPS1);
 3c0:	0c 02       	muls	r16, r28
 3c2:	0a 00       	.word	0x000a	; ????
 3c4:	00 3c       	cpi	r16, 0xC0	; 192
 3c6:	34 00       	.word	0x0034	; ????
 3c8:	03 0e       	add	r0, r19
		sbi(ADCSRA, ADPS0);
 3ca:	3a 0b       	sbc	r19, r26
 3cc:	3b 0b       	sbc	r19, r27
 3ce:	49 13       	cpse	r20, r25
 3d0:	3f 0c       	add	r3, r15
 3d2:	02 0a       	sbc	r0, r18
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 3d4:	00 00       	nop
 3d6:	3d 34       	cpi	r19, 0x4D	; 77
 3d8:	00 03       	mulsu	r16, r16
 3da:	0e 3a       	cpi	r16, 0xAE	; 174
 3dc:	0b 3b       	cpi	r16, 0xBB	; 187
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 3de:	0b 49       	sbci	r16, 0x9B	; 155
 3e0:	13 3f       	cpi	r17, 0xF3	; 243
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 3e2:	0c 02       	muls	r16, r28
 3e4:	0a 00       	.word	0x000a	; ????
 3e6:	00 3e       	cpi	r16, 0xE0	; 224
	uint8_t port = digitalPinToPort(pin);
 3e8:	34 00       	.word	0x0034	; ????
 3ea:	03 0e       	add	r0, r19
 3ec:	3a 0b       	sbc	r19, r26
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 3ee:	3b 0b       	sbc	r19, r27
 3f0:	49 13       	cpse	r20, r25

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 3f2:	3f 0c       	add	r3, r15
 3f4:	02 0a       	sbc	r0, r18
 3f6:	00 00       	nop
 3f8:	3f 34       	cpi	r19, 0x4F	; 79
 3fa:	00 03       	mulsu	r16, r16
 3fc:	0e 3a       	cpi	r16, 0xAE	; 174
 3fe:	0b 3b       	cpi	r16, 0xBB	; 187
 400:	0b 49       	sbci	r16, 0x9B	; 155
	out = portOutputRegister(port);
 402:	13 3f       	cpi	r17, 0xF3	; 243
 404:	0c 02       	muls	r16, r28
 406:	0a 00       	.word	0x000a	; ????
 408:	00 40       	sbci	r16, 0x00	; 0
 40a:	34 00       	.word	0x0034	; ????
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 40c:	03 0e       	add	r0, r19
                cli();
 40e:	3a 0b       	sbc	r19, r26
		*reg |= bit;
 410:	3b 0b       	sbc	r19, r27
 412:	49 13       	cpse	r20, r25
 414:	3f 0c       	add	r3, r15
		SREG = oldSREG;
 416:	02 0a       	sbc	r0, r18
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 418:	00 00       	nop

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
 41a:	41 34       	cpi	r20, 0x41	; 65
	m = timer0_millis;
 41c:	00 03       	mulsu	r16, r16
 41e:	0e 3a       	cpi	r16, 0xAE	; 174
 420:	0b 3b       	cpi	r16, 0xBB	; 187
 422:	0b 49       	sbci	r16, 0x9B	; 155
 424:	13 3f       	cpi	r17, 0xF3	; 243
 426:	0c 02       	muls	r16, r28
 428:	0a 00       	.word	0x000a	; ????
 42a:	00 42       	sbci	r16, 0x20	; 32
	SREG = oldSREG;
 42c:	34 00       	.word	0x0034	; ????
unsigned long _loopCounter = C_LOOP_COUNT;

void setup()
{
  pinMode(LED_BUILTIN, OUTPUT);
  _startTime_ms = millis();
 42e:	03 0e       	add	r0, r19
 430:	3a 0b       	sbc	r19, r26
 432:	3b 0b       	sbc	r19, r27
 434:	49 13       	cpse	r20, r25
 436:	3f 0c       	add	r3, r15
 438:	02 0a       	sbc	r0, r18
 43a:	00 00       	nop
 43c:	43 34       	cpi	r20, 0x43	; 67
 43e:	00 03       	mulsu	r16, r16
 440:	0e 3a       	cpi	r16, 0xAE	; 174
 442:	0b 3b       	cpi	r16, 0xBB	; 187
 444:	0b 49       	sbci	r16, 0x9B	; 155
}

void loop() 
{
  if (0 == _loopCounter--) {
 446:	13 3f       	cpi	r17, 0xF3	; 243
 448:	0c 02       	muls	r16, r28
 44a:	0a 00       	.word	0x000a	; ????
 44c:	00 44       	sbci	r16, 0x40	; 64
 44e:	34 00       	.word	0x0034	; ????
 450:	03 0e       	add	r0, r19
 452:	3a 0b       	sbc	r19, r26
 454:	3b 0b       	sbc	r19, r27
 456:	49 13       	cpse	r20, r25
 458:	3f 0c       	add	r3, r15
 45a:	02 0a       	sbc	r0, r18
 45c:	00 00       	nop
 45e:	45 34       	cpi	r20, 0x45	; 69
 460:	00 03       	mulsu	r16, r16
 462:	0e 3a       	cpi	r16, 0xAE	; 174
 464:	0b 3b       	cpi	r16, 0xBB	; 187
 466:	0b 49       	sbci	r16, 0x9B	; 155
 468:	13 3f       	cpi	r17, 0xF3	; 243
 46a:	0c 02       	muls	r16, r28
 46c:	0a 00       	.word	0x000a	; ????
 46e:	00 46       	sbci	r16, 0x60	; 96
 470:	34 00       	.word	0x0034	; ????
 472:	03 0e       	add	r0, r19
 474:	3a 0b       	sbc	r19, r26
 476:	3b 0b       	sbc	r19, r27
 478:	49 13       	cpse	r20, r25
 47a:	3f 0c       	add	r3, r15
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 47c:	02 0a       	sbc	r0, r18

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
 47e:	00 00       	nop
	m = timer0_millis;
 480:	47 34       	cpi	r20, 0x47	; 71
 482:	00 03       	mulsu	r16, r16
 484:	0e 3a       	cpi	r16, 0xAE	; 174
 486:	0b 3b       	cpi	r16, 0xBB	; 187
 488:	0b 49       	sbci	r16, 0x9B	; 155
 48a:	13 3f       	cpi	r17, 0xF3	; 243
 48c:	0c 02       	muls	r16, r28
 48e:	0a 00       	.word	0x000a	; ????
	SREG = oldSREG;
 490:	00 48       	sbci	r16, 0x80	; 128
}

void outputResults()
{
  const unsigned long endTime_ms = millis();
  float total_ms = ((float)(endTime_ms - _startTime_ms));
 492:	34 00       	.word	0x0034	; ????
 494:	03 0e       	add	r0, r19
 496:	3a 0b       	sbc	r19, r26
 498:	3b 0b       	sbc	r19, r27
 49a:	49 13       	cpse	r20, r25
 49c:	3f 0c       	add	r3, r15
 49e:	02 0a       	sbc	r0, r18
 4a0:	00 00       	nop
 4a2:	49 34       	cpi	r20, 0x49	; 73
 4a4:	00 03       	mulsu	r16, r16
 4a6:	0e 3a       	cpi	r16, 0xAE	; 174
 4a8:	0b 3b       	cpi	r16, 0xBB	; 187
 4aa:	0b 49       	sbci	r16, 0x9B	; 155
 4ac:	13 3f       	cpi	r17, 0xF3	; 243
 4ae:	0c 02       	muls	r16, r28
 4b0:	0a 00       	.word	0x000a	; ????
 4b2:	00 4a       	sbci	r16, 0xA0	; 160
 4b4:	34 00       	.word	0x0034	; ????
  const int numberOfDigits = (int)log10(total_ms);
 4b6:	03 0e       	add	r0, r19
 4b8:	3a 0b       	sbc	r19, r26
 4ba:	3b 0b       	sbc	r19, r27
 4bc:	49 13       	cpse	r20, r25
 4be:	3f 0c       	add	r3, r15
  total_ms /= pow(10, numberOfDigits);
 4c0:	02 0a       	sbc	r0, r18
 4c2:	00 00       	nop
 4c4:	4b 34       	cpi	r20, 0x4B	; 75
 4c6:	00 03       	mulsu	r16, r16
 4c8:	0e 3a       	cpi	r16, 0xAE	; 174
 4ca:	0b 3b       	cpi	r16, 0xBB	; 187
 4cc:	0b 49       	sbci	r16, 0x9B	; 155
 4ce:	13 3f       	cpi	r17, 0xF3	; 243
 4d0:	0c 02       	muls	r16, r28
 4d2:	0a 00       	.word	0x000a	; ????
 4d4:	00 4c       	sbci	r16, 0xC0	; 192
 4d6:	34 00       	.word	0x0034	; ????
 4d8:	03 0e       	add	r0, r19
 4da:	3a 0b       	sbc	r19, r26
 4dc:	3b 0b       	sbc	r19, r27
 4de:	49 13       	cpse	r20, r25
 4e0:	3f 0c       	add	r3, r15
 4e2:	02 0a       	sbc	r0, r18
 4e4:	00 00       	nop
 4e6:	4d 34       	cpi	r20, 0x4D	; 77
 4e8:	00 03       	mulsu	r16, r16
 4ea:	0e 3a       	cpi	r16, 0xAE	; 174
  
  for (int i = 0; i <= numberOfDigits; i++) {
 4ec:	0b 3b       	cpi	r16, 0xBB	; 187
 4ee:	0b 49       	sbci	r16, 0x9B	; 155
 4f0:	13 3f       	cpi	r17, 0xF3	; 243
 4f2:	0c 02       	muls	r16, r28
 4f4:	0a 00       	.word	0x000a	; ????
 4f6:	00 4e       	sbci	r16, 0xE0	; 224
    digitalWrite(LED_BUILTIN, HIGH);
 4f8:	34 00       	.word	0x0034	; ????
 4fa:	03 0e       	add	r0, r19
 4fc:	3a 0b       	sbc	r19, r26
    delay(2000);
 4fe:	3b 0b       	sbc	r19, r27
 500:	49 13       	cpse	r20, r25
 502:	3f 0c       	add	r3, r15
 504:	02 0a       	sbc	r0, r18
 506:	00 00       	nop
 508:	4f 34       	cpi	r20, 0x4F	; 79
    digitalWrite(LED_BUILTIN, LOW);
 50a:	00 03       	mulsu	r16, r16
 50c:	0e 3a       	cpi	r16, 0xAE	; 174
 50e:	0b 3b       	cpi	r16, 0xBB	; 187
    delay(250);
 510:	0b 49       	sbci	r16, 0x9B	; 155
 512:	13 3f       	cpi	r17, 0xF3	; 243
 514:	0c 02       	muls	r16, r28
 516:	0a 00       	.word	0x000a	; ????
 518:	00 50       	subi	r16, 0x00	; 0
 51a:	34 00       	.word	0x0034	; ????
  
    int blinkCount = (int)total_ms;
 51c:	03 0e       	add	r0, r19
 51e:	3a 0b       	sbc	r19, r26
 520:	3b 0b       	sbc	r19, r27
 522:	49 13       	cpse	r20, r25
 524:	3f 0c       	add	r3, r15
 526:	02 0a       	sbc	r0, r18
 528:	00 00       	nop
    for (int b = 0; b < blinkCount; b++) {
 52a:	51 34       	cpi	r21, 0x41	; 65
 52c:	00 03       	mulsu	r16, r16
 52e:	0e 3a       	cpi	r16, 0xAE	; 174
 530:	0b 3b       	cpi	r16, 0xBB	; 187
 532:	0b 49       	sbci	r16, 0x9B	; 155
      digitalWrite(LED_BUILTIN, HIGH);
 534:	13 3f       	cpi	r17, 0xF3	; 243
 536:	0c 02       	muls	r16, r28
 538:	0a 00       	.word	0x000a	; ????
      delay(250);
 53a:	00 52       	subi	r16, 0x20	; 32
 53c:	34 00       	.word	0x0034	; ????
 53e:	03 0e       	add	r0, r19
 540:	3a 0b       	sbc	r19, r26
 542:	3b 0b       	sbc	r19, r27
 544:	49 13       	cpse	r20, r25
      digitalWrite(LED_BUILTIN, LOW);
 546:	3f 0c       	add	r3, r15
 548:	02 0a       	sbc	r0, r18
 54a:	00 00       	nop
      delay(250);
 54c:	53 34       	cpi	r21, 0x43	; 67
 54e:	00 03       	mulsu	r16, r16
 550:	0e 3a       	cpi	r16, 0xAE	; 174
 552:	0b 3b       	cpi	r16, 0xBB	; 187
 554:	0b 49       	sbci	r16, 0x9B	; 155
 556:	13 3f       	cpi	r17, 0xF3	; 243
    delay(2000);
    digitalWrite(LED_BUILTIN, LOW);
    delay(250);
  
    int blinkCount = (int)total_ms;
    for (int b = 0; b < blinkCount; b++) {
 558:	0c 02       	muls	r16, r28
 55a:	0a 00       	.word	0x000a	; ????
 55c:	00 54       	subi	r16, 0x40	; 64
      delay(250);
      digitalWrite(LED_BUILTIN, LOW);
      delay(250);
    }
  
    delay(1000);
 55e:	34 00       	.word	0x0034	; ????
 560:	03 0e       	add	r0, r19
 562:	3a 0b       	sbc	r19, r26
 564:	3b 0b       	sbc	r19, r27
 566:	49 13       	cpse	r20, r25
 568:	3f 0c       	add	r3, r15
  
    total_ms = (total_ms - blinkCount) * 10;
 56a:	02 0a       	sbc	r0, r18
 56c:	00 00       	nop
 56e:	55 34       	cpi	r21, 0x45	; 69
 570:	00 03       	mulsu	r16, r16
 572:	0e 3a       	cpi	r16, 0xAE	; 174
 574:	0b 3b       	cpi	r16, 0xBB	; 187
 576:	0b 49       	sbci	r16, 0x9B	; 155
 578:	13 3f       	cpi	r17, 0xF3	; 243
 57a:	0c 02       	muls	r16, r28
 57c:	0a 00       	.word	0x000a	; ????
 57e:	00 56       	subi	r16, 0x60	; 96
 580:	34 00       	.word	0x0034	; ????
 582:	03 0e       	add	r0, r19
 584:	3a 0b       	sbc	r19, r26
 586:	3b 0b       	sbc	r19, r27
 588:	49 13       	cpse	r20, r25
 58a:	3f 0c       	add	r3, r15
 58c:	02 0a       	sbc	r0, r18
 58e:	00 00       	nop
 590:	57 34       	cpi	r21, 0x47	; 71
  const unsigned long endTime_ms = millis();
  float total_ms = ((float)(endTime_ms - _startTime_ms));
  const int numberOfDigits = (int)log10(total_ms);
  total_ms /= pow(10, numberOfDigits);
  
  for (int i = 0; i <= numberOfDigits; i++) {
 592:	00 03       	mulsu	r16, r16
 594:	0e 3a       	cpi	r16, 0xAE	; 174
 596:	0b 3b       	cpi	r16, 0xBB	; 187
 598:	0b 49       	sbci	r16, 0x9B	; 155
 59a:	13 3f       	cpi	r17, 0xF3	; 243
 59c:	0c 02       	muls	r16, r28
 59e:	0a 00       	.word	0x000a	; ????
 5a0:	00 00       	nop
 5a2:	01 11       	cpse	r16, r1
 5a4:	01 25       	eor	r16, r1
 5a6:	0e 13       	cpse	r16, r30
 5a8:	0b 03       	fmul	r16, r19
 5aa:	0e 55       	subi	r16, 0x5E	; 94
 5ac:	06 11       	cpse	r16, r6
 5ae:	01 52       	subi	r16, 0x21	; 33
 5b0:	01 10       	cpse	r0, r1
 5b2:	06 00       	.word	0x0006	; ????
 5b4:	00 02       	muls	r16, r16
 5b6:	24 00       	.word	0x0024	; ????
 5b8:	0b 0b       	sbc	r16, r27
 5ba:	3e 0b       	sbc	r19, r30
 5bc:	03 0e       	add	r0, r19
 5be:	00 00       	nop
 5c0:	03 16       	cp	r0, r19
 5c2:	00 03       	mulsu	r16, r16
 5c4:	0e 3a       	cpi	r16, 0xAE	; 174
 5c6:	0b 3b       	cpi	r16, 0xBB	; 187
 5c8:	0b 49       	sbci	r16, 0x9B	; 155
 5ca:	13 00       	.word	0x0013	; ????
 5cc:	00 04       	cpc	r0, r0
 5ce:	24 00       	.word	0x0024	; ????
 5d0:	0b 0b       	sbc	r16, r27
 5d2:	3e 0b       	sbc	r19, r30
 5d4:	03 08       	sbc	r0, r3
 5d6:	00 00       	nop
 5d8:	05 2e       	mov	r0, r21
 5da:	01 03       	mulsu	r16, r17
 5dc:	0e 3a       	cpi	r16, 0xAE	; 174
 5de:	0b 3b       	cpi	r16, 0xBB	; 187
 5e0:	0b 20       	and	r0, r11
 5e2:	0b 01       	movw	r0, r22
 5e4:	13 00       	.word	0x0013	; ????
 5e6:	00 06       	cpc	r0, r16
 5e8:	05 00       	.word	0x0005	; ????
 5ea:	03 08       	sbc	r0, r3
 5ec:	3a 0b       	sbc	r19, r26
 5ee:	3b 0b       	sbc	r19, r27
 5f0:	49 13       	cpse	r20, r25
 5f2:	00 00       	nop
 5f4:	07 05       	cpc	r16, r7
 5f6:	00 03       	mulsu	r16, r16
 5f8:	0e 3a       	cpi	r16, 0xAE	; 174
 5fa:	0b 3b       	cpi	r16, 0xBB	; 187
 5fc:	0b 49       	sbci	r16, 0x9B	; 155
 5fe:	13 00       	.word	0x0013	; ????
 600:	00 08       	sbc	r0, r0
 602:	34 00       	.word	0x0034	; ????
 604:	03 08       	sbc	r0, r3
 606:	3a 0b       	sbc	r19, r26
 608:	3b 0b       	sbc	r19, r27
 60a:	49 13       	cpse	r20, r25
 60c:	00 00       	nop
 60e:	09 34       	cpi	r16, 0x49	; 73
 610:	00 03       	mulsu	r16, r16
 612:	0e 3a       	cpi	r16, 0xAE	; 174
 614:	0b 3b       	cpi	r16, 0xBB	; 187
 616:	0b 49       	sbci	r16, 0x9B	; 155
 618:	13 00       	.word	0x0013	; ????
 61a:	00 0a       	sbc	r0, r16
 61c:	0b 01       	movw	r0, r22
 61e:	01 13       	cpse	r16, r17
 620:	00 00       	nop
 622:	0b 0b       	sbc	r16, r27
 624:	01 00       	.word	0x0001	; ????
 626:	00 0c       	add	r0, r0
 628:	0f 00       	.word	0x000f	; ????
 62a:	0b 0b       	sbc	r16, r27
 62c:	49 13       	cpse	r20, r25
 62e:	00 00       	nop
 630:	0d 35       	cpi	r16, 0x5D	; 93
 632:	00 49       	sbci	r16, 0x90	; 144
 634:	13 00       	.word	0x0013	; ????
 636:	00 0e       	add	r0, r16
 638:	2e 01       	movw	r4, r28
 63a:	03 0e       	add	r0, r19
 63c:	34 0c       	add	r3, r4
 63e:	20 0b       	sbc	r18, r16
 640:	01 13       	cpse	r16, r17
 642:	00 00       	nop
 644:	0f 2e       	mov	r0, r31
 646:	01 31       	cpi	r16, 0x11	; 17
 648:	13 11       	cpse	r17, r3
 64a:	01 12       	cpse	r0, r17
 64c:	01 40       	sbci	r16, 0x01	; 1
 64e:	0a 97       	sbiw	r24, 0x0a	; 10
 650:	42 0c       	add	r4, r2
 652:	01 13       	cpse	r16, r17
 654:	00 00       	nop
 656:	10 05       	cpc	r17, r0
 658:	00 31       	cpi	r16, 0x10	; 16
 65a:	13 02       	muls	r17, r19
 65c:	06 00       	.word	0x0006	; ????
 65e:	00 11       	cpse	r16, r0
 660:	34 00       	.word	0x0034	; ????
 662:	31 13       	cpse	r19, r17
 664:	02 06       	cpc	r0, r18
 666:	00 00       	nop
 668:	12 05       	cpc	r17, r2
 66a:	00 31       	cpi	r16, 0x10	; 16
 66c:	13 1c       	adc	r1, r3
 66e:	0b 00       	.word	0x000b	; ????
 670:	00 13       	cpse	r16, r16
 672:	0b 01       	movw	r0, r22
 674:	11 01       	movw	r2, r2
 676:	12 01       	movw	r2, r4
 678:	01 13       	cpse	r16, r17
 67a:	00 00       	nop
 67c:	14 1d       	adc	r17, r4
 67e:	01 31       	cpi	r16, 0x11	; 17
 680:	13 11       	cpse	r17, r3
 682:	01 12       	cpse	r0, r17
 684:	01 58       	subi	r16, 0x81	; 129
 686:	0b 59       	subi	r16, 0x9B	; 155
 688:	0b 01       	movw	r0, r22
 68a:	13 00       	.word	0x0013	; ????
 68c:	00 15       	cp	r16, r0
 68e:	0b 01       	movw	r0, r22
 690:	11 01       	movw	r2, r2
 692:	12 01       	movw	r2, r4
 694:	00 00       	nop
 696:	16 34       	cpi	r17, 0x46	; 70
 698:	00 31       	cpi	r16, 0x10	; 16
 69a:	13 00       	.word	0x0013	; ????
 69c:	00 17       	cp	r16, r16
 69e:	2e 01       	movw	r4, r28
 6a0:	03 0e       	add	r0, r19
 6a2:	3a 0b       	sbc	r19, r26
 6a4:	3b 0b       	sbc	r19, r27
 6a6:	49 13       	cpse	r20, r25
 6a8:	11 01       	movw	r2, r2
 6aa:	12 01       	movw	r2, r4
 6ac:	40 0a       	sbc	r4, r16
 6ae:	97 42       	sbci	r25, 0x27	; 39
 6b0:	0c 01       	movw	r0, r24
 6b2:	13 00       	.word	0x0013	; ????
 6b4:	00 18       	sub	r0, r0
 6b6:	34 00       	.word	0x0034	; ????
 6b8:	03 08       	sbc	r0, r3
 6ba:	3a 0b       	sbc	r19, r26
 6bc:	3b 0b       	sbc	r19, r27
 6be:	49 13       	cpse	r20, r25
 6c0:	02 06       	cpc	r0, r18
 6c2:	00 00       	nop
 6c4:	19 34       	cpi	r17, 0x49	; 73
 6c6:	00 03       	mulsu	r16, r16
 6c8:	0e 3a       	cpi	r16, 0xAE	; 174
 6ca:	0b 3b       	cpi	r16, 0xBB	; 187
 6cc:	0b 49       	sbci	r16, 0x9B	; 155
 6ce:	13 02       	muls	r17, r19
 6d0:	06 00       	.word	0x0006	; ????
 6d2:	00 1a       	sub	r0, r16
 6d4:	34 00       	.word	0x0034	; ????
 6d6:	03 08       	sbc	r0, r3
 6d8:	3a 0b       	sbc	r19, r26
 6da:	3b 0b       	sbc	r19, r27
 6dc:	49 13       	cpse	r20, r25
 6de:	02 0a       	sbc	r0, r18
 6e0:	00 00       	nop
 6e2:	1b 2e       	mov	r1, r27
 6e4:	00 03       	mulsu	r16, r16
 6e6:	0e 3a       	cpi	r16, 0xAE	; 174
 6e8:	0b 3b       	cpi	r16, 0xBB	; 187
 6ea:	0b 20       	and	r0, r11
 6ec:	0b 00       	.word	0x000b	; ????
 6ee:	00 1c       	adc	r0, r0
 6f0:	2e 01       	movw	r4, r28
 6f2:	03 0e       	add	r0, r19
 6f4:	3a 0b       	sbc	r19, r26
 6f6:	3b 0b       	sbc	r19, r27
 6f8:	11 01       	movw	r2, r2
 6fa:	12 01       	movw	r2, r4
 6fc:	40 06       	cpc	r4, r16
 6fe:	97 42       	sbci	r25, 0x27	; 39
 700:	0c 01       	movw	r0, r24
 702:	13 00       	.word	0x0013	; ????
 704:	00 1d       	adc	r16, r0
 706:	05 00       	.word	0x0005	; ????
 708:	03 08       	sbc	r0, r3
 70a:	3a 0b       	sbc	r19, r26
 70c:	3b 0b       	sbc	r19, r27
 70e:	49 13       	cpse	r20, r25
 710:	02 06       	cpc	r0, r18
 712:	00 00       	nop
 714:	1e 89       	ldd	r17, Y+22	; 0x16
 716:	82 01       	movw	r16, r4
 718:	00 11       	cpse	r16, r0
 71a:	01 31       	cpi	r16, 0x11	; 17
 71c:	13 00       	.word	0x0013	; ????
 71e:	00 1f       	adc	r16, r16
 720:	2e 01       	movw	r4, r28
 722:	3f 0c       	add	r3, r15
 724:	03 0e       	add	r0, r19
 726:	3a 0b       	sbc	r19, r26
 728:	3b 0b       	sbc	r19, r27
 72a:	11 01       	movw	r2, r2
 72c:	12 01       	movw	r2, r4
 72e:	40 06       	cpc	r4, r16
 730:	97 42       	sbci	r25, 0x27	; 39
 732:	0c 01       	movw	r0, r24
 734:	13 00       	.word	0x0013	; ????
 736:	00 20       	and	r0, r0
 738:	2e 01       	movw	r4, r28
 73a:	03 0e       	add	r0, r19
 73c:	3a 0b       	sbc	r19, r26
 73e:	3b 0b       	sbc	r19, r27
 740:	49 13       	cpse	r20, r25
 742:	20 0b       	sbc	r18, r16
 744:	01 13       	cpse	r16, r17
 746:	00 00       	nop
 748:	21 26       	eor	r2, r17
 74a:	00 49       	sbci	r16, 0x90	; 144
 74c:	13 00       	.word	0x0013	; ????
 74e:	00 22       	and	r0, r16
 750:	2e 01       	movw	r4, r28
 752:	3f 0c       	add	r3, r15
 754:	03 0e       	add	r0, r19
 756:	3a 0b       	sbc	r19, r26
 758:	3b 0b       	sbc	r19, r27
 75a:	49 13       	cpse	r20, r25
 75c:	87 01       	movw	r16, r14
 75e:	0c 11       	cpse	r16, r12
 760:	01 12       	cpse	r0, r17
 762:	01 40       	sbci	r16, 0x01	; 1
 764:	0a 96       	adiw	r24, 0x0a	; 10
 766:	42 0c       	add	r4, r2
 768:	01 13       	cpse	r16, r17
 76a:	00 00       	nop
 76c:	23 1d       	adc	r18, r3
 76e:	00 31       	cpi	r16, 0x10	; 16
 770:	13 11       	cpse	r17, r3
 772:	01 12       	cpse	r0, r17
 774:	01 58       	subi	r16, 0x81	; 129
 776:	0b 59       	subi	r16, 0x9B	; 155
 778:	0b 00       	.word	0x000b	; ????
 77a:	00 24       	eor	r0, r0
 77c:	1d 01       	movw	r2, r26
 77e:	31 13       	cpse	r19, r17
 780:	11 01       	movw	r2, r2
 782:	12 01       	movw	r2, r4
 784:	58 0b       	sbc	r21, r24
 786:	59 0b       	sbc	r21, r25
 788:	00 00       	nop
 78a:	25 1d       	adc	r18, r5
 78c:	01 31       	cpi	r16, 0x11	; 17
 78e:	13 52       	subi	r17, 0x23	; 35
 790:	01 55       	subi	r16, 0x51	; 81
 792:	06 58       	subi	r16, 0x86	; 134
 794:	0b 59       	subi	r16, 0x9B	; 155
 796:	0b 01       	movw	r0, r22
 798:	13 00       	.word	0x0013	; ????
 79a:	00 26       	eor	r0, r16
 79c:	1d 01       	movw	r2, r26
 79e:	31 13       	cpse	r19, r17
 7a0:	52 01       	movw	r10, r4
 7a2:	55 06       	cpc	r5, r21
 7a4:	58 0b       	sbc	r21, r24
 7a6:	59 0b       	sbc	r21, r25
 7a8:	00 00       	nop
 7aa:	27 0b       	sbc	r18, r23
 7ac:	01 55       	subi	r16, 0x51	; 81
 7ae:	06 00       	.word	0x0006	; ????
 7b0:	00 28       	or	r0, r0
 7b2:	0b 01       	movw	r0, r22
 7b4:	55 06       	cpc	r5, r21
 7b6:	01 13       	cpse	r16, r17
 7b8:	00 00       	nop
 7ba:	29 89       	ldd	r18, Y+17	; 0x11
 7bc:	82 01       	movw	r16, r4
 7be:	01 11       	cpse	r16, r1
 7c0:	01 31       	cpi	r16, 0x11	; 17
 7c2:	13 01       	movw	r2, r6
 7c4:	13 00       	.word	0x0013	; ????
 7c6:	00 2a       	or	r0, r16
 7c8:	8a 82       	std	Y+2, r8	; 0x02
 7ca:	01 00       	.word	0x0001	; ????
 7cc:	02 0a       	sbc	r0, r18
 7ce:	91 42       	sbci	r25, 0x21	; 33
 7d0:	0a 00       	.word	0x000a	; ????
 7d2:	00 2b       	or	r16, r16
 7d4:	89 82       	std	Y+1, r8	; 0x01
 7d6:	01 01       	movw	r0, r2
 7d8:	11 01       	movw	r2, r2
 7da:	31 13       	cpse	r19, r17
 7dc:	00 00       	nop
 7de:	2c 89       	ldd	r18, Y+20	; 0x14
 7e0:	82 01       	movw	r16, r4
 7e2:	01 11       	cpse	r16, r1
 7e4:	01 01       	movw	r0, r2
 7e6:	13 00       	.word	0x0013	; ????
 7e8:	00 2d       	mov	r16, r0
 7ea:	89 82       	std	Y+1, r8	; 0x01
 7ec:	01 01       	movw	r0, r2
 7ee:	11 01       	movw	r2, r2
 7f0:	00 00       	nop
 7f2:	2e 89       	ldd	r18, Y+22	; 0x16
 7f4:	82 01       	movw	r16, r4
 7f6:	00 11       	cpse	r16, r0
 7f8:	01 00       	.word	0x0001	; ????
 7fa:	00 2f       	mov	r16, r16
 7fc:	01 01       	movw	r0, r2
 7fe:	49 13       	cpse	r20, r25
 800:	01 13       	cpse	r16, r17
 802:	00 00       	nop
 804:	30 21       	and	r19, r0
 806:	00 49       	sbci	r16, 0x90	; 144
 808:	13 2f       	mov	r17, r19
 80a:	0b 00       	.word	0x000b	; ????
 80c:	00 31       	cpi	r16, 0x10	; 16
 80e:	34 00       	.word	0x0034	; ????
 810:	03 0e       	add	r0, r19
 812:	3a 0b       	sbc	r19, r26
 814:	3b 0b       	sbc	r19, r27
 816:	49 13       	cpse	r20, r25
 818:	02 0a       	sbc	r0, r18
 81a:	00 00       	nop
 81c:	00 01       	movw	r0, r0
 81e:	11 00       	.word	0x0011	; ????
 820:	10 06       	cpc	r1, r16
 822:	11 01       	movw	r2, r2
 824:	12 01       	movw	r2, r4
 826:	03 08       	sbc	r0, r3
 828:	1b 08       	sbc	r1, r11
 82a:	25 08       	sbc	r2, r5
 82c:	13 05       	cpc	r17, r3
 82e:	00 00       	nop
 830:	00 01       	movw	r0, r0
 832:	11 00       	.word	0x0011	; ????
 834:	10 06       	cpc	r1, r16
 836:	11 01       	movw	r2, r2
 838:	12 01       	movw	r2, r4
 83a:	03 08       	sbc	r0, r3
 83c:	1b 08       	sbc	r1, r11
 83e:	25 08       	sbc	r2, r5
 840:	13 05       	cpc	r17, r3
 842:	00 00       	nop
 844:	00 01       	movw	r0, r0
 846:	11 00       	.word	0x0011	; ????
 848:	10 06       	cpc	r1, r16
 84a:	11 01       	movw	r2, r2
 84c:	12 01       	movw	r2, r4
 84e:	03 08       	sbc	r0, r3
 850:	1b 08       	sbc	r1, r11
 852:	25 08       	sbc	r2, r5
 854:	13 05       	cpc	r17, r3
 856:	00 00       	nop
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	16 00       	.word	0x0016	; ????
   2:	00 00       	nop
   4:	02 00       	.word	0x0002	; ????
   6:	10 00       	.word	0x0010	; ????
   8:	00 00       	nop
   a:	02 01       	movw	r0, r4
   c:	fb 0e       	add	r15, r27
   e:	0a 00       	.word	0x000a	; ????
  10:	01 01       	movw	r0, r2
  12:	01 01       	movw	r0, r2
  14:	00 00       	nop
  16:	00 01       	movw	r0, r0
  18:	00 00       	nop
  1a:	03 06       	cpc	r0, r19
  1c:	00 00       	nop
  1e:	02 00       	.word	0x0002	; ????
  20:	38 03       	fmul	r19, r16
  22:	00 00       	nop
  24:	02 01       	movw	r0, r4
  26:	fb 0e       	add	r15, r27
  28:	0a 00       	.word	0x000a	; ????
  2a:	01 01       	movw	r0, r2
  2c:	01 01       	movw	r0, r2
  2e:	00 00       	nop
  30:	00 01       	movw	r0, r0
  32:	2f 70       	andi	r18, 0x0F	; 15
  34:	72 69       	ori	r23, 0x92	; 146
  36:	76 61       	ori	r23, 0x16	; 22
  38:	74 65       	ori	r23, 0x54	; 84
  3a:	2f 76       	andi	r18, 0x6F	; 111
  3c:	61 72       	andi	r22, 0x21	; 33
  3e:	2f 66       	ori	r18, 0x6F	; 111
  40:	6f 6c       	ori	r22, 0xCF	; 207
  42:	64 65       	ori	r22, 0x54	; 84
  44:	72 73       	andi	r23, 0x32	; 50
  46:	2f 76       	andi	r18, 0x6F	; 111
  48:	39 2f       	mov	r19, r25
  4a:	66 5f       	subi	r22, 0xF6	; 246
  4c:	5f 70       	andi	r21, 0x0F	; 15
  4e:	39 66       	ori	r19, 0x69	; 105
  50:	74 73       	andi	r23, 0x34	; 52
  52:	33 6d       	ori	r19, 0xD3	; 211
  54:	39 37       	cpi	r19, 0x79	; 121
  56:	7a 30       	cpi	r23, 0x0A	; 10
  58:	38 30       	cpi	r19, 0x08	; 8
  5a:	72 33       	cpi	r23, 0x32	; 50
  5c:	71 71       	andi	r23, 0x11	; 17
  5e:	76 5f       	subi	r23, 0xF6	; 246
  60:	71 30       	cpi	r23, 0x01	; 1
  62:	30 30       	cpi	r19, 0x00	; 0
  64:	30 30       	cpi	r19, 0x00	; 0
  66:	67 6e       	ori	r22, 0xE7	; 231
  68:	2f 54       	subi	r18, 0x4F	; 79
  6a:	2f 41       	sbci	r18, 0x1F	; 31
  6c:	70 70       	andi	r23, 0x00	; 0
  6e:	54 72       	andi	r21, 0x24	; 36
  70:	61 6e       	ori	r22, 0xE1	; 225
  72:	73 6c       	ori	r23, 0xC3	; 195
  74:	6f 63       	ori	r22, 0x3F	; 63
  76:	61 74       	andi	r22, 0x41	; 65
  78:	69 6f       	ori	r22, 0xF9	; 249
  7a:	6e 2f       	mov	r22, r30
  7c:	41 33       	cpi	r20, 0x31	; 49
  7e:	35 42       	sbci	r19, 0x25	; 37
  80:	30 44       	sbci	r19, 0x40	; 64
  82:	41 46       	sbci	r20, 0x61	; 97
  84:	2d 41       	sbci	r18, 0x1D	; 29
  86:	39 36       	cpi	r19, 0x69	; 105
  88:	41 2d       	mov	r20, r1
  8a:	34 35       	cpi	r19, 0x54	; 84
  8c:	41 46       	sbci	r20, 0x61	; 97
  8e:	2d 38       	cpi	r18, 0x8D	; 141
  90:	32 46       	sbci	r19, 0x62	; 98
  92:	31 2d       	mov	r19, r1
  94:	41 46       	sbci	r20, 0x61	; 97
  96:	45 44       	sbci	r20, 0x45	; 69
  98:	31 44       	sbci	r19, 0x41	; 65
  9a:	37 34       	cpi	r19, 0x47	; 71
  9c:	34 45       	sbci	r19, 0x54	; 84
  9e:	37 43       	sbci	r19, 0x37	; 55
  a0:	2f 64       	ori	r18, 0x4F	; 79
  a2:	2f 41       	sbci	r18, 0x1F	; 31
  a4:	72 64       	ori	r23, 0x42	; 66
  a6:	75 69       	ori	r23, 0x95	; 149
  a8:	6e 6f       	ori	r22, 0xFE	; 254
  aa:	20 31       	cpi	r18, 0x10	; 16
  ac:	2e 38       	cpi	r18, 0x8E	; 142
  ae:	2e 39       	cpi	r18, 0x9E	; 158
  b0:	2e 61       	ori	r18, 0x1E	; 30
  b2:	70 70       	andi	r23, 0x00	; 0
  b4:	2f 43       	sbci	r18, 0x3F	; 63
  b6:	6f 6e       	ori	r22, 0xEF	; 239
  b8:	74 65       	ori	r23, 0x54	; 84
  ba:	6e 74       	andi	r22, 0x4E	; 78
  bc:	73 2f       	mov	r23, r19
  be:	4a 61       	ori	r20, 0x1A	; 26
  c0:	76 61       	ori	r23, 0x16	; 22
  c2:	2f 68       	ori	r18, 0x8F	; 143
  c4:	61 72       	andi	r22, 0x21	; 33
  c6:	64 77       	andi	r22, 0x74	; 116
  c8:	61 72       	andi	r22, 0x21	; 33
  ca:	65 2f       	mov	r22, r21
  cc:	61 72       	andi	r22, 0x21	; 33
  ce:	64 75       	andi	r22, 0x54	; 84
  d0:	69 6e       	ori	r22, 0xE9	; 233
  d2:	6f 2f       	mov	r22, r31
  d4:	61 76       	andi	r22, 0x61	; 97
  d6:	72 2f       	mov	r23, r18
  d8:	63 6f       	ori	r22, 0xF3	; 243
  da:	72 65       	ori	r23, 0x52	; 82
  dc:	73 2f       	mov	r23, r19
  de:	61 72       	andi	r22, 0x21	; 33
  e0:	64 75       	andi	r22, 0x54	; 84
  e2:	69 6e       	ori	r22, 0xE9	; 233
  e4:	6f 00       	.word	0x006f	; ????
  e6:	2f 5f       	subi	r18, 0xFF	; 255
  e8:	73 68       	ori	r23, 0x83	; 131
  ea:	61 72       	andi	r22, 0x21	; 33
  ec:	65 64       	ori	r22, 0x45	; 69
  ee:	5f 2f       	mov	r21, r31
  f0:	64 65       	ori	r22, 0x54	; 84
  f2:	76 2f       	mov	r23, r22
  f4:	64 65       	ori	r22, 0x54	; 84
  f6:	76 2e       	mov	r7, r22
  f8:	70 72       	andi	r23, 0x20	; 32
  fa:	6f 6a       	ori	r22, 0xAF	; 175
  fc:	65 63       	ori	r22, 0x35	; 53
  fe:	74 73       	andi	r23, 0x34	; 52
 100:	2f 54       	subi	r18, 0x4F	; 79
 102:	4f 43       	sbci	r20, 0x3F	; 63
 104:	2f 4d       	sbci	r18, 0xDF	; 223
 106:	49 44       	sbci	r20, 0x49	; 73
 108:	49 2d       	mov	r20, r9
 10a:	46 4f       	sbci	r20, 0xF6	; 246
 10c:	4f 54       	subi	r20, 0x4F	; 79
 10e:	2d 43       	sbci	r18, 0x3D	; 61
 110:	4f 4e       	sbci	r20, 0xEF	; 239
 112:	54 52       	subi	r21, 0x24	; 36
 114:	4f 4c       	sbci	r20, 0xCF	; 207
 116:	4c 45       	sbci	r20, 0x5C	; 92
 118:	52 2e       	mov	r5, r18
 11a:	50 55       	subi	r21, 0x50	; 80
 11c:	42 4c       	sbci	r20, 0xC2	; 194
 11e:	49 43       	sbci	r20, 0x39	; 57
 120:	2e 47       	sbci	r18, 0x7E	; 126
 122:	49 54       	subi	r20, 0x49	; 73
 124:	2f 61       	ori	r18, 0x1F	; 31
 126:	72 64       	ori	r23, 0x42	; 66
 128:	75 69       	ori	r23, 0x95	; 149
 12a:	6e 6f       	ori	r22, 0xFE	; 254
 12c:	2f 41       	sbci	r18, 0x1F	; 31
 12e:	72 64       	ori	r23, 0x42	; 66
 130:	75 69       	ori	r23, 0x95	; 149
 132:	6e 6f       	ori	r22, 0xFE	; 254
 134:	5f 49       	sbci	r21, 0x9F	; 159
 136:	4e 4f       	sbci	r20, 0xFE	; 254
 138:	2f 42       	sbci	r18, 0x2F	; 47
 13a:	61 73       	andi	r22, 0x31	; 49
 13c:	69 63       	ori	r22, 0x39	; 57
 13e:	2f 4a       	sbci	r18, 0xAF	; 175
 140:	42 5f       	subi	r20, 0xF2	; 242
 142:	43 50       	subi	r20, 0x03	; 3
 144:	55 5f       	subi	r21, 0xF5	; 245
 146:	55 73       	andi	r21, 0x35	; 53
 148:	61 67       	ori	r22, 0x71	; 113
 14a:	65 5f       	subi	r22, 0xF5	; 245
 14c:	42 61       	ori	r20, 0x12	; 18
 14e:	73 69       	ori	r23, 0x93	; 147
 150:	63 32       	cpi	r22, 0x23	; 35
 152:	5f 4c       	sbci	r21, 0xCF	; 207
 154:	45 44       	sbci	r20, 0x45	; 69
 156:	5f 49       	sbci	r21, 0x9F	; 159
 158:	6d 70       	andi	r22, 0x0D	; 13
 15a:	72 6f       	ori	r23, 0xF2	; 242
 15c:	76 65       	ori	r23, 0x56	; 86
 15e:	64 00       	.word	0x0064	; ????
 160:	2f 70       	andi	r18, 0x0F	; 15
 162:	72 69       	ori	r23, 0x92	; 146
 164:	76 61       	ori	r23, 0x16	; 22
 166:	74 65       	ori	r23, 0x54	; 84
 168:	2f 76       	andi	r18, 0x6F	; 111
 16a:	61 72       	andi	r22, 0x21	; 33
 16c:	2f 66       	ori	r18, 0x6F	; 111
 16e:	6f 6c       	ori	r22, 0xCF	; 207
 170:	64 65       	ori	r22, 0x54	; 84
 172:	72 73       	andi	r23, 0x32	; 50
 174:	2f 76       	andi	r18, 0x6F	; 111
 176:	39 2f       	mov	r19, r25
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
 178:	66 5f       	subi	r22, 0xF6	; 246
 17a:	5f 70       	andi	r21, 0x0F	; 15
 17c:	39 66       	ori	r19, 0x69	; 105
	uint8_t bit = digitalPinToBitMask(pin);
 17e:	74 73       	andi	r23, 0x34	; 52
 180:	33 6d       	ori	r19, 0xD3	; 211
 182:	39 37       	cpi	r19, 0x79	; 121
	uint8_t port = digitalPinToPort(pin);
 184:	7a 30       	cpi	r23, 0x0A	; 10
 186:	38 30       	cpi	r19, 0x08	; 8
 188:	72 33       	cpi	r23, 0x32	; 50
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 18a:	71 71       	andi	r23, 0x11	; 17
 18c:	76 5f       	subi	r23, 0xF6	; 246
 18e:	71 30       	cpi	r23, 0x01	; 1

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 190:	30 30       	cpi	r19, 0x00	; 0
 192:	30 30       	cpi	r19, 0x00	; 0
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 194:	67 6e       	ori	r22, 0xE7	; 231
 196:	2f 54       	subi	r18, 0x4F	; 79
 198:	2f 41       	sbci	r18, 0x1F	; 31
 19a:	70 70       	andi	r23, 0x00	; 0
 19c:	54 72       	andi	r21, 0x24	; 36
 19e:	61 6e       	ori	r22, 0xE1	; 225
 1a0:	73 6c       	ori	r23, 0xC3	; 195
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 1a2:	6f 63       	ori	r22, 0x3F	; 63
 1a4:	61 74       	andi	r22, 0x41	; 65
 1a6:	69 6f       	ori	r22, 0xF9	; 249
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 1a8:	6e 2f       	mov	r22, r30
 1aa:	41 33       	cpi	r20, 0x31	; 49
 1ac:	35 42       	sbci	r19, 0x25	; 37
 1ae:	30 44       	sbci	r19, 0x40	; 64
 1b0:	41 46       	sbci	r20, 0x61	; 97
 1b2:	2d 41       	sbci	r18, 0x1D	; 29
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 1b4:	39 36       	cpi	r19, 0x69	; 105
 1b6:	41 2d       	mov	r20, r1
 1b8:	34 35       	cpi	r19, 0x54	; 84
 1ba:	41 46       	sbci	r20, 0x61	; 97
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 1bc:	2d 38       	cpi	r18, 0x8D	; 141
 1be:	32 46       	sbci	r19, 0x62	; 98
 1c0:	31 2d       	mov	r19, r1
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 1c2:	41 46       	sbci	r20, 0x61	; 97
 1c4:	45 44       	sbci	r20, 0x45	; 69
 1c6:	31 44       	sbci	r19, 0x41	; 65
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 1c8:	37 34       	cpi	r19, 0x47	; 71
 1ca:	34 45       	sbci	r19, 0x54	; 84
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 1cc:	37 43       	sbci	r19, 0x37	; 55
 1ce:	2f 64       	ori	r18, 0x4F	; 79
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 1d0:	2f 41       	sbci	r18, 0x1F	; 31
 1d2:	72 64       	ori	r23, 0x42	; 66
 1d4:	75 69       	ori	r23, 0x95	; 149
 1d6:	6e 6f       	ori	r22, 0xFE	; 254
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 1d8:	20 31       	cpi	r18, 0x10	; 16
 1da:	2e 38       	cpi	r18, 0x8E	; 142
 1dc:	2e 39       	cpi	r18, 0x9E	; 158
 1de:	2e 61       	ori	r18, 0x1E	; 30
 1e0:	70 70       	andi	r23, 0x00	; 0

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 1e2:	2f 43       	sbci	r18, 0x3F	; 63
 1e4:	6f 6e       	ori	r22, 0xEF	; 239
 1e6:	74 65       	ori	r23, 0x54	; 84
 1e8:	6e 74       	andi	r22, 0x4E	; 78
 1ea:	73 2f       	mov	r23, r19
 1ec:	4a 61       	ori	r20, 0x1A	; 26
 1ee:	76 61       	ori	r23, 0x16	; 22

	uint8_t oldSREG = SREG;
 1f0:	2f 68       	ori	r18, 0x8F	; 143
	cli();
 1f2:	61 72       	andi	r22, 0x21	; 33

	if (val == LOW) {
 1f4:	64 77       	andi	r22, 0x74	; 116
 1f6:	61 72       	andi	r22, 0x21	; 33
		*out &= ~bit;
 1f8:	65 2f       	mov	r22, r21
 1fa:	74 6f       	ori	r23, 0xF4	; 244
 1fc:	6f 6c       	ori	r22, 0xCF	; 207
 1fe:	73 2f       	mov	r23, r19
	} else {
		*out |= bit;
 200:	61 76       	andi	r22, 0x61	; 97
 202:	72 2f       	mov	r23, r18
 204:	61 76       	andi	r22, 0x61	; 97
	}

	SREG = oldSREG;
 206:	72 2f       	mov	r23, r18
 208:	69 6e       	ori	r22, 0xE9	; 233
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 20a:	63 6c       	ori	r22, 0xC3	; 195
	
	cli();
 20c:	75 64       	ori	r23, 0x45	; 69
	m = timer0_overflow_count;
 20e:	65 00       	.word	0x0065	; ????
 210:	2f 70       	andi	r18, 0x0F	; 15
 212:	72 69       	ori	r23, 0x92	; 146
 214:	76 61       	ori	r23, 0x16	; 22
 216:	74 65       	ori	r23, 0x54	; 84
 218:	2f 76       	andi	r18, 0x6F	; 111
 21a:	61 72       	andi	r22, 0x21	; 33
 21c:	2f 66       	ori	r18, 0x6F	; 111
#if defined(TCNT0)
	t = TCNT0;
 21e:	6f 6c       	ori	r22, 0xCF	; 207
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 220:	64 65       	ori	r22, 0x54	; 84
 222:	72 73       	andi	r23, 0x32	; 50
 224:	2f 76       	andi	r18, 0x6F	; 111
 226:	39 2f       	mov	r19, r25
		m++;
 228:	66 5f       	subi	r22, 0xF6	; 246
 22a:	5f 70       	andi	r21, 0x0F	; 15
 22c:	39 66       	ori	r19, 0x69	; 105
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 22e:	74 73       	andi	r23, 0x34	; 52
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 230:	33 6d       	ori	r19, 0xD3	; 211
 232:	39 37       	cpi	r19, 0x79	; 121
 234:	7a 30       	cpi	r23, 0x0A	; 10
 236:	38 30       	cpi	r19, 0x08	; 8
 238:	72 33       	cpi	r23, 0x32	; 50
 23a:	71 71       	andi	r23, 0x11	; 17
 23c:	76 5f       	subi	r23, 0xF6	; 246
 23e:	71 30       	cpi	r23, 0x01	; 1
 240:	30 30       	cpi	r19, 0x00	; 0
 242:	30 30       	cpi	r19, 0x00	; 0
 244:	67 6e       	ori	r22, 0xE7	; 231
 246:	2f 54       	subi	r18, 0x4F	; 79
 248:	2f 41       	sbci	r18, 0x1F	; 31
 24a:	70 70       	andi	r23, 0x00	; 0
 24c:	54 72       	andi	r21, 0x24	; 36
 24e:	61 6e       	ori	r22, 0xE1	; 225
 250:	73 6c       	ori	r23, 0xC3	; 195
}
 252:	6f 63       	ori	r22, 0x3F	; 63

void delay(unsigned long ms)
{
 254:	61 74       	andi	r22, 0x41	; 65
 256:	69 6f       	ori	r22, 0xF9	; 249
 258:	6e 2f       	mov	r22, r30
 25a:	41 33       	cpi	r20, 0x31	; 49
 25c:	35 42       	sbci	r19, 0x25	; 37
 25e:	30 44       	sbci	r19, 0x40	; 64
 260:	41 46       	sbci	r20, 0x61	; 97
 262:	2d 41       	sbci	r18, 0x1D	; 29
 264:	39 36       	cpi	r19, 0x69	; 105
 266:	41 2d       	mov	r20, r1
	uint32_t start = micros();
 268:	34 35       	cpi	r19, 0x54	; 84
 26a:	41 46       	sbci	r20, 0x61	; 97
 26c:	2d 38       	cpi	r18, 0x8D	; 141
 26e:	32 46       	sbci	r19, 0x62	; 98

	while (ms > 0) {
 270:	31 2d       	mov	r19, r1
 272:	41 46       	sbci	r20, 0x61	; 97
 274:	45 44       	sbci	r20, 0x45	; 69
 276:	31 44       	sbci	r19, 0x41	; 65
 278:	37 34       	cpi	r19, 0x47	; 71
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 27a:	34 45       	sbci	r19, 0x54	; 84
 27c:	37 43       	sbci	r19, 0x37	; 55
 27e:	2f 64       	ori	r18, 0x4F	; 79
 280:	2f 41       	sbci	r18, 0x1F	; 31
 282:	72 64       	ori	r23, 0x42	; 66
 284:	75 69       	ori	r23, 0x95	; 149
 286:	6e 6f       	ori	r22, 0xFE	; 254
 288:	20 31       	cpi	r18, 0x10	; 16
 28a:	2e 38       	cpi	r18, 0x8E	; 142
 28c:	2e 39       	cpi	r18, 0x9E	; 158
 28e:	2e 61       	ori	r18, 0x1E	; 30
 290:	70 70       	andi	r23, 0x00	; 0
 292:	2f 43       	sbci	r18, 0x3F	; 63
			ms--;
 294:	6f 6e       	ori	r22, 0xEF	; 239
 296:	74 65       	ori	r23, 0x54	; 84
 298:	6e 74       	andi	r22, 0x4E	; 78
 29a:	73 2f       	mov	r23, r19
 29c:	4a 61       	ori	r20, 0x1A	; 26
			start += 1000;
 29e:	76 61       	ori	r23, 0x16	; 22
 2a0:	2f 68       	ori	r18, 0x8F	; 143
 2a2:	61 72       	andi	r22, 0x21	; 33
 2a4:	64 77       	andi	r22, 0x74	; 116
 2a6:	61 72       	andi	r22, 0x21	; 33
 2a8:	65 2f       	mov	r22, r21
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 2aa:	61 72       	andi	r22, 0x21	; 33
 2ac:	64 75       	andi	r22, 0x54	; 84
 2ae:	69 6e       	ori	r22, 0xE9	; 233
 2b0:	6f 2f       	mov	r22, r31
 2b2:	61 76       	andi	r22, 0x61	; 97
 2b4:	72 2f       	mov	r23, r18
			ms--;
			start += 1000;
		}
	}
}
 2b6:	76 61       	ori	r23, 0x16	; 22
 2b8:	72 69       	ori	r23, 0x92	; 146
 2ba:	61 6e       	ori	r22, 0xE1	; 225
 2bc:	74 73       	andi	r23, 0x34	; 52
 2be:	2f 65       	ori	r18, 0x5F	; 95
 2c0:	69 67       	ori	r22, 0x79	; 121
 2c2:	68 74       	andi	r22, 0x48	; 72
 2c4:	61 6e       	ori	r22, 0xE1	; 225
 2c6:	61 6c       	ori	r22, 0xC1	; 193
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 2c8:	6f 67       	ori	r22, 0x7F	; 127
 2ca:	69 6e       	ori	r22, 0xE9	; 233
 2cc:	70 75       	andi	r23, 0x50	; 80
 2ce:	74 73       	andi	r23, 0x34	; 52
 2d0:	2f 2e       	mov	r2, r31
 2d2:	2e 2f       	mov	r18, r30
 2d4:	73 74       	andi	r23, 0x43	; 67
 2d6:	61 6e       	ori	r22, 0xE1	; 225
 2d8:	64 61       	ori	r22, 0x14	; 20
 2da:	72 64       	ori	r23, 0x42	; 66
 2dc:	00 00       	nop
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 2de:	77 69       	ori	r23, 0x97	; 151
 2e0:	72 69       	ori	r23, 0x92	; 146
 2e2:	6e 67       	ori	r22, 0x7E	; 126
 2e4:	5f 64       	ori	r21, 0x4F	; 79
 2e6:	69 67       	ori	r22, 0x79	; 121
 2e8:	69 74       	andi	r22, 0x49	; 73
 2ea:	61 6c       	ori	r22, 0xC1	; 193
 2ec:	2e 63       	ori	r18, 0x3E	; 62
	unsigned char f = timer0_fract;
 2ee:	00 01       	movw	r0, r0
 2f0:	00 00       	nop

	m += MILLIS_INC;
	f += FRACT_INC;
 2f2:	77 69       	ori	r23, 0x97	; 151
 2f4:	72 69       	ori	r23, 0x92	; 146
	if (f >= FRACT_MAX) {
 2f6:	6e 67       	ori	r22, 0x7E	; 126
 2f8:	2e 63       	ori	r18, 0x3E	; 62
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 2fa:	00 01       	movw	r0, r0
 2fc:	00 00       	nop
 2fe:	6d 61       	ori	r22, 0x1D	; 29
 300:	69 6e       	ori	r22, 0xE9	; 233
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 302:	2e 63       	ori	r18, 0x3E	; 62
 304:	70 70       	andi	r23, 0x00	; 0
		m += 1;
 306:	00 01       	movw	r0, r0
 308:	00 00       	nop
 30a:	4a 42       	sbci	r20, 0x2A	; 42
	}

	timer0_fract = f;
 30c:	5f 43       	sbci	r21, 0x3F	; 63
 30e:	50 55       	subi	r21, 0x50	; 80
	timer0_millis = m;
 310:	5f 55       	subi	r21, 0x5F	; 95
 312:	73 61       	ori	r23, 0x13	; 19
 314:	67 65       	ori	r22, 0x57	; 87
 316:	5f 42       	sbci	r21, 0x2F	; 47
 318:	61 73       	andi	r22, 0x31	; 49
 31a:	69 63       	ori	r22, 0x39	; 57
 31c:	32 5f       	subi	r19, 0xF2	; 242
 31e:	4c 45       	sbci	r20, 0x5C	; 92
	timer0_overflow_count++;
 320:	44 5f       	subi	r20, 0xF4	; 244
 322:	49 6d       	ori	r20, 0xD9	; 217
 324:	70 72       	andi	r23, 0x20	; 32
 326:	6f 76       	andi	r22, 0x6F	; 111
 328:	65 64       	ori	r22, 0x45	; 69
 32a:	2e 69       	ori	r18, 0x9E	; 158
 32c:	6e 6f       	ori	r22, 0xFE	; 254
 32e:	00 02       	muls	r16, r16
 330:	00 00       	nop
 332:	73 74       	andi	r23, 0x43	; 67
 334:	64 69       	ori	r22, 0x94	; 148
 336:	6e 74       	andi	r22, 0x4E	; 78
 338:	2e 68       	ori	r18, 0x8E	; 142
 33a:	00 03       	mulsu	r16, r16
 33c:	00 00       	nop
 33e:	68 6f       	ori	r22, 0xF8	; 248
 340:	6f 6b       	ori	r22, 0xBF	; 191
 342:	73 2e       	mov	r7, r19
 344:	63 00       	.word	0x0063	; ????
}
 346:	01 00       	.word	0x0001	; ????
 348:	00 70       	andi	r16, 0x00	; 0
 34a:	69 6e       	ori	r22, 0xE9	; 233
 34c:	73 5f       	subi	r23, 0xF3	; 243
 34e:	61 72       	andi	r22, 0x21	; 33
 350:	64 75       	andi	r22, 0x54	; 84
 352:	69 6e       	ori	r22, 0xE9	; 233
 354:	6f 2e       	mov	r6, r31
 356:	68 00       	.word	0x0068	; ????
 358:	04 00       	.word	0x0004	; ????
 35a:	00 00       	nop

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 35c:	00 05       	cpc	r16, r0
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 35e:	02 78       	andi	r16, 0x82	; 130
 360:	01 00       	.word	0x0001	; ????
 362:	00 03       	mulsu	r16, r16
	sbi(TCCR0A, WGM00);
 364:	89 01       	movw	r16, r18
 366:	01 03       	mulsu	r16, r17
 368:	02 09       	sbc	r16, r2
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 36a:	00 00       	nop
 36c:	01 03       	mulsu	r16, r17
 36e:	01 09       	sbc	r16, r1
	sbi(TCCR0B, CS00);
 370:	06 00       	.word	0x0006	; ????
 372:	01 03       	mulsu	r16, r17
 374:	01 09       	sbc	r16, r1

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 376:	06 00       	.word	0x0006	; ????
 378:	01 03       	mulsu	r16, r17
 37a:	03 09       	sbc	r16, r3
 37c:	06 00       	.word	0x0006	; ????
 37e:	01 03       	mulsu	r16, r17
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 380:	04 09       	sbc	r16, r4
 382:	06 00       	.word	0x0006	; ????

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 384:	01 03       	mulsu	r16, r17
 386:	b8 7f       	andi	r27, 0xF8	; 248
 388:	09 04       	cpc	r0, r9
 38a:	00 01       	movw	r0, r0
 38c:	03 15       	cp	r16, r3
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 38e:	09 0e       	add	r0, r25
 390:	00 01       	movw	r0, r0
 392:	03 6b       	ori	r16, 0xB3	; 179
 394:	09 06       	cpc	r0, r25
 396:	00 01       	movw	r0, r0
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 398:	03 06       	cpc	r0, r19
 39a:	09 0c       	add	r0, r9
 39c:	00 01       	movw	r0, r0
 39e:	03 7d       	andi	r16, 0xD3	; 211
 3a0:	09 08       	sbc	r0, r9

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 3a2:	00 01       	movw	r0, r0
 3a4:	03 03       	mulsu	r16, r19
 3a6:	09 06       	cpc	r0, r25
 3a8:	00 01       	movw	r0, r0
 3aa:	03 0b       	sbc	r16, r19

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 3ac:	09 06       	cpc	r0, r25
 3ae:	00 01       	movw	r0, r0
 3b0:	03 04       	cpc	r0, r3
 3b2:	09 04       	cpc	r0, r9
 3b4:	00 01       	movw	r0, r0
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 3b6:	03 03       	mulsu	r16, r19
 3b8:	09 04       	cpc	r0, r9
 3ba:	00 01       	movw	r0, r0
 3bc:	03 03       	mulsu	r16, r19
 3be:	09 08       	sbc	r0, r9
		sbi(ADCSRA, ADPS1);
 3c0:	00 01       	movw	r0, r0
 3c2:	03 2f       	mov	r16, r19
 3c4:	09 0a       	sbc	r0, r25
 3c6:	00 01       	movw	r0, r0
 3c8:	03 02       	muls	r16, r19
		sbi(ADCSRA, ADPS0);
 3ca:	09 0e       	add	r0, r25
 3cc:	00 01       	movw	r0, r0
 3ce:	03 01       	movw	r0, r6
 3d0:	09 02       	muls	r16, r25
 3d2:	00 01       	movw	r0, r0
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 3d4:	03 02       	muls	r16, r19
 3d6:	09 02       	muls	r16, r25
 3d8:	00 01       	movw	r0, r0
 3da:	03 01       	movw	r0, r6
 3dc:	09 04       	cpc	r0, r9
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 3de:	00 01       	movw	r0, r0
 3e0:	03 02       	muls	r16, r19
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 3e2:	09 08       	sbc	r0, r9
 3e4:	00 01       	movw	r0, r0
 3e6:	03 03       	mulsu	r16, r19
	uint8_t port = digitalPinToPort(pin);
 3e8:	09 06       	cpc	r0, r25
 3ea:	00 01       	movw	r0, r0
 3ec:	04 02       	muls	r16, r20
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 3ee:	03 ad       	ldd	r16, Z+59	; 0x3b
 3f0:	7f 09       	sbc	r23, r15

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 3f2:	04 00       	.word	0x0004	; ????
 3f4:	01 03       	mulsu	r16, r17
 3f6:	02 09       	sbc	r16, r2
 3f8:	00 00       	nop
 3fa:	01 03       	mulsu	r16, r17
 3fc:	02 09       	sbc	r16, r2
 3fe:	02 00       	.word	0x0002	; ????
 400:	01 03       	mulsu	r16, r17
	out = portOutputRegister(port);
 402:	01 09       	sbc	r16, r1
 404:	02 00       	.word	0x0002	; ????
 406:	01 03       	mulsu	r16, r17
 408:	02 09       	sbc	r16, r2
 40a:	10 00       	.word	0x0010	; ????
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 40c:	01 03       	mulsu	r16, r17
                cli();
 40e:	08 09       	sbc	r16, r8
		*reg |= bit;
 410:	02 00       	.word	0x0002	; ????
 412:	01 03       	mulsu	r16, r17
 414:	01 09       	sbc	r16, r1
		SREG = oldSREG;
 416:	08 00       	.word	0x0008	; ????
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 418:	01 03       	mulsu	r16, r17

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
 41a:	06 09       	sbc	r16, r6
	m = timer0_millis;
 41c:	06 00       	.word	0x0006	; ????
 41e:	01 03       	mulsu	r16, r17
 420:	02 09       	sbc	r16, r2
 422:	02 00       	.word	0x0002	; ????
 424:	01 03       	mulsu	r16, r17
 426:	01 09       	sbc	r16, r1
 428:	22 00       	.word	0x0022	; ????
 42a:	01 03       	mulsu	r16, r17
	SREG = oldSREG;
 42c:	03 09       	sbc	r16, r3
unsigned long _loopCounter = C_LOOP_COUNT;

void setup()
{
  pinMode(LED_BUILTIN, OUTPUT);
  _startTime_ms = millis();
 42e:	02 00       	.word	0x0002	; ????
 430:	01 03       	mulsu	r16, r17
 432:	01 09       	sbc	r16, r1
 434:	14 00       	.word	0x0014	; ????
 436:	01 03       	mulsu	r16, r17
 438:	02 09       	sbc	r16, r2
 43a:	08 00       	.word	0x0008	; ????
 43c:	01 03       	mulsu	r16, r17
 43e:	02 09       	sbc	r16, r2
 440:	0a 00       	.word	0x000a	; ????
 442:	01 03       	mulsu	r16, r17
 444:	01 09       	sbc	r16, r1
}

void loop() 
{
  if (0 == _loopCounter--) {
 446:	1a 00       	.word	0x001a	; ????
 448:	01 03       	mulsu	r16, r17
 44a:	01 09       	sbc	r16, r1
 44c:	0a 00       	.word	0x000a	; ????
 44e:	01 03       	mulsu	r16, r17
 450:	7e 09       	sbc	r23, r14
 452:	0c 00       	.word	0x000c	; ????
 454:	01 03       	mulsu	r16, r17
 456:	05 09       	sbc	r16, r5
 458:	0c 00       	.word	0x000c	; ????
 45a:	01 03       	mulsu	r16, r17
 45c:	ba 7f       	andi	r27, 0xFA	; 250
 45e:	09 12       	cpse	r0, r25
 460:	00 01       	movw	r0, r0
 462:	03 03       	mulsu	r16, r19
 464:	09 16       	cp	r0, r25
 466:	00 01       	movw	r0, r0
 468:	03 01       	movw	r0, r6
 46a:	09 10       	cpse	r0, r9
 46c:	00 01       	movw	r0, r0
 46e:	03 03       	mulsu	r16, r19
 470:	09 04       	cpc	r0, r9
 472:	00 01       	movw	r0, r0
 474:	03 01       	movw	r0, r6
 476:	09 04       	cpc	r0, r9
 478:	00 01       	movw	r0, r0
 47a:	03 7e       	andi	r16, 0xE3	; 227
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 47c:	09 04       	cpc	r0, r9

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
 47e:	00 01       	movw	r0, r0
	m = timer0_millis;
 480:	03 03       	mulsu	r16, r19
 482:	09 08       	sbc	r0, r9
 484:	00 01       	movw	r0, r0
 486:	03 01       	movw	r0, r6
 488:	09 04       	cpc	r0, r9
 48a:	00 01       	movw	r0, r0
 48c:	03 03       	mulsu	r16, r19
 48e:	09 06       	cpc	r0, r25
	SREG = oldSREG;
 490:	00 01       	movw	r0, r0
}

void outputResults()
{
  const unsigned long endTime_ms = millis();
  float total_ms = ((float)(endTime_ms - _startTime_ms));
 492:	03 01       	movw	r0, r6
 494:	09 04       	cpc	r0, r9
 496:	00 01       	movw	r0, r0
 498:	03 01       	movw	r0, r6
 49a:	09 10       	cpse	r0, r9
 49c:	00 01       	movw	r0, r0
 49e:	03 01       	movw	r0, r6
 4a0:	09 26       	eor	r0, r25
 4a2:	00 01       	movw	r0, r0
 4a4:	09 16       	cp	r0, r25
 4a6:	00 00       	nop
 4a8:	01 01       	movw	r0, r2
 4aa:	04 03       	mulsu	r16, r20
 4ac:	00 05       	cpc	r16, r0
 4ae:	02 5c       	subi	r16, 0xC2	; 194
 4b0:	03 00       	.word	0x0003	; ????
 4b2:	00 03       	mulsu	r16, r16
 4b4:	21 01       	movw	r4, r2
  const int numberOfDigits = (int)log10(total_ms);
 4b6:	04 02       	muls	r16, r20
 4b8:	03 d3       	rcall	.+1542   	; 0xac0 <pow+0x4c>
 4ba:	01 09       	sbc	r16, r1
 4bc:	00 00       	nop
 4be:	01 03       	mulsu	r16, r17
  total_ms /= pow(10, numberOfDigits);
 4c0:	06 09       	sbc	r16, r6
 4c2:	02 00       	.word	0x0002	; ????
 4c4:	01 03       	mulsu	r16, r17
 4c6:	01 09       	sbc	r16, r1
 4c8:	06 00       	.word	0x0006	; ????
 4ca:	01 03       	mulsu	r16, r17
 4cc:	0d 09       	sbc	r16, r13
 4ce:	06 00       	.word	0x0006	; ????
 4d0:	01 03       	mulsu	r16, r17
 4d2:	01 09       	sbc	r16, r1
 4d4:	06 00       	.word	0x0006	; ????
 4d6:	01 03       	mulsu	r16, r17
 4d8:	0d 09       	sbc	r16, r13
 4da:	06 00       	.word	0x0006	; ????
 4dc:	01 03       	mulsu	r16, r17
 4de:	0b 09       	sbc	r16, r11
 4e0:	0a 00       	.word	0x000a	; ????
 4e2:	01 03       	mulsu	r16, r17
 4e4:	03 09       	sbc	r16, r3
 4e6:	04 00       	.word	0x0004	; ????
 4e8:	01 03       	mulsu	r16, r17
 4ea:	02 09       	sbc	r16, r2
  
  for (int i = 0; i <= numberOfDigits; i++) {
 4ec:	0a 00       	.word	0x000a	; ????
 4ee:	01 03       	mulsu	r16, r17
 4f0:	0a 09       	sbc	r16, r10
 4f2:	0a 00       	.word	0x000a	; ????
 4f4:	01 03       	mulsu	r16, r17
 4f6:	07 09       	sbc	r16, r7
    digitalWrite(LED_BUILTIN, HIGH);
 4f8:	0a 00       	.word	0x000a	; ????
 4fa:	01 03       	mulsu	r16, r17
 4fc:	09 09       	sbc	r16, r9
    delay(2000);
 4fe:	0a 00       	.word	0x000a	; ????
 500:	01 03       	mulsu	r16, r17
 502:	23 09       	sbc	r18, r3
 504:	0a 00       	.word	0x000a	; ????
 506:	01 03       	mulsu	r16, r17
 508:	01 09       	sbc	r16, r1
    digitalWrite(LED_BUILTIN, LOW);
 50a:	0a 00       	.word	0x000a	; ????
 50c:	01 03       	mulsu	r16, r17
 50e:	01 09       	sbc	r16, r1
    delay(250);
 510:	0a 00       	.word	0x000a	; ????
 512:	01 03       	mulsu	r16, r17
 514:	17 09       	sbc	r17, r7
 516:	0a 00       	.word	0x000a	; ????
 518:	01 03       	mulsu	r16, r17
 51a:	09 09       	sbc	r16, r9
  
    int blinkCount = (int)total_ms;
 51c:	0a 00       	.word	0x000a	; ????
 51e:	01 04       	cpc	r0, r1
 520:	01 03       	mulsu	r16, r17
 522:	99 7d       	andi	r25, 0xD9	; 217
 524:	09 04       	cpc	r0, r9
 526:	00 01       	movw	r0, r0
 528:	03 01       	movw	r0, r6
    for (int b = 0; b < blinkCount; b++) {
 52a:	09 06       	cpc	r0, r25
 52c:	00 01       	movw	r0, r0
 52e:	03 03       	mulsu	r16, r19
 530:	09 06       	cpc	r0, r25
 532:	00 01       	movw	r0, r0
      digitalWrite(LED_BUILTIN, HIGH);
 534:	03 03       	mulsu	r16, r19
 536:	09 04       	cpc	r0, r9
 538:	00 01       	movw	r0, r0
      delay(250);
 53a:	03 01       	movw	r0, r6
 53c:	09 10       	cpse	r0, r9
 53e:	00 01       	movw	r0, r0
 540:	03 0f       	add	r16, r19
 542:	09 0a       	sbc	r0, r25
 544:	00 01       	movw	r0, r0
      digitalWrite(LED_BUILTIN, LOW);
 546:	03 01       	movw	r0, r6
 548:	09 02       	muls	r16, r25
 54a:	00 01       	movw	r0, r0
      delay(250);
 54c:	03 01       	movw	r0, r6
 54e:	09 02       	muls	r16, r25
 550:	00 01       	movw	r0, r0
 552:	03 01       	movw	r0, r6
 554:	09 06       	cpc	r0, r25
 556:	00 01       	movw	r0, r0
    delay(2000);
    digitalWrite(LED_BUILTIN, LOW);
    delay(250);
  
    int blinkCount = (int)total_ms;
    for (int b = 0; b < blinkCount; b++) {
 558:	04 02       	muls	r16, r20
 55a:	03 0b       	sbc	r16, r19
 55c:	09 02       	muls	r16, r25
      delay(250);
      digitalWrite(LED_BUILTIN, LOW);
      delay(250);
    }
  
    delay(1000);
 55e:	00 01       	movw	r0, r0
 560:	03 04       	cpc	r0, r3
 562:	09 02       	muls	r16, r25
 564:	00 01       	movw	r0, r0
 566:	03 01       	movw	r0, r6
 568:	09 02       	muls	r16, r25
  
    total_ms = (total_ms - blinkCount) * 10;
 56a:	00 01       	movw	r0, r0
 56c:	03 01       	movw	r0, r6
 56e:	09 10       	cpse	r0, r9
 570:	00 01       	movw	r0, r0
 572:	04 04       	cpc	r0, r4
 574:	03 bf       	out	0x33, r16	; 51
 576:	7f 09       	sbc	r23, r15
 578:	02 00       	.word	0x0002	; ????
 57a:	01 04       	cpc	r0, r1
 57c:	03 03       	mulsu	r16, r19
 57e:	26 09       	sbc	r18, r6
 580:	10 00       	.word	0x0010	; ????
 582:	01 04       	cpc	r0, r1
 584:	04 03       	mulsu	r16, r20
 586:	5f 09       	sbc	r21, r15
 588:	08 00       	.word	0x0008	; ????
 58a:	01 04       	cpc	r0, r1
 58c:	02 03       	mulsu	r16, r18
 58e:	36 09       	sbc	r19, r6
 590:	36 00       	.word	0x0036	; ????
  const unsigned long endTime_ms = millis();
  float total_ms = ((float)(endTime_ms - _startTime_ms));
  const int numberOfDigits = (int)log10(total_ms);
  total_ms /= pow(10, numberOfDigits);
  
  for (int i = 0; i <= numberOfDigits; i++) {
 592:	01 03       	mulsu	r16, r17
 594:	04 09       	sbc	r16, r4
 596:	02 00       	.word	0x0002	; ????
 598:	01 03       	mulsu	r16, r17
 59a:	01 09       	sbc	r16, r1
 59c:	02 00       	.word	0x0002	; ????
 59e:	01 03       	mulsu	r16, r17
 5a0:	01 09       	sbc	r16, r1
 5a2:	10 00       	.word	0x0010	; ????
 5a4:	01 04       	cpc	r0, r1
 5a6:	04 03       	mulsu	r16, r20
 5a8:	4c 09       	sbc	r20, r12
 5aa:	02 00       	.word	0x0002	; ????
 5ac:	01 03       	mulsu	r16, r17
 5ae:	01 09       	sbc	r16, r1
 5b0:	24 00       	.word	0x0024	; ????
 5b2:	01 03       	mulsu	r16, r17
 5b4:	01 09       	sbc	r16, r1
 5b6:	0a 00       	.word	0x000a	; ????
 5b8:	01 03       	mulsu	r16, r17
 5ba:	02 09       	sbc	r16, r2
 5bc:	2c 00       	.word	0x002c	; ????
 5be:	01 03       	mulsu	r16, r17
 5c0:	01 09       	sbc	r16, r1
 5c2:	0c 00       	.word	0x000c	; ????
 5c4:	01 03       	mulsu	r16, r17
 5c6:	01 09       	sbc	r16, r1
 5c8:	06 00       	.word	0x0006	; ????
 5ca:	01 03       	mulsu	r16, r17
 5cc:	01 09       	sbc	r16, r1
 5ce:	0c 00       	.word	0x000c	; ????
 5d0:	01 03       	mulsu	r16, r17
 5d2:	01 09       	sbc	r16, r1
 5d4:	06 00       	.word	0x0006	; ????
 5d6:	01 03       	mulsu	r16, r17
 5d8:	02 09       	sbc	r16, r2
 5da:	0c 00       	.word	0x000c	; ????
 5dc:	01 03       	mulsu	r16, r17
 5de:	01 09       	sbc	r16, r1
 5e0:	0e 00       	.word	0x000e	; ????
 5e2:	01 03       	mulsu	r16, r17
 5e4:	01 09       	sbc	r16, r1
 5e6:	0a 00       	.word	0x000a	; ????
 5e8:	01 03       	mulsu	r16, r17
 5ea:	01 09       	sbc	r16, r1
 5ec:	06 00       	.word	0x0006	; ????
 5ee:	01 03       	mulsu	r16, r17
 5f0:	01 09       	sbc	r16, r1
 5f2:	0c 00       	.word	0x000c	; ????
 5f4:	01 03       	mulsu	r16, r17
 5f6:	01 09       	sbc	r16, r1
 5f8:	06 00       	.word	0x0006	; ????
 5fa:	01 03       	mulsu	r16, r17
 5fc:	7c 09       	sbc	r23, r12
 5fe:	0c 00       	.word	0x000c	; ????
 600:	01 03       	mulsu	r16, r17
 602:	07 09       	sbc	r16, r7
 604:	06 00       	.word	0x0006	; ????
 606:	01 03       	mulsu	r16, r17
 608:	02 09       	sbc	r16, r2
 60a:	0c 00       	.word	0x000c	; ????
 60c:	01 03       	mulsu	r16, r17
 60e:	70 09       	sbc	r23, r0
 610:	28 00       	.word	0x0028	; ????
 612:	01 04       	cpc	r0, r1
 614:	03 03       	mulsu	r16, r19
 616:	15 09       	sbc	r17, r5
 618:	04 00       	.word	0x0004	; ????
 61a:	01 09       	sbc	r16, r1
 61c:	0e 00       	.word	0x000e	; ????
 61e:	00 01       	movw	r0, r0
 620:	01 5e       	subi	r16, 0xE1	; 225
 622:	00 00       	nop
 624:	00 02       	muls	r16, r16
 626:	00 41       	sbci	r16, 0x10	; 16
 628:	00 00       	nop
 62a:	00 02       	muls	r16, r16
 62c:	01 fb       	bst	r16, 1
 62e:	0e 0a       	sbc	r0, r30
 630:	00 01       	movw	r0, r0
 632:	01 01       	movw	r0, r2
 634:	01 00       	.word	0x0001	; ????
 636:	00 00       	nop
 638:	01 2e       	mov	r0, r17
 63a:	2e 2f       	mov	r18, r30
 63c:	2e 2e       	mov	r2, r30
 63e:	2f 2e       	mov	r2, r31
 640:	2e 2f       	mov	r18, r30
 642:	2e 2e       	mov	r2, r30
 644:	2f 67       	ori	r18, 0x7F	; 127
 646:	63 63       	ori	r22, 0x33	; 51
 648:	2f 6c       	ori	r18, 0xCF	; 207
 64a:	69 62       	ori	r22, 0x29	; 41
 64c:	67 63       	ori	r22, 0x37	; 55
 64e:	63 2f       	mov	r22, r19
 650:	63 6f       	ori	r22, 0xF3	; 243
 652:	6e 66       	ori	r22, 0x6E	; 110
 654:	69 67       	ori	r22, 0x79	; 121
 656:	2f 61       	ori	r18, 0x1F	; 31
 658:	76 72       	andi	r23, 0x26	; 38
 65a:	00 00       	nop
 65c:	6c 69       	ori	r22, 0x9C	; 156
 65e:	62 31       	cpi	r22, 0x12	; 18
 660:	66 75       	andi	r22, 0x56	; 86
 662:	6e 63       	ori	r22, 0x3E	; 62
 664:	73 2e       	mov	r7, r19
 666:	53 00       	.word	0x0053	; ????
 668:	01 00       	.word	0x0001	; ????
 66a:	00 00       	nop
 66c:	00 05       	cpc	r16, r0
 66e:	02 de       	rcall	.-1020   	; 0x274 <delay+0x20>
 670:	0c 00       	.word	0x000c	; ????
 672:	00 03       	mulsu	r16, r16
 674:	e6 11       	cpse	r30, r6
 676:	01 03       	mulsu	r16, r17
 678:	02 09       	sbc	r16, r2
 67a:	02 00       	.word	0x0002	; ????
 67c:	01 09       	sbc	r16, r1
 67e:	02 00       	.word	0x0002	; ????
 680:	00 01       	movw	r0, r0
 682:	01 94       	neg	r0
 684:	00 00       	nop
 686:	00 02       	muls	r16, r16
 688:	00 41       	sbci	r16, 0x10	; 16
 68a:	00 00       	nop
 68c:	00 02       	muls	r16, r16
 68e:	01 fb       	bst	r16, 1
 690:	0e 0a       	sbc	r0, r30
 692:	00 01       	movw	r0, r0
 694:	01 01       	movw	r0, r2
 696:	01 00       	.word	0x0001	; ????
 698:	00 00       	nop
 69a:	01 2e       	mov	r0, r17
 69c:	2e 2f       	mov	r18, r30
 69e:	2e 2e       	mov	r2, r30
 6a0:	2f 2e       	mov	r2, r31
 6a2:	2e 2f       	mov	r18, r30
 6a4:	2e 2e       	mov	r2, r30
 6a6:	2f 67       	ori	r18, 0x7F	; 127
 6a8:	63 63       	ori	r22, 0x33	; 51
 6aa:	2f 6c       	ori	r18, 0xCF	; 207
 6ac:	69 62       	ori	r22, 0x29	; 41
 6ae:	67 63       	ori	r22, 0x37	; 55
 6b0:	63 2f       	mov	r22, r19
 6b2:	63 6f       	ori	r22, 0xF3	; 243
 6b4:	6e 66       	ori	r22, 0x6E	; 110
 6b6:	69 67       	ori	r22, 0x79	; 121
 6b8:	2f 61       	ori	r18, 0x1F	; 31
 6ba:	76 72       	andi	r23, 0x26	; 38
 6bc:	00 00       	nop
 6be:	6c 69       	ori	r22, 0x9C	; 156
 6c0:	62 31       	cpi	r22, 0x12	; 18
 6c2:	66 75       	andi	r22, 0x56	; 86
 6c4:	6e 63       	ori	r22, 0x3E	; 62
 6c6:	73 2e       	mov	r7, r19
 6c8:	53 00       	.word	0x0053	; ????
 6ca:	01 00       	.word	0x0001	; ????
 6cc:	00 00       	nop
 6ce:	00 05       	cpc	r16, r0
 6d0:	02 46       	sbci	r16, 0x62	; 98
 6d2:	01 00       	.word	0x0001	; ????
 6d4:	00 03       	mulsu	r16, r16
 6d6:	e9 12       	cpse	r14, r25
 6d8:	01 03       	mulsu	r16, r17
 6da:	01 09       	sbc	r16, r1
 6dc:	02 00       	.word	0x0002	; ????
 6de:	01 03       	mulsu	r16, r17
 6e0:	01 09       	sbc	r16, r1
 6e2:	02 00       	.word	0x0002	; ????
 6e4:	01 03       	mulsu	r16, r17
 6e6:	01 09       	sbc	r16, r1
 6e8:	02 00       	.word	0x0002	; ????
 6ea:	01 03       	mulsu	r16, r17
 6ec:	01 09       	sbc	r16, r1
 6ee:	02 00       	.word	0x0002	; ????
 6f0:	01 03       	mulsu	r16, r17
 6f2:	01 09       	sbc	r16, r1
 6f4:	02 00       	.word	0x0002	; ????
 6f6:	01 03       	mulsu	r16, r17
 6f8:	03 09       	sbc	r16, r3
 6fa:	02 00       	.word	0x0002	; ????
 6fc:	01 03       	mulsu	r16, r17
 6fe:	05 09       	sbc	r16, r5
 700:	02 00       	.word	0x0002	; ????
 702:	01 03       	mulsu	r16, r17
 704:	02 09       	sbc	r16, r2
 706:	02 00       	.word	0x0002	; ????
 708:	01 03       	mulsu	r16, r17
 70a:	01 09       	sbc	r16, r1
 70c:	02 00       	.word	0x0002	; ????
 70e:	01 03       	mulsu	r16, r17
 710:	01 09       	sbc	r16, r1
 712:	02 00       	.word	0x0002	; ????
 714:	01 09       	sbc	r16, r1
 716:	02 00       	.word	0x0002	; ????
 718:	00 01       	movw	r0, r0
 71a:	01 82       	std	Z+1, r0	; 0x01
 71c:	00 00       	nop
 71e:	00 02       	muls	r16, r16
 720:	00 41       	sbci	r16, 0x10	; 16
 722:	00 00       	nop
 724:	00 02       	muls	r16, r16
 726:	01 fb       	bst	r16, 1
 728:	0e 0a       	sbc	r0, r30
 72a:	00 01       	movw	r0, r0
 72c:	01 01       	movw	r0, r2
 72e:	01 00       	.word	0x0001	; ????
 730:	00 00       	nop
 732:	01 2e       	mov	r0, r17
 734:	2e 2f       	mov	r18, r30
 736:	2e 2e       	mov	r2, r30
 738:	2f 2e       	mov	r2, r31
 73a:	2e 2f       	mov	r18, r30
 73c:	2e 2e       	mov	r2, r30
 73e:	2f 67       	ori	r18, 0x7F	; 127
 740:	63 63       	ori	r22, 0x33	; 51
 742:	2f 6c       	ori	r18, 0xCF	; 207
 744:	69 62       	ori	r22, 0x29	; 41
 746:	67 63       	ori	r22, 0x37	; 55
 748:	63 2f       	mov	r22, r19
 74a:	63 6f       	ori	r22, 0xF3	; 243
 74c:	6e 66       	ori	r22, 0x6E	; 110
 74e:	69 67       	ori	r22, 0x79	; 121
 750:	2f 61       	ori	r18, 0x1F	; 31
 752:	76 72       	andi	r23, 0x26	; 38
 754:	00 00       	nop
 756:	6c 69       	ori	r22, 0x9C	; 156
 758:	62 31       	cpi	r22, 0x12	; 18
 75a:	66 75       	andi	r22, 0x56	; 86
 75c:	6e 63       	ori	r22, 0x3E	; 62
 75e:	73 2e       	mov	r7, r19
 760:	53 00       	.word	0x0053	; ????
 762:	01 00       	.word	0x0001	; ????
 764:	00 00       	nop
 766:	00 05       	cpc	r16, r0
 768:	02 5c       	subi	r16, 0xC2	; 194
 76a:	01 00       	.word	0x0001	; ????
 76c:	00 03       	mulsu	r16, r16
 76e:	89 13       	cpse	r24, r25
 770:	01 03       	mulsu	r16, r17
 772:	01 09       	sbc	r16, r1
 774:	02 00       	.word	0x0002	; ????
 776:	01 03       	mulsu	r16, r17
 778:	01 09       	sbc	r16, r1
 77a:	02 00       	.word	0x0002	; ????
 77c:	01 03       	mulsu	r16, r17
 77e:	01 09       	sbc	r16, r1
 780:	02 00       	.word	0x0002	; ????
 782:	01 03       	mulsu	r16, r17
 784:	02 09       	sbc	r16, r2
 786:	02 00       	.word	0x0002	; ????
 788:	01 03       	mulsu	r16, r17
 78a:	02 09       	sbc	r16, r2
 78c:	02 00       	.word	0x0002	; ????
 78e:	01 03       	mulsu	r16, r17
 790:	01 09       	sbc	r16, r1
 792:	02 00       	.word	0x0002	; ????
 794:	01 03       	mulsu	r16, r17
 796:	01 09       	sbc	r16, r1
 798:	02 00       	.word	0x0002	; ????
 79a:	01 09       	sbc	r16, r1
 79c:	02 00       	.word	0x0002	; ????
 79e:	00 01       	movw	r0, r0
 7a0:	01 00       	Address 0x000007a0 is out of bounds.
.word	0xffff	; ????

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	10 00       	.word	0x0010	; ????
   2:	00 00       	nop
   4:	ff ff       	.word	0xffff	; ????
   6:	ff ff       	.word	0xffff	; ????
   8:	01 00       	.word	0x0001	; ????
   a:	02 7f       	andi	r16, 0xF2	; 242
   c:	24 0c       	add	r2, r4
   e:	20 02       	muls	r18, r16
  10:	a4 01       	movw	r20, r8
  12:	00 00       	nop
  14:	0c 00       	.word	0x000c	; ????
  16:	00 00       	nop
  18:	00 00       	nop
  1a:	00 00       	nop
  1c:	78 01       	movw	r14, r16
  1e:	00 00       	nop
  20:	92 00       	.word	0x0092	; ????
  22:	00 00       	nop
  24:	0c 00       	.word	0x000c	; ????
  26:	00 00       	nop
  28:	00 00       	nop
  2a:	00 00       	nop
  2c:	0a 02       	muls	r16, r26
  2e:	00 00       	nop
  30:	4a 00       	.word	0x004a	; ????
  32:	00 00       	nop
  34:	34 00       	.word	0x0034	; ????
  36:	00 00       	nop
  38:	00 00       	nop
  3a:	00 00       	nop
  3c:	54 02       	muls	r21, r20
  3e:	00 00       	nop
  40:	74 00       	.word	0x0074	; ????
  42:	00 00       	nop
  44:	41 0e       	add	r4, r17
  46:	03 88       	ldd	r0, Z+19	; 0x13
  48:	02 41       	sbci	r16, 0x12	; 18
  4a:	0e 04       	cpc	r0, r14
  4c:	89 03       	fmulsu	r16, r17
  4e:	41 0e       	add	r4, r17
  50:	05 8a       	std	Z+21, r0	; 0x15
  52:	04 41       	sbci	r16, 0x14	; 20
  54:	0e 06       	cpc	r0, r30
  56:	8b 05       	cpc	r24, r11
  58:	41 0e       	add	r4, r17
  5a:	07 8c       	ldd	r0, Z+31	; 0x1f
  5c:	06 41       	sbci	r16, 0x16	; 22
  5e:	0e 08       	sbc	r0, r14
  60:	8d 07       	cpc	r24, r29
  62:	41 0e       	add	r4, r17
  64:	09 8e       	std	Y+25, r0	; 0x19
  66:	08 41       	sbci	r16, 0x18	; 24
  68:	0e 0a       	sbc	r0, r30
  6a:	8f 09       	sbc	r24, r15
  6c:	34 00       	.word	0x0034	; ????
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	c8 02       	muls	r28, r24
  76:	00 00       	nop
  78:	94 00       	.word	0x0094	; ????
  7a:	00 00       	nop
  7c:	41 0e       	add	r4, r17
  7e:	03 81       	ldd	r16, Z+3	; 0x03
  80:	02 41       	sbci	r16, 0x12	; 18
  82:	0e 04       	cpc	r0, r14
  84:	80 03       	fmuls	r16, r16
  86:	44 0e       	add	r4, r20
  88:	05 92       	las	Z, r0
  8a:	04 41       	sbci	r16, 0x14	; 20
  8c:	0e 06       	cpc	r0, r30
  8e:	93 05       	cpc	r25, r3
  90:	41 0e       	add	r4, r17
  92:	07 98       	cbi	0x00, 7	; 0
  94:	06 41       	sbci	r16, 0x16	; 22
  96:	0e 08       	sbc	r0, r14
  98:	99 07       	cpc	r25, r25
  9a:	41 0e       	add	r4, r17
  9c:	09 9a       	sbi	0x01, 1	; 1
  9e:	08 41       	sbci	r16, 0x18	; 24
  a0:	0e 0a       	sbc	r0, r30
  a2:	9b 09       	sbc	r25, r11
  a4:	0c 00       	.word	0x000c	; ????
  a6:	00 00       	nop
  a8:	00 00       	nop
  aa:	00 00       	nop
  ac:	5c 03       	fmul	r21, r20
  ae:	00 00       	nop
  b0:	48 02       	muls	r20, r24
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	61 76       	andi	r22, 0x61	; 97
   2:	72 2d       	mov	r23, r2
   4:	6c 69       	ori	r22, 0x9C	; 156
   6:	62 63       	ori	r22, 0x32	; 50
   8:	20 32       	cpi	r18, 0x20	; 32
   a:	2e 30       	cpi	r18, 0x0E	; 14
   c:	2e 30       	cpi	r18, 0x0E	; 14
   e:	00 75       	andi	r16, 0x50	; 80
  10:	69 6e       	ori	r22, 0xE9	; 233
  12:	74 38       	cpi	r23, 0x84	; 132
  14:	5f 74       	andi	r21, 0x4F	; 79
  16:	00 75       	andi	r16, 0x50	; 80
  18:	69 6e       	ori	r22, 0xE9	; 233
  1a:	74 31       	cpi	r23, 0x14	; 20
  1c:	36 5f       	subi	r19, 0xF6	; 246
  1e:	74 00       	.word	0x0074	; ????
  20:	5f 5f       	subi	r21, 0xFF	; 255
  22:	65 65       	ori	r22, 0x55	; 85
  24:	70 72       	andi	r23, 0x20	; 32
  26:	6f 6d       	ori	r22, 0xDF	; 223
  28:	00 55       	subi	r16, 0x50	; 80
  2a:	44 52       	subi	r20, 0x24	; 36
  2c:	30 00       	.word	0x0030	; ????
  2e:	55 43       	sbci	r21, 0x35	; 53
  30:	53 52       	subi	r21, 0x23	; 35
  32:	30 41       	sbci	r19, 0x10	; 16
  34:	00 55       	subi	r16, 0x50	; 80
  36:	43 53       	subi	r20, 0x33	; 51
  38:	52 30       	cpi	r21, 0x02	; 2
  3a:	42 00       	.word	0x0042	; ????
  3c:	55 43       	sbci	r21, 0x35	; 53
  3e:	53 52       	subi	r21, 0x23	; 35
  40:	30 43       	sbci	r19, 0x30	; 48
  42:	00 55       	subi	r16, 0x50	; 80
  44:	42 52       	subi	r20, 0x22	; 34
  46:	52 30       	cpi	r21, 0x02	; 2
  48:	00 54       	subi	r16, 0x40	; 64
  4a:	57 41       	sbci	r21, 0x17	; 23
  4c:	4d 52       	subi	r20, 0x2D	; 45
  4e:	00 54       	subi	r16, 0x40	; 64
  50:	57 42       	sbci	r21, 0x27	; 39
  52:	52 00       	.word	0x0052	; ????
  54:	54 57       	subi	r21, 0x74	; 116
  56:	43 52       	subi	r20, 0x23	; 35
  58:	00 54       	subi	r16, 0x40	; 64
  5a:	57 53       	subi	r21, 0x37	; 55
  5c:	52 00       	.word	0x0052	; ????
  5e:	54 57       	subi	r21, 0x74	; 116
  60:	44 52       	subi	r20, 0x24	; 36
  62:	00 54       	subi	r16, 0x40	; 64
  64:	57 41       	sbci	r21, 0x17	; 23
  66:	52 00       	.word	0x0052	; ????
  68:	54 49       	sbci	r21, 0x94	; 148
  6a:	4d 53       	subi	r20, 0x3D	; 61
  6c:	4b 31       	cpi	r20, 0x1B	; 27
  6e:	00 54       	subi	r16, 0x40	; 64
  70:	49 46       	sbci	r20, 0x69	; 105
  72:	52 31       	cpi	r21, 0x12	; 18
  74:	00 54       	subi	r16, 0x40	; 64
  76:	43 43       	sbci	r20, 0x33	; 51
  78:	52 31       	cpi	r21, 0x12	; 18
  7a:	41 00       	.word	0x0041	; ????
  7c:	54 43       	sbci	r21, 0x34	; 52
  7e:	43 52       	subi	r20, 0x23	; 35
  80:	31 42       	sbci	r19, 0x21	; 33
  82:	00 54       	subi	r16, 0x40	; 64
  84:	43 43       	sbci	r20, 0x33	; 51
  86:	52 31       	cpi	r21, 0x12	; 18
  88:	43 00       	.word	0x0043	; ????
  8a:	54 43       	sbci	r21, 0x34	; 52
  8c:	4e 54       	subi	r20, 0x4E	; 78
  8e:	31 00       	.word	0x0031	; ????
  90:	4f 43       	sbci	r20, 0x3F	; 63
  92:	52 31       	cpi	r21, 0x12	; 18
  94:	41 00       	.word	0x0041	; ????
  96:	4f 43       	sbci	r20, 0x3F	; 63
  98:	52 31       	cpi	r21, 0x12	; 18
  9a:	42 00       	.word	0x0042	; ????
  9c:	49 43       	sbci	r20, 0x39	; 57
  9e:	52 31       	cpi	r21, 0x12	; 18
  a0:	00 47       	sbci	r16, 0x70	; 112
  a2:	54 43       	sbci	r21, 0x34	; 52
  a4:	43 52       	subi	r20, 0x23	; 35
  a6:	00 54       	subi	r16, 0x40	; 64
  a8:	49 4d       	sbci	r20, 0xD9	; 217
  aa:	53 4b       	sbci	r21, 0xB3	; 179
  ac:	32 00       	.word	0x0032	; ????
  ae:	54 49       	sbci	r21, 0x94	; 148
  b0:	46 52       	subi	r20, 0x26	; 38
  b2:	32 00       	.word	0x0032	; ????
  b4:	54 43       	sbci	r21, 0x34	; 52
  b6:	43 52       	subi	r20, 0x23	; 35
  b8:	32 41       	sbci	r19, 0x12	; 18
  ba:	00 54       	subi	r16, 0x40	; 64
  bc:	43 43       	sbci	r20, 0x33	; 51
  be:	52 32       	cpi	r21, 0x22	; 34
  c0:	42 00       	.word	0x0042	; ????
  c2:	54 43       	sbci	r21, 0x34	; 52
  c4:	4e 54       	subi	r20, 0x4E	; 78
  c6:	32 00       	.word	0x0032	; ????
  c8:	4f 43       	sbci	r20, 0x3F	; 63
  ca:	52 32       	cpi	r21, 0x22	; 34
  cc:	42 00       	.word	0x0042	; ????
  ce:	4f 43       	sbci	r20, 0x3F	; 63
  d0:	52 32       	cpi	r21, 0x22	; 34
  d2:	41 00       	.word	0x0041	; ????
  d4:	41 53       	subi	r20, 0x31	; 49
  d6:	53 52       	subi	r21, 0x23	; 35
  d8:	00 47       	sbci	r16, 0x70	; 112
  da:	54 43       	sbci	r21, 0x34	; 52
  dc:	43 52       	subi	r20, 0x23	; 35
  de:	00 41       	sbci	r16, 0x10	; 16
  e0:	44 4d       	sbci	r20, 0xD4	; 212
  e2:	55 58       	subi	r21, 0x85	; 133
  e4:	00 41       	sbci	r16, 0x10	; 16
  e6:	44 43       	sbci	r20, 0x34	; 52
  e8:	00 41       	sbci	r16, 0x10	; 16
  ea:	44 43       	sbci	r20, 0x34	; 52
  ec:	53 52       	subi	r21, 0x23	; 35
  ee:	41 00       	.word	0x0041	; ????
  f0:	41 44       	sbci	r20, 0x41	; 65
  f2:	43 53       	subi	r20, 0x33	; 51
  f4:	52 42       	sbci	r21, 0x22	; 34
  f6:	00 44       	sbci	r16, 0x40	; 64
  f8:	49 44       	sbci	r20, 0x49	; 73
  fa:	52 30       	cpi	r21, 0x02	; 2
  fc:	00 41       	sbci	r16, 0x10	; 16
  fe:	43 53       	subi	r20, 0x33	; 51
 100:	52 00       	.word	0x0052	; ????
 102:	44 49       	sbci	r20, 0x94	; 148
 104:	44 52       	subi	r20, 0x24	; 36
 106:	31 00       	.word	0x0031	; ????
 108:	50 4f       	sbci	r21, 0xF0	; 240
 10a:	52 54       	subi	r21, 0x42	; 66
 10c:	42 00       	.word	0x0042	; ????
 10e:	44 44       	sbci	r20, 0x44	; 68
 110:	52 42       	sbci	r21, 0x22	; 34
 112:	00 50       	subi	r16, 0x00	; 0
 114:	49 4e       	sbci	r20, 0xE9	; 233
 116:	42 00       	.word	0x0042	; ????
 118:	50 4f       	sbci	r21, 0xF0	; 240
 11a:	52 54       	subi	r21, 0x42	; 66
 11c:	43 00       	.word	0x0043	; ????
 11e:	44 44       	sbci	r20, 0x44	; 68
 120:	52 43       	sbci	r21, 0x32	; 50
 122:	00 50       	subi	r16, 0x00	; 0
 124:	49 4e       	sbci	r20, 0xE9	; 233
 126:	43 00       	.word	0x0043	; ????
 128:	50 4f       	sbci	r21, 0xF0	; 240
 12a:	52 54       	subi	r21, 0x42	; 66
 12c:	44 00       	.word	0x0044	; ????
 12e:	44 44       	sbci	r20, 0x44	; 68
 130:	52 44       	sbci	r21, 0x42	; 66
 132:	00 50       	subi	r16, 0x00	; 0
 134:	49 4e       	sbci	r20, 0xE9	; 233
 136:	44 00       	.word	0x0044	; ????
 138:	4f 43       	sbci	r20, 0x3F	; 63
 13a:	52 30       	cpi	r21, 0x02	; 2
 13c:	42 00       	.word	0x0042	; ????
 13e:	4f 43       	sbci	r20, 0x3F	; 63
 140:	52 30       	cpi	r21, 0x02	; 2
 142:	41 00       	.word	0x0041	; ????
 144:	54 43       	sbci	r21, 0x34	; 52
 146:	4e 54       	subi	r20, 0x4E	; 78
 148:	30 00       	.word	0x0030	; ????
 14a:	54 43       	sbci	r21, 0x34	; 52
 14c:	43 52       	subi	r20, 0x23	; 35
 14e:	30 42       	sbci	r19, 0x20	; 32
 150:	00 54       	subi	r16, 0x40	; 64
 152:	43 43       	sbci	r20, 0x33	; 51
 154:	52 30       	cpi	r21, 0x02	; 2
 156:	41 00       	.word	0x0041	; ????
 158:	54 49       	sbci	r21, 0x94	; 148
 15a:	4d 53       	subi	r20, 0x3D	; 61
 15c:	4b 30       	cpi	r20, 0x0B	; 11
 15e:	00 54       	subi	r16, 0x40	; 64
 160:	49 46       	sbci	r20, 0x69	; 105
 162:	52 30       	cpi	r21, 0x02	; 2
 164:	00 47       	sbci	r16, 0x70	; 112
 166:	54 43       	sbci	r21, 0x34	; 52
 168:	43 52       	subi	r20, 0x23	; 35
 16a:	00 45       	sbci	r16, 0x50	; 80
 16c:	49 43       	sbci	r20, 0x39	; 57
 16e:	52 41       	sbci	r21, 0x12	; 18
 170:	00 45       	sbci	r16, 0x50	; 80
 172:	49 4d       	sbci	r20, 0xD9	; 217
 174:	53 4b       	sbci	r21, 0xB3	; 179
 176:	00 45       	sbci	r16, 0x50	; 80
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
 178:	49 46       	sbci	r20, 0x69	; 105
 17a:	52 00       	.word	0x0052	; ????
 17c:	50 43       	sbci	r21, 0x30	; 48
	uint8_t bit = digitalPinToBitMask(pin);
 17e:	49 43       	sbci	r20, 0x39	; 57
 180:	52 00       	.word	0x0052	; ????
 182:	50 43       	sbci	r21, 0x30	; 48
	uint8_t port = digitalPinToPort(pin);
 184:	4d 53       	subi	r20, 0x3D	; 61
 186:	4b 32       	cpi	r20, 0x2B	; 43
 188:	00 50       	subi	r16, 0x00	; 0
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 18a:	43 4d       	sbci	r20, 0xD3	; 211
 18c:	53 4b       	sbci	r21, 0xB3	; 179
 18e:	31 00       	.word	0x0031	; ????

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 190:	50 43       	sbci	r21, 0x30	; 48
 192:	4d 53       	subi	r20, 0x3D	; 61
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 194:	4b 30       	cpi	r20, 0x0B	; 11
 196:	00 50       	subi	r16, 0x00	; 0
 198:	43 49       	sbci	r20, 0x93	; 147
 19a:	46 52       	subi	r20, 0x26	; 38
 19c:	00 53       	subi	r16, 0x30	; 48
 19e:	50 44       	sbci	r21, 0x40	; 64
 1a0:	52 00       	.word	0x0052	; ????
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 1a2:	53 50       	subi	r21, 0x03	; 3
 1a4:	53 52       	subi	r21, 0x23	; 35
 1a6:	00 53       	subi	r16, 0x30	; 48
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 1a8:	50 43       	sbci	r21, 0x30	; 48
 1aa:	52 00       	.word	0x0052	; ????
 1ac:	57 44       	sbci	r21, 0x47	; 71
 1ae:	54 43       	sbci	r21, 0x34	; 52
 1b0:	53 52       	subi	r21, 0x23	; 35
 1b2:	00 50       	subi	r16, 0x00	; 0
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 1b4:	52 52       	subi	r21, 0x22	; 34
 1b6:	00 4f       	sbci	r16, 0xF0	; 240
 1b8:	53 43       	sbci	r21, 0x33	; 51
 1ba:	43 41       	sbci	r20, 0x13	; 19
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 1bc:	4c 00       	.word	0x004c	; ????
 1be:	43 4c       	sbci	r20, 0xC3	; 195
 1c0:	4b 50       	subi	r20, 0x0B	; 11
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 1c2:	52 00       	.word	0x0052	; ????
 1c4:	53 52       	subi	r21, 0x23	; 35
 1c6:	45 47       	sbci	r20, 0x75	; 117
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 1c8:	00 53       	subi	r16, 0x30	; 48
 1ca:	50 00       	.word	0x0050	; ????
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 1cc:	53 50       	subi	r21, 0x03	; 3
 1ce:	4d 43       	sbci	r20, 0x3D	; 61
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 1d0:	53 52       	subi	r21, 0x23	; 35
 1d2:	00 4d       	sbci	r16, 0xD0	; 208
 1d4:	43 55       	subi	r20, 0x53	; 83
 1d6:	43 52       	subi	r20, 0x23	; 35
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 1d8:	00 4d       	sbci	r16, 0xD0	; 208
 1da:	43 55       	subi	r20, 0x53	; 83
 1dc:	53 52       	subi	r21, 0x23	; 35
 1de:	00 53       	subi	r16, 0x30	; 48
 1e0:	4d 43       	sbci	r20, 0x3D	; 61

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 1e2:	52 00       	.word	0x0052	; ????
 1e4:	47 50       	subi	r20, 0x07	; 7
 1e6:	49 4f       	sbci	r20, 0xF9	; 249
 1e8:	52 32       	cpi	r21, 0x22	; 34
 1ea:	00 47       	sbci	r16, 0x70	; 112
 1ec:	50 49       	sbci	r21, 0x90	; 144
 1ee:	4f 52       	subi	r20, 0x2F	; 47

	uint8_t oldSREG = SREG;
 1f0:	31 00       	.word	0x0031	; ????
	cli();
 1f2:	47 50       	subi	r20, 0x07	; 7

	if (val == LOW) {
 1f4:	49 4f       	sbci	r20, 0xF9	; 249
 1f6:	52 30       	cpi	r21, 0x02	; 2
		*out &= ~bit;
 1f8:	00 45       	sbci	r16, 0x50	; 80
 1fa:	45 41       	sbci	r20, 0x15	; 21
 1fc:	52 00       	.word	0x0052	; ????
 1fe:	45 45       	sbci	r20, 0x55	; 85
	} else {
		*out |= bit;
 200:	44 52       	subi	r20, 0x24	; 36
 202:	00 45       	sbci	r16, 0x50	; 80
 204:	45 43       	sbci	r20, 0x35	; 53
	}

	SREG = oldSREG;
 206:	52 00       	.word	0x0052	; ????
 208:	74 69       	ori	r23, 0x94	; 148
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 20a:	6d 65       	ori	r22, 0x5D	; 93
	
	cli();
 20c:	72 30       	cpi	r23, 0x02	; 2
	m = timer0_overflow_count;
 20e:	5f 6f       	ori	r21, 0xFF	; 255
 210:	76 65       	ori	r23, 0x56	; 86
 212:	72 66       	ori	r23, 0x62	; 98
 214:	6c 6f       	ori	r22, 0xFC	; 252
 216:	77 5f       	subi	r23, 0xF7	; 247
 218:	63 6f       	ori	r22, 0xF3	; 243
 21a:	75 6e       	ori	r23, 0xE5	; 229
 21c:	74 00       	.word	0x0074	; ????
#if defined(TCNT0)
	t = TCNT0;
 21e:	70 6f       	ori	r23, 0xF0	; 240
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 220:	72 74       	andi	r23, 0x42	; 66
 222:	5f 74       	andi	r21, 0x4F	; 79
 224:	6f 5f       	subi	r22, 0xFF	; 255
 226:	6f 75       	andi	r22, 0x5F	; 95
		m++;
 228:	74 70       	andi	r23, 0x04	; 4
 22a:	75 74       	andi	r23, 0x45	; 69
 22c:	5f 50       	subi	r21, 0x0F	; 15
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 22e:	47 4d       	sbci	r20, 0xD7	; 215
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 230:	00 5f       	subi	r16, 0xF0	; 240
 232:	5f 61       	ori	r21, 0x1F	; 31
 234:	64 64       	ori	r22, 0x44	; 68
 236:	72 31       	cpi	r23, 0x12	; 18
 238:	36 00       	.word	0x0036	; ????
 23a:	73 65       	ori	r23, 0x53	; 83
 23c:	74 75       	andi	r23, 0x54	; 84
 23e:	70 00       	.word	0x0070	; ????
 240:	65 6e       	ori	r22, 0xE5	; 229
 242:	64 54       	subi	r22, 0x44	; 68
 244:	69 6d       	ori	r22, 0xD9	; 217
 246:	65 5f       	subi	r22, 0xF5	; 245
 248:	6d 73       	andi	r22, 0x3D	; 61
 24a:	00 64       	ori	r16, 0x40	; 64
 24c:	69 67       	ori	r22, 0x79	; 121
 24e:	69 74       	andi	r22, 0x49	; 73
 250:	61 6c       	ori	r22, 0xC1	; 193
}
 252:	5f 70       	andi	r21, 0x0F	; 15

void delay(unsigned long ms)
{
 254:	69 6e       	ori	r22, 0xE9	; 233
 256:	5f 74       	andi	r21, 0x4F	; 79
 258:	6f 5f       	subi	r22, 0xFF	; 255
 25a:	62 69       	ori	r22, 0x92	; 146
 25c:	74 5f       	subi	r23, 0xF4	; 244
 25e:	6d 61       	ori	r22, 0x1D	; 29
 260:	73 6b       	ori	r23, 0xB3	; 179
 262:	5f 50       	subi	r21, 0x0F	; 15
 264:	47 4d       	sbci	r20, 0xD7	; 215
 266:	00 73       	andi	r16, 0x30	; 48
	uint32_t start = micros();
 268:	74 61       	ori	r23, 0x14	; 20
 26a:	72 74       	andi	r23, 0x42	; 66
 26c:	00 64       	ori	r16, 0x40	; 64
 26e:	69 67       	ori	r22, 0x79	; 121

	while (ms > 0) {
 270:	69 74       	andi	r22, 0x49	; 73
 272:	61 6c       	ori	r22, 0xC1	; 193
 274:	57 72       	andi	r21, 0x27	; 39
 276:	69 74       	andi	r22, 0x49	; 73
 278:	65 00       	.word	0x0065	; ????
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 27a:	69 6e       	ori	r22, 0xE9	; 233
 27c:	69 74       	andi	r22, 0x49	; 73
 27e:	00 6d       	ori	r16, 0xD0	; 208
 280:	69 63       	ori	r22, 0x39	; 57
 282:	72 6f       	ori	r23, 0xF2	; 242
 284:	73 00       	.word	0x0073	; ????
 286:	64 69       	ori	r22, 0x94	; 148
 288:	67 69       	ori	r22, 0x97	; 151
 28a:	74 61       	ori	r23, 0x14	; 20
 28c:	6c 5f       	subi	r22, 0xFC	; 252
 28e:	70 69       	ori	r23, 0x90	; 144
 290:	6e 5f       	subi	r22, 0xFE	; 254
 292:	74 6f       	ori	r23, 0xF4	; 244
			ms--;
 294:	5f 70       	andi	r21, 0x0F	; 15
 296:	6f 72       	andi	r22, 0x2F	; 47
 298:	74 5f       	subi	r23, 0xF4	; 244
 29a:	50 47       	sbci	r21, 0x70	; 112
 29c:	4d 00       	.word	0x004d	; ????
			start += 1000;
 29e:	6c 6f       	ori	r22, 0xFC	; 252
 2a0:	6f 70       	andi	r22, 0x0F	; 15
 2a2:	00 66       	ori	r16, 0x60	; 96
 2a4:	6c 6f       	ori	r22, 0xFC	; 252
 2a6:	61 74       	andi	r22, 0x41	; 65
 2a8:	00 70       	andi	r16, 0x00	; 0
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 2aa:	6f 72       	andi	r22, 0x2F	; 47
 2ac:	74 5f       	subi	r23, 0xF4	; 244
 2ae:	74 6f       	ori	r23, 0xF4	; 244
 2b0:	5f 6d       	ori	r21, 0xDF	; 223
 2b2:	6f 64       	ori	r22, 0x4F	; 79
 2b4:	65 5f       	subi	r22, 0xF5	; 245
			ms--;
			start += 1000;
		}
	}
}
 2b6:	50 47       	sbci	r21, 0x70	; 112
 2b8:	4d 00       	.word	0x004d	; ????
 2ba:	64 65       	ori	r22, 0x54	; 84
 2bc:	6c 61       	ori	r22, 0x1C	; 28
 2be:	79 00       	.word	0x0079	; ????
 2c0:	75 6e       	ori	r23, 0xE5	; 229
 2c2:	73 69       	ori	r23, 0x93	; 147
 2c4:	67 6e       	ori	r22, 0xE7	; 231
 2c6:	65 64       	ori	r22, 0x45	; 69
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 2c8:	20 63       	ori	r18, 0x30	; 48
 2ca:	68 61       	ori	r22, 0x18	; 24
 2cc:	72 00       	.word	0x0072	; ????
 2ce:	74 69       	ori	r23, 0x94	; 148
 2d0:	6d 65       	ori	r22, 0x5D	; 93
 2d2:	72 00       	.word	0x0072	; ????
 2d4:	69 6e       	ori	r22, 0xE9	; 233
 2d6:	69 74       	andi	r22, 0x49	; 73
 2d8:	56 61       	ori	r21, 0x16	; 22
 2da:	72 69       	ori	r23, 0x92	; 146
 2dc:	61 6e       	ori	r22, 0xE1	; 225
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 2de:	74 00       	.word	0x0074	; ????
 2e0:	6c 6f       	ori	r22, 0xFC	; 252
 2e2:	6e 67       	ori	r22, 0x7E	; 126
 2e4:	20 75       	andi	r18, 0x50	; 80
 2e6:	6e 73       	andi	r22, 0x3E	; 62
 2e8:	69 67       	ori	r22, 0x79	; 121
 2ea:	6e 65       	ori	r22, 0x5E	; 94
 2ec:	64 20       	and	r6, r4
	unsigned char f = timer0_fract;
 2ee:	69 6e       	ori	r22, 0xE9	; 233
 2f0:	74 00       	.word	0x0074	; ????

	m += MILLIS_INC;
	f += FRACT_INC;
 2f2:	6f 75       	andi	r22, 0x5F	; 95
 2f4:	74 70       	andi	r23, 0x04	; 4
	if (f >= FRACT_MAX) {
 2f6:	75 74       	andi	r23, 0x45	; 69
 2f8:	52 65       	ori	r21, 0x52	; 82
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 2fa:	73 75       	andi	r23, 0x53	; 83
 2fc:	6c 74       	andi	r22, 0x4C	; 76
 2fe:	73 00       	.word	0x0073	; ????
 300:	64 69       	ori	r22, 0x94	; 148
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 302:	67 69       	ori	r22, 0x97	; 151
 304:	74 61       	ori	r23, 0x14	; 20
		m += 1;
 306:	6c 5f       	subi	r22, 0xFC	; 252
 308:	70 69       	ori	r23, 0x90	; 144
 30a:	6e 5f       	subi	r22, 0xFE	; 254
	}

	timer0_fract = f;
 30c:	74 6f       	ori	r23, 0xF4	; 244
 30e:	5f 74       	andi	r21, 0x4F	; 79
	timer0_millis = m;
 310:	69 6d       	ori	r22, 0xD9	; 217
 312:	65 72       	andi	r22, 0x25	; 37
 314:	5f 50       	subi	r21, 0x0F	; 15
 316:	47 4d       	sbci	r20, 0xD7	; 215
 318:	00 47       	sbci	r16, 0x70	; 112
 31a:	4e 55       	subi	r20, 0x5E	; 94
 31c:	20 47       	sbci	r18, 0x70	; 112
 31e:	49 4d       	sbci	r20, 0xD9	; 217
	timer0_overflow_count++;
 320:	50 4c       	sbci	r21, 0xC0	; 192
 322:	45 20       	and	r4, r5
 324:	35 2e       	mov	r3, r21
 326:	34 2e       	mov	r3, r20
 328:	30 20       	and	r3, r0
 32a:	2d 6d       	ori	r18, 0xDD	; 221
 32c:	6e 2d       	mov	r22, r14
 32e:	66 6c       	ori	r22, 0xC6	; 198
 330:	61 73       	andi	r22, 0x31	; 49
 332:	68 3d       	cpi	r22, 0xD8	; 216
 334:	31 20       	and	r3, r1
 336:	2d 6d       	ori	r18, 0xDD	; 221
 338:	6d 63       	ori	r22, 0x3D	; 61
 33a:	75 3d       	cpi	r23, 0xD5	; 213
 33c:	61 76       	andi	r22, 0x61	; 97
 33e:	72 35       	cpi	r23, 0x52	; 82
 340:	20 2d       	mov	r18, r0
 342:	6d 6e       	ori	r22, 0xED	; 237
 344:	2d 66       	ori	r18, 0x6D	; 109
}
 346:	6c 61       	ori	r22, 0x1C	; 28
 348:	73 68       	ori	r23, 0x83	; 131
 34a:	3d 31       	cpi	r19, 0x1D	; 29
 34c:	20 2d       	mov	r18, r0
 34e:	6d 6e       	ori	r22, 0xED	; 237
 350:	6f 2d       	mov	r22, r15
 352:	73 6b       	ori	r23, 0xB3	; 179
 354:	69 70       	andi	r22, 0x09	; 9
 356:	2d 62       	ori	r18, 0x2D	; 45
 358:	75 67       	ori	r23, 0x75	; 117
 35a:	20 2d       	mov	r18, r0

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 35c:	6d 6d       	ori	r22, 0xDD	; 221
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 35e:	63 75       	andi	r22, 0x53	; 83
 360:	3d 61       	ori	r19, 0x1D	; 29
 362:	76 72       	andi	r23, 0x26	; 38
	sbi(TCCR0A, WGM00);
 364:	35 20       	and	r3, r5
 366:	2d 67       	ori	r18, 0x7D	; 125
 368:	20 2d       	mov	r18, r0
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 36a:	4f 73       	andi	r20, 0x3F	; 63
 36c:	20 2d       	mov	r18, r0
 36e:	4f 73       	andi	r20, 0x3F	; 63
	sbi(TCCR0B, CS00);
 370:	20 2d       	mov	r18, r0
 372:	66 6d       	ori	r22, 0xD6	; 214
 374:	61 74       	andi	r22, 0x41	; 65

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 376:	68 2d       	mov	r22, r8
 378:	65 72       	andi	r22, 0x25	; 37
 37a:	72 6e       	ori	r23, 0xE2	; 226
 37c:	6f 20       	and	r6, r15
 37e:	2d 66       	ori	r18, 0x6D	; 109
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 380:	73 69       	ori	r23, 0x93	; 147
 382:	67 6e       	ori	r22, 0xE7	; 231

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 384:	65 64       	ori	r22, 0x45	; 69
 386:	2d 7a       	andi	r18, 0xAD	; 173
 388:	65 72       	andi	r22, 0x25	; 37
 38a:	6f 73       	andi	r22, 0x3F	; 63
 38c:	20 2d       	mov	r18, r0
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 38e:	66 74       	andi	r22, 0x46	; 70
 390:	72 61       	ori	r23, 0x12	; 18
 392:	70 70       	andi	r23, 0x00	; 0
 394:	69 6e       	ori	r22, 0xE9	; 233
 396:	67 2d       	mov	r22, r7
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 398:	6d 61       	ori	r22, 0x1D	; 29
 39a:	74 68       	ori	r23, 0x84	; 132
 39c:	20 2d       	mov	r18, r0
 39e:	66 6e       	ori	r22, 0xE6	; 230
 3a0:	6f 2d       	mov	r22, r15

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 3a2:	74 72       	andi	r23, 0x24	; 36
 3a4:	61 70       	andi	r22, 0x01	; 1
 3a6:	76 20       	and	r7, r6
 3a8:	2d 66       	ori	r18, 0x6D	; 109
 3aa:	6e 6f       	ori	r22, 0xFE	; 254

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 3ac:	2d 6f       	ori	r18, 0xFD	; 253
 3ae:	70 65       	ori	r23, 0x50	; 80
 3b0:	6e 6d       	ori	r22, 0xDE	; 222
 3b2:	70 20       	and	r7, r0
 3b4:	2d 66       	ori	r18, 0x6D	; 109
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 3b6:	6e 6f       	ori	r22, 0xFE	; 254
 3b8:	2d 6f       	ori	r18, 0xFD	; 253
 3ba:	70 65       	ori	r23, 0x50	; 80
 3bc:	6e 61       	ori	r22, 0x1E	; 30
 3be:	63 63       	ori	r22, 0x33	; 51
		sbi(ADCSRA, ADPS1);
 3c0:	20 2d       	mov	r18, r0
 3c2:	66 6e       	ori	r22, 0xE6	; 230
 3c4:	6f 2d       	mov	r22, r15
 3c6:	65 78       	andi	r22, 0x85	; 133
 3c8:	63 65       	ori	r22, 0x53	; 83
		sbi(ADCSRA, ADPS0);
 3ca:	70 74       	andi	r23, 0x40	; 64
 3cc:	69 6f       	ori	r22, 0xF9	; 249
 3ce:	6e 73       	andi	r22, 0x3E	; 62
 3d0:	20 2d       	mov	r18, r0
 3d2:	66 75       	andi	r22, 0x56	; 86
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 3d4:	73 65       	ori	r23, 0x53	; 83
 3d6:	2d 6c       	ori	r18, 0xCD	; 205
 3d8:	69 6e       	ori	r22, 0xE9	; 233
 3da:	6b 65       	ori	r22, 0x5B	; 91
 3dc:	72 2d       	mov	r23, r2
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 3de:	70 6c       	ori	r23, 0xC0	; 192
 3e0:	75 67       	ori	r23, 0x75	; 117
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 3e2:	69 6e       	ori	r22, 0xE9	; 233
 3e4:	20 2d       	mov	r18, r0
 3e6:	66 6c       	ori	r22, 0xC6	; 198
	uint8_t port = digitalPinToPort(pin);
 3e8:	74 72       	andi	r23, 0x24	; 36
 3ea:	61 6e       	ori	r22, 0xE1	; 225
 3ec:	73 00       	.word	0x0073	; ????
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 3ee:	74 69       	ori	r23, 0x94	; 148
 3f0:	6d 65       	ori	r22, 0x5D	; 93

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 3f2:	72 30       	cpi	r23, 0x02	; 2
 3f4:	5f 6d       	ori	r21, 0xDF	; 223
 3f6:	69 6c       	ori	r22, 0xC9	; 201
 3f8:	6c 69       	ori	r22, 0x9C	; 156
 3fa:	73 00       	.word	0x0073	; ????
 3fc:	70 69       	ori	r23, 0x90	; 144
 3fe:	6e 4d       	sbci	r22, 0xDE	; 222
 400:	6f 64       	ori	r22, 0x4F	; 79
	out = portOutputRegister(port);
 402:	65 00       	.word	0x0065	; ????
 404:	6f 6c       	ori	r22, 0xCF	; 207
 406:	64 53       	subi	r22, 0x34	; 52
 408:	52 45       	sbci	r21, 0x52	; 82
 40a:	47 00       	.word	0x0047	; ????
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 40c:	74 75       	andi	r23, 0x54	; 84
                cli();
 40e:	72 6e       	ori	r23, 0xE2	; 226
		*reg |= bit;
 410:	4f 66       	ori	r20, 0x6F	; 111
 412:	66 50       	subi	r22, 0x06	; 6
 414:	57 4d       	sbci	r21, 0xD7	; 215
		SREG = oldSREG;
 416:	2e 70       	andi	r18, 0x0E	; 14
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 418:	61 72       	andi	r22, 0x21	; 33

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
 41a:	74 2e       	mov	r7, r20
	m = timer0_millis;
 41c:	30 00       	.word	0x0030	; ????
 41e:	6d 61       	ori	r22, 0x1D	; 29
 420:	69 6e       	ori	r22, 0xE9	; 233
 422:	00 74       	andi	r16, 0x40	; 64
 424:	69 6d       	ori	r22, 0xD9	; 217
 426:	65 72       	andi	r22, 0x25	; 37
 428:	30 5f       	subi	r19, 0xF0	; 240
 42a:	66 72       	andi	r22, 0x26	; 38
	SREG = oldSREG;
 42c:	61 63       	ori	r22, 0x31	; 49
unsigned long _loopCounter = C_LOOP_COUNT;

void setup()
{
  pinMode(LED_BUILTIN, OUTPUT);
  _startTime_ms = millis();
 42e:	74 00       	.word	0x0074	; ????
 430:	75 69       	ori	r23, 0x95	; 149
 432:	6e 74       	andi	r22, 0x4E	; 78
 434:	38 5f       	subi	r19, 0xF8	; 248
 436:	74 00       	.word	0x0074	; ????
 438:	6d 6f       	ori	r22, 0xFD	; 253
 43a:	64 65       	ori	r22, 0x54	; 84
 43c:	00 74       	andi	r16, 0x40	; 64
 43e:	75 72       	andi	r23, 0x25	; 37
 440:	6e 4f       	sbci	r22, 0xFE	; 254
 442:	66 66       	ori	r22, 0x66	; 102
 444:	50 57       	subi	r21, 0x70	; 112
}

void loop() 
{
  if (0 == _loopCounter--) {
 446:	4d 00       	.word	0x004d	; ????
 448:	5f 5f       	subi	r21, 0xFF	; 255
 44a:	72 65       	ori	r23, 0x52	; 82
 44c:	73 75       	andi	r23, 0x53	; 83
 44e:	6c 74       	andi	r22, 0x4C	; 76
 450:	00 73       	andi	r16, 0x30	; 48
 452:	69 7a       	andi	r22, 0xA9	; 169
 454:	65 74       	andi	r22, 0x45	; 69
 456:	79 70       	andi	r23, 0x09	; 9
 458:	65 00       	.word	0x0065	; ????
 45a:	62 6c       	ori	r22, 0xC2	; 194
 45c:	69 6e       	ori	r22, 0xE9	; 233
 45e:	6b 43       	sbci	r22, 0x3B	; 59
 460:	6f 75       	andi	r22, 0x5F	; 95
 462:	6e 74       	andi	r22, 0x4E	; 78
 464:	00 70       	andi	r16, 0x00	; 0
 466:	6f 72       	andi	r22, 0x2F	; 47
 468:	74 00       	.word	0x0074	; ????
 46a:	5f 6c       	ori	r21, 0xCF	; 207
 46c:	6f 6f       	ori	r22, 0xFF	; 255
 46e:	70 43       	sbci	r23, 0x30	; 48
 470:	6f 75       	andi	r22, 0x5F	; 95
 472:	6e 74       	andi	r22, 0x4E	; 78
 474:	65 72       	andi	r22, 0x25	; 37
 476:	00 5f       	subi	r16, 0xF0	; 240
 478:	5f 76       	andi	r21, 0x6F	; 111
 47a:	65 63       	ori	r22, 0x35	; 53
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 47c:	74 6f       	ori	r23, 0xF4	; 244

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
 47e:	72 5f       	subi	r23, 0xF2	; 242
	m = timer0_millis;
 480:	31 36       	cpi	r19, 0x61	; 97
 482:	00 75       	andi	r16, 0x50	; 80
 484:	69 6e       	ori	r22, 0xE9	; 233
 486:	74 31       	cpi	r23, 0x14	; 20
 488:	36 5f       	subi	r19, 0xF6	; 246
 48a:	74 00       	.word	0x0074	; ????
 48c:	3c 61       	ori	r19, 0x1C	; 28
 48e:	72 74       	andi	r23, 0x42	; 66
	SREG = oldSREG;
 490:	69 66       	ori	r22, 0x69	; 105
}

void outputResults()
{
  const unsigned long endTime_ms = millis();
  float total_ms = ((float)(endTime_ms - _startTime_ms));
 492:	69 63       	ori	r22, 0x39	; 57
 494:	69 61       	ori	r22, 0x19	; 25
 496:	6c 3e       	cpi	r22, 0xEC	; 236
 498:	00 75       	andi	r16, 0x50	; 80
 49a:	69 6e       	ori	r22, 0xE9	; 233
 49c:	74 33       	cpi	r23, 0x34	; 52
 49e:	32 5f       	subi	r19, 0xF2	; 242
 4a0:	74 00       	.word	0x0074	; ????
 4a2:	74 6f       	ori	r23, 0xF4	; 244
 4a4:	74 61       	ori	r23, 0x14	; 20
 4a6:	6c 5f       	subi	r22, 0xFC	; 252
 4a8:	6d 73       	andi	r22, 0x3D	; 61
 4aa:	00 6e       	ori	r16, 0xE0	; 224
 4ac:	75 6d       	ori	r23, 0xD5	; 213
 4ae:	62 65       	ori	r22, 0x52	; 82
 4b0:	72 4f       	sbci	r23, 0xF2	; 242
 4b2:	66 44       	sbci	r22, 0x46	; 70
 4b4:	69 67       	ori	r22, 0x79	; 121
  const int numberOfDigits = (int)log10(total_ms);
 4b6:	69 74       	andi	r22, 0x49	; 73
 4b8:	73 00       	.word	0x0073	; ????
 4ba:	5f 73       	andi	r21, 0x3F	; 63
 4bc:	74 61       	ori	r23, 0x14	; 20
 4be:	72 74       	andi	r23, 0x42	; 66
  total_ms /= pow(10, numberOfDigits);
 4c0:	54 69       	ori	r21, 0x94	; 148
 4c2:	6d 65       	ori	r22, 0x5D	; 93
 4c4:	5f 6d       	ori	r21, 0xDF	; 223
 4c6:	73 00       	.word	0x0073	; ????
 4c8:	5f 5f       	subi	r21, 0xFF	; 255
 4ca:	65 6d       	ori	r22, 0xD5	; 213
 4cc:	70 74       	andi	r23, 0x40	; 64
 4ce:	79 00       	.word	0x0079	; ????

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
   0:	78 01       	movw	r14, r16
   2:	00 00       	nop
   4:	fa 01       	movw	r30, r20
   6:	00 00       	nop
   8:	01 00       	.word	0x0001	; ????
   a:	68 fa       	.word	0xfa68	; ????
   c:	01 00       	.word	0x0001	; ????
   e:	00 00       	nop
  10:	02 00       	.word	0x0002	; ????
  12:	00 04       	cpc	r0, r0
  14:	00 f3       	brcs	.-64     	; 0xffffffd6 <__eeprom_end+0xff7effd6>
  16:	01 68       	ori	r16, 0x81	; 129
  18:	9f 00       	.word	0x009f	; ????
  1a:	02 00       	.word	0x0002	; ????
  1c:	00 04       	cpc	r0, r0
  1e:	02 00       	.word	0x0002	; ????
  20:	00 01       	movw	r0, r0
  22:	00 68       	ori	r16, 0x80	; 128
  24:	04 02       	muls	r16, r20
  26:	00 00       	nop
  28:	0a 02       	muls	r16, r26
  2a:	00 00       	nop
  2c:	04 00       	.word	0x0004	; ????
  2e:	f3 01       	movw	r30, r6
  30:	68 9f       	mul	r22, r24
	...
  3a:	7e 01       	movw	r14, r28
  3c:	00 00       	nop
  3e:	a4 01       	movw	r20, r8
  40:	00 00       	nop
  42:	01 00       	.word	0x0001	; ????
  44:	69 a8       	ldd	r6, Y+49	; 0x31
  46:	01 00       	.word	0x0001	; ????
  48:	00 b8       	out	0x00, r0	; 0
  4a:	01 00       	.word	0x0001	; ????
  4c:	00 01       	movw	r0, r0
  4e:	00 69       	ori	r16, 0x90	; 144
  50:	bc 01       	movw	r22, r24
  52:	00 00       	nop
  54:	c0 01       	movw	r24, r0
  56:	00 00       	nop
  58:	01 00       	.word	0x0001	; ????
  5a:	69 c8       	rjmp	.-3886   	; 0xfffff12e <__eeprom_end+0xff7ef12e>
  5c:	01 00       	.word	0x0001	; ????
  5e:	00 ca       	rjmp	.-3072   	; 0xfffff460 <__eeprom_end+0xff7ef460>
  60:	01 00       	.word	0x0001	; ????
  62:	00 01       	movw	r0, r0
  64:	00 69       	ori	r16, 0x90	; 144
  66:	d0 01       	movw	r26, r0
  68:	00 00       	nop
  6a:	d4 01       	movw	r26, r8
  6c:	00 00       	nop
  6e:	01 00       	.word	0x0001	; ????
  70:	69 d8       	rcall	.-3886   	; 0xfffff144 <__eeprom_end+0xff7ef144>
  72:	01 00       	.word	0x0001	; ????
  74:	00 dc       	rcall	.-2048   	; 0xfffff876 <__eeprom_end+0xff7ef876>
  76:	01 00       	.word	0x0001	; ????
  78:	00 01       	movw	r0, r0
  7a:	00 69       	ori	r16, 0x90	; 144
	...
  84:	84 01       	movw	r16, r8
  86:	00 00       	nop
  88:	fc 01       	movw	r30, r24
  8a:	00 00       	nop
  8c:	01 00       	.word	0x0001	; ????
  8e:	62 fc       	sbrc	r6, 2
  90:	01 00       	.word	0x0001	; ????
  92:	00 fe       	sbrs	r0, 0
  94:	01 00       	.word	0x0001	; ????
  96:	00 04       	cpc	r0, r0
  98:	00 82       	st	Z, r0
  9a:	00 20       	and	r0, r0
  9c:	9f 00       	.word	0x009f	; ????
  9e:	02 00       	.word	0x0002	; ????
  a0:	00 04       	cpc	r0, r0
  a2:	02 00       	.word	0x0002	; ????
  a4:	00 01       	movw	r0, r0
  a6:	00 62       	ori	r16, 0x20	; 32
	...
  b0:	8a 01       	movw	r16, r20
  b2:	00 00       	nop
  b4:	e8 01       	movw	r28, r16
  b6:	00 00       	nop
  b8:	01 00       	.word	0x0001	; ????
  ba:	6e 00       	.word	0x006e	; ????
  bc:	00 00       	nop
  be:	00 00       	nop
  c0:	00 00       	nop
  c2:	00 f0       	brcs	.+0      	; 0xc4 <__SREG__+0x85>
  c4:	01 00       	.word	0x0001	; ????
  c6:	00 08       	sbc	r0, r0
  c8:	02 00       	.word	0x0002	; ????
  ca:	00 06       	cpc	r0, r16
  cc:	00 6a       	ori	r16, 0xA0	; 160
  ce:	93 01       	movw	r18, r6
  d0:	6b 93       	.word	0x936b	; ????
  d2:	01 00       	.word	0x0001	; ????
  d4:	00 00       	nop
  d6:	00 00       	nop
  d8:	00 00       	nop
  da:	00 f2       	brcs	.-128    	; 0x5c <__SREG__+0x1d>
  dc:	01 00       	.word	0x0001	; ????
  de:	00 08       	sbc	r0, r0
  e0:	02 00       	.word	0x0002	; ????
  e2:	00 01       	movw	r0, r0
  e4:	00 69       	ori	r16, 0x90	; 144
	...
  ee:	7c 01       	movw	r14, r24
  f0:	00 00       	nop
  f2:	82 01       	movw	r16, r4
  f4:	00 00       	nop
  f6:	06 00       	.word	0x0006	; ????
  f8:	6e 93       	st	-X, r22
  fa:	01 6f       	ori	r16, 0xF1	; 241
  fc:	93 01       	movw	r18, r6
	...
 106:	82 01       	movw	r16, r4
 108:	00 00       	nop
 10a:	88 01       	movw	r16, r16
 10c:	00 00       	nop
 10e:	06 00       	.word	0x0006	; ????
 110:	6e 93       	st	-X, r22
 112:	01 6f       	ori	r16, 0xF1	; 241
 114:	93 01       	movw	r18, r6
	...
 11e:	88 01       	movw	r16, r16
 120:	00 00       	nop
 122:	8a 01       	movw	r16, r20
 124:	00 00       	nop
 126:	06 00       	.word	0x0006	; ????
 128:	6e 93       	st	-X, r22
 12a:	01 6f       	ori	r16, 0xF1	; 241
 12c:	93 01       	movw	r18, r6
	...
 136:	94 01       	movw	r18, r8
 138:	00 00       	nop
 13a:	a4 01       	movw	r20, r8
 13c:	00 00       	nop
 13e:	01 00       	.word	0x0001	; ????
 140:	69 a8       	ldd	r6, Y+49	; 0x31
 142:	01 00       	.word	0x0001	; ????
 144:	00 b8       	out	0x00, r0	; 0
 146:	01 00       	.word	0x0001	; ????
 148:	00 01       	movw	r0, r0
 14a:	00 69       	ori	r16, 0x90	; 144
 14c:	bc 01       	movw	r22, r24
 14e:	00 00       	nop
 150:	c0 01       	movw	r24, r0
 152:	00 00       	nop
 154:	01 00       	.word	0x0001	; ????
 156:	69 c8       	rjmp	.-3886   	; 0xfffff22a <__eeprom_end+0xff7ef22a>
 158:	01 00       	.word	0x0001	; ????
 15a:	00 ca       	rjmp	.-3072   	; 0xfffff55c <__eeprom_end+0xff7ef55c>
 15c:	01 00       	.word	0x0001	; ????
 15e:	00 01       	movw	r0, r0
 160:	00 69       	ori	r16, 0x90	; 144
 162:	d0 01       	movw	r26, r0
 164:	00 00       	nop
 166:	d4 01       	movw	r26, r8
 168:	00 00       	nop
 16a:	01 00       	.word	0x0001	; ????
 16c:	69 d8       	rcall	.-3886   	; 0xfffff240 <__eeprom_end+0xff7ef240>
 16e:	01 00       	.word	0x0001	; ????
 170:	00 dc       	rcall	.-2048   	; 0xfffff972 <__eeprom_end+0xff7ef972>
 172:	01 00       	.word	0x0001	; ????
 174:	00 01       	movw	r0, r0
 176:	00 69       	ori	r16, 0x90	; 144
	...
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
 180:	ec 01       	movw	r28, r24
 182:	00 00       	nop
	uint8_t port = digitalPinToPort(pin);
 184:	f0 01       	movw	r30, r0
 186:	00 00       	nop
 188:	06 00       	.word	0x0006	; ????
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 18a:	6e 93       	st	-X, r22
 18c:	01 6f       	ori	r16, 0xF1	; 241
 18e:	93 01       	movw	r18, r6
	...
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 198:	1e 02       	muls	r17, r30
 19a:	00 00       	nop
 19c:	38 02       	muls	r19, r24
 19e:	00 00       	nop
 1a0:	0c 00       	.word	0x000c	; ????
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 1a2:	68 93       	.word	0x9368	; ????
 1a4:	01 69       	ori	r16, 0x91	; 145
 1a6:	93 01       	movw	r18, r6
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 1a8:	6a 93       	st	-Y, r22
 1aa:	01 6b       	ori	r16, 0xB1	; 177
 1ac:	93 01       	movw	r18, r6
	...
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 1b6:	0c 02       	muls	r16, r28
 1b8:	00 00       	nop
 1ba:	38 02       	muls	r19, r24
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 1bc:	00 00       	nop
 1be:	01 00       	.word	0x0001	; ????
 1c0:	63 38       	cpi	r22, 0x83	; 131
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 1c2:	02 00       	.word	0x0002	; ????
 1c4:	00 54       	subi	r16, 0x40	; 64
 1c6:	02 00       	.word	0x0002	; ????
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 1c8:	00 02       	muls	r16, r16
 1ca:	00 08       	sbc	r0, r0
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 1cc:	5f 00       	.word	0x005f	; ????
 1ce:	00 00       	nop
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 1d0:	00 00       	nop
 1d2:	00 00       	nop
 1d4:	00 54       	subi	r16, 0x40	; 64
 1d6:	02 00       	.word	0x0002	; ????
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 1d8:	00 56       	subi	r16, 0x60	; 96
 1da:	02 00       	.word	0x0002	; ????
 1dc:	00 03       	mulsu	r16, r16
 1de:	00 92 20 02 	sts	0x0220, r0	; 0x800220 <__bss_end+0x10f>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 1e2:	56 02       	muls	r21, r22
 1e4:	00 00       	nop
 1e6:	58 02       	muls	r21, r24
 1e8:	00 00       	nop
 1ea:	03 00       	.word	0x0003	; ????
 1ec:	92 20       	and	r9, r2
 1ee:	03 58       	subi	r16, 0x83	; 131

	uint8_t oldSREG = SREG;
 1f0:	02 00       	.word	0x0002	; ????
	cli();
 1f2:	00 5a       	subi	r16, 0xA0	; 160

	if (val == LOW) {
 1f4:	02 00       	.word	0x0002	; ????
 1f6:	00 03       	mulsu	r16, r16
		*out &= ~bit;
 1f8:	00 92 20 04 	sts	0x0420, r0	; 0x800420 <__bss_end+0x30f>
 1fc:	5a 02       	muls	r21, r26
 1fe:	00 00       	nop
	} else {
		*out |= bit;
 200:	5c 02       	muls	r21, r28
 202:	00 00       	nop
 204:	03 00       	.word	0x0003	; ????
	}

	SREG = oldSREG;
 206:	92 20       	and	r9, r2
 208:	05 5c       	subi	r16, 0xC5	; 197
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 20a:	02 00       	.word	0x0002	; ????
	
	cli();
 20c:	00 5e       	subi	r16, 0xE0	; 224
	m = timer0_overflow_count;
 20e:	02 00       	.word	0x0002	; ????
 210:	00 03       	mulsu	r16, r16
 212:	00 92 20 06 	sts	0x0620, r0	; 0x800620 <__bss_end+0x50f>
 216:	5e 02       	muls	r21, r30
 218:	00 00       	nop
 21a:	60 02       	muls	r22, r16
 21c:	00 00       	nop
#if defined(TCNT0)
	t = TCNT0;
 21e:	03 00       	.word	0x0003	; ????
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 220:	92 20       	and	r9, r2
 222:	07 60       	ori	r16, 0x07	; 7
 224:	02 00       	.word	0x0002	; ????
 226:	00 62       	ori	r16, 0x20	; 32
		m++;
 228:	02 00       	.word	0x0002	; ????
 22a:	00 03       	mulsu	r16, r16
 22c:	00 92 20 08 	sts	0x0820, r0	; 0x800820 <__bss_end+0x70f>
		m++;
#endif

	SREG = oldSREG;
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 230:	62 02       	muls	r22, r18
 232:	00 00       	nop
 234:	64 02       	muls	r22, r20
 236:	00 00       	nop
 238:	03 00       	.word	0x0003	; ????
 23a:	92 20       	and	r9, r2
 23c:	09 64       	ori	r16, 0x49	; 73
 23e:	02 00       	.word	0x0002	; ????
 240:	00 c8       	rjmp	.-4096   	; 0xfffff242 <__eeprom_end+0xff7ef242>
 242:	02 00       	.word	0x0002	; ????
 244:	00 03       	mulsu	r16, r16
 246:	00 92 20 0a 	sts	0x0A20, r0	; 0x800a20 <__bss_end+0x90f>
	...
}
 252:	54 02       	muls	r21, r20

void delay(unsigned long ms)
{
 254:	00 00       	nop
 256:	6b 02       	muls	r22, r27
 258:	00 00       	nop
 25a:	0c 00       	.word	0x000c	; ????
 25c:	66 93       	lac	Z, r22
 25e:	01 67       	ori	r16, 0x71	; 113
 260:	93 01       	movw	r18, r6
 262:	68 93       	.word	0x9368	; ????
 264:	01 69       	ori	r16, 0x91	; 145
 266:	93 01       	movw	r18, r6
	uint32_t start = micros();
 268:	6b 02       	muls	r22, r27
 26a:	00 00       	nop
 26c:	be 02       	muls	r27, r30
 26e:	00 00       	nop

	while (ms > 0) {
 270:	0c 00       	.word	0x000c	; ????
 272:	5c 93       	st	X, r21
 274:	01 5d       	subi	r16, 0xD1	; 209
 276:	93 01       	movw	r18, r6
 278:	5e 93       	st	-X, r21
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 27a:	01 5f       	subi	r16, 0xF1	; 241
 27c:	93 01       	movw	r18, r6
	...
 286:	70 02       	muls	r23, r16
 288:	00 00       	nop
 28a:	9e 02       	muls	r25, r30
 28c:	00 00       	nop
 28e:	0c 00       	.word	0x000c	; ????
 290:	58 93       	.word	0x9358	; ????
 292:	01 59       	subi	r16, 0x91	; 145
			ms--;
 294:	93 01       	movw	r18, r6
 296:	5a 93       	st	-Y, r21
 298:	01 5b       	subi	r16, 0xB1	; 177
 29a:	93 01       	movw	r18, r6
 29c:	9e 02       	muls	r25, r30
			start += 1000;
 29e:	00 00       	nop
 2a0:	aa 02       	muls	r26, r26
 2a2:	00 00       	nop
 2a4:	04 00       	.word	0x0004	; ????
 2a6:	78 e8       	ldi	r23, 0x88	; 136
 2a8:	07 9f       	mul	r16, r23
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 2aa:	aa 02       	muls	r26, r26
 2ac:	00 00       	nop
 2ae:	c6 02       	muls	r28, r22
 2b0:	00 00       	nop
 2b2:	0c 00       	.word	0x000c	; ????
 2b4:	58 93       	.word	0x9358	; ????
			ms--;
			start += 1000;
		}
	}
}
 2b6:	01 59       	subi	r16, 0x91	; 145
 2b8:	93 01       	movw	r18, r6
 2ba:	5a 93       	st	-Y, r21
 2bc:	01 5b       	subi	r16, 0xB1	; 177
 2be:	93 01       	movw	r18, r6
	...
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 2c8:	c8 02       	muls	r28, r24
 2ca:	00 00       	nop
 2cc:	ca 02       	muls	r28, r26
 2ce:	00 00       	nop
 2d0:	03 00       	.word	0x0003	; ????
 2d2:	92 20       	and	r9, r2
 2d4:	02 ca       	rjmp	.-3068   	; 0xfffff6da <__eeprom_end+0xff7ef6da>
 2d6:	02 00       	.word	0x0002	; ????
 2d8:	00 cc       	rjmp	.-2048   	; 0xfffffada <__eeprom_end+0xff7efada>
 2da:	02 00       	.word	0x0002	; ????
 2dc:	00 03       	mulsu	r16, r16
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 2de:	00 92 20 03 	sts	0x0320, r0	; 0x800320 <__bss_end+0x20f>
 2e2:	cc 02       	muls	r28, r28
 2e4:	00 00       	nop
 2e6:	d4 02       	muls	r29, r20
 2e8:	00 00       	nop
 2ea:	03 00       	.word	0x0003	; ????
 2ec:	92 20       	and	r9, r2
	unsigned char f = timer0_fract;
 2ee:	04 d4       	rcall	.+2056   	; 0xaf8 <pow+0x84>
 2f0:	02 00       	.word	0x0002	; ????

	m += MILLIS_INC;
	f += FRACT_INC;
 2f2:	00 d6       	rcall	.+3072   	; 0xef4 <__data_load_end+0x20e>
 2f4:	02 00       	.word	0x0002	; ????
	if (f >= FRACT_MAX) {
 2f6:	00 03       	mulsu	r16, r16
 2f8:	00 92 20 05 	sts	0x0520, r0	; 0x800520 <__bss_end+0x40f>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 2fc:	d6 02       	muls	r29, r22
 2fe:	00 00       	nop
 300:	d8 02       	muls	r29, r24
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 302:	00 00       	nop
 304:	03 00       	.word	0x0003	; ????
		m += 1;
 306:	92 20       	and	r9, r2
 308:	06 d8       	rcall	.-4084   	; 0xfffff316 <__eeprom_end+0xff7ef316>
 30a:	02 00       	.word	0x0002	; ????
	}

	timer0_fract = f;
 30c:	00 da       	rcall	.-3072   	; 0xfffff70e <__eeprom_end+0xff7ef70e>
 30e:	02 00       	.word	0x0002	; ????
	timer0_millis = m;
 310:	00 03       	mulsu	r16, r16
 312:	00 92 20 07 	sts	0x0720, r0	; 0x800720 <__bss_end+0x60f>
 316:	da 02       	muls	r29, r26
 318:	00 00       	nop
 31a:	dc 02       	muls	r29, r28
 31c:	00 00       	nop
 31e:	03 00       	.word	0x0003	; ????
	timer0_overflow_count++;
 320:	92 20       	and	r9, r2
 322:	08 dc       	rcall	.-2032   	; 0xfffffb34 <__eeprom_end+0xff7efb34>
 324:	02 00       	.word	0x0002	; ????
 326:	00 de       	rcall	.-1024   	; 0xffffff28 <__eeprom_end+0xff7eff28>
 328:	02 00       	.word	0x0002	; ????
 32a:	00 03       	mulsu	r16, r16
 32c:	00 92 20 09 	sts	0x0920, r0	; 0x800920 <__bss_end+0x80f>
 330:	de 02       	muls	r29, r30
 332:	00 00       	nop
 334:	5c 03       	fmul	r21, r20
 336:	00 00       	nop
 338:	03 00       	.word	0x0003	; ????
 33a:	92 20       	and	r9, r2
 33c:	0a 00       	.word	0x000a	; ????
 33e:	00 00       	nop
 340:	00 00       	nop
 342:	00 00       	nop
 344:	00 ee       	ldi	r16, 0xE0	; 224
}
 346:	02 00       	.word	0x0002	; ????
 348:	00 f2       	brcs	.-128    	; 0x2ca <__vector_16+0x2>
 34a:	02 00       	.word	0x0002	; ????
 34c:	00 0c       	add	r0, r0
 34e:	00 68       	ori	r16, 0x80	; 128
 350:	93 01       	movw	r18, r6
 352:	69 93       	st	Y+, r22
 354:	01 6a       	ori	r16, 0xA1	; 161
 356:	93 01       	movw	r18, r6
 358:	6b 93       	.word	0x936b	; ????
 35a:	01 f2       	breq	.-128    	; 0x2dc <__vector_16+0x14>

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 35c:	02 00       	.word	0x0002	; ????
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 35e:	00 00       	nop
 360:	03 00       	.word	0x0003	; ????
 362:	00 03       	mulsu	r16, r16
	sbi(TCCR0A, WGM00);
 364:	00 88       	ldd	r0, Z+16	; 0x10
 366:	01 9f       	mul	r16, r17
 368:	00 03       	mulsu	r16, r16
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 36a:	00 00       	nop
 36c:	02 03       	mulsu	r16, r18
 36e:	00 00       	nop
	sbi(TCCR0B, CS00);
 370:	0c 00       	.word	0x000c	; ????
 372:	68 93       	.word	0x9368	; ????
 374:	01 69       	ori	r16, 0x91	; 145

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 376:	93 01       	movw	r18, r6
 378:	6a 93       	st	-Y, r22
 37a:	01 6b       	ori	r16, 0xB1	; 177
 37c:	93 01       	movw	r18, r6
 37e:	02 03       	mulsu	r16, r18
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 380:	00 00       	nop
 382:	0c 03       	fmul	r16, r20

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 384:	00 00       	nop
 386:	03 00       	.word	0x0003	; ????
 388:	88 01       	movw	r16, r16
 38a:	9f 0c       	add	r9, r15
 38c:	03 00       	.word	0x0003	; ????
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 38e:	00 30       	cpi	r16, 0x00	; 0
 390:	03 00       	.word	0x0003	; ????
 392:	00 0c       	add	r0, r0
 394:	00 68       	ori	r16, 0x80	; 128
 396:	93 01       	movw	r18, r6
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 398:	69 93       	st	Y+, r22
 39a:	01 6a       	ori	r16, 0xA1	; 161
 39c:	93 01       	movw	r18, r6
 39e:	6b 93       	.word	0x936b	; ????
 3a0:	01 30       	cpi	r16, 0x01	; 1

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 3a2:	03 00       	.word	0x0003	; ????
 3a4:	00 46       	sbci	r16, 0x60	; 96
 3a6:	03 00       	.word	0x0003	; ????
 3a8:	00 05       	cpc	r16, r0
 3aa:	00 03       	mulsu	r16, r16

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 3ac:	09 01       	movw	r0, r18
 3ae:	80 00       	.word	0x0080	; ????
	...
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 3b8:	f2 02       	muls	r31, r18
 3ba:	00 00       	nop
 3bc:	f6 02       	muls	r31, r22
 3be:	00 00       	nop
		sbi(ADCSRA, ADPS1);
 3c0:	01 00       	.word	0x0001	; ????
 3c2:	63 f6       	brvc	.-104    	; 0x35c <main>
 3c4:	02 00       	.word	0x0002	; ????
 3c6:	00 04       	cpc	r0, r0
 3c8:	03 00       	.word	0x0003	; ????
		sbi(ADCSRA, ADPS0);
 3ca:	00 01       	movw	r0, r0
 3cc:	00 62       	ori	r16, 0x20	; 32
 3ce:	04 03       	mulsu	r16, r20
 3d0:	00 00       	nop
 3d2:	06 03       	mulsu	r16, r22
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 3d4:	00 00       	nop
 3d6:	03 00       	.word	0x0003	; ????
 3d8:	83 03       	fmuls	r16, r19
 3da:	9f 06       	cpc	r9, r31
 3dc:	03 00       	.word	0x0003	; ????
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 3de:	00 52       	subi	r16, 0x20	; 32
 3e0:	03 00       	.word	0x0003	; ????
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 3e2:	00 01       	movw	r0, r0
 3e4:	00 62       	ori	r16, 0x20	; 32
 3e6:	52 03       	mulsu	r21, r18
	uint8_t port = digitalPinToPort(pin);
 3e8:	00 00       	nop
 3ea:	56 03       	mulsu	r21, r22
 3ec:	00 00       	nop
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 3ee:	05 00       	.word	0x0005	; ????
 3f0:	03 08       	sbc	r0, r3

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 3f2:	01 80       	ldd	r0, Z+1	; 0x01
	...
 3fc:	00 e2       	ldi	r16, 0x20	; 32
 3fe:	03 00       	.word	0x0003	; ????
 400:	00 18       	sub	r0, r0
	out = portOutputRegister(port);
 402:	04 00       	.word	0x0004	; ????
 404:	00 02       	muls	r16, r16
 406:	00 3d       	cpi	r16, 0xD0	; 208
 408:	9f 00       	.word	0x009f	; ????
 40a:	00 00       	nop
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 40c:	00 00       	nop
                cli();
 40e:	00 00       	nop
		*reg |= bit;
 410:	00 e2       	ldi	r16, 0x20	; 32
 412:	03 00       	.word	0x0003	; ????
 414:	00 18       	sub	r0, r0
		SREG = oldSREG;
 416:	04 00       	.word	0x0004	; ????
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 418:	00 02       	muls	r16, r16

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
 41a:	00 31       	cpi	r16, 0x10	; 16
	m = timer0_millis;
 41c:	9f 00       	.word	0x009f	; ????
 41e:	00 00       	nop
 420:	00 00       	nop
 422:	00 00       	nop
 424:	00 e8       	ldi	r16, 0x80	; 128
 426:	03 00       	.word	0x0003	; ????
 428:	00 18       	sub	r0, r0
 42a:	04 00       	.word	0x0004	; ????
	SREG = oldSREG;
 42c:	00 01       	movw	r0, r0
unsigned long _loopCounter = C_LOOP_COUNT;

void setup()
{
  pinMode(LED_BUILTIN, OUTPUT);
  _startTime_ms = millis();
 42e:	00 62       	ori	r16, 0x20	; 32
	...
 438:	ee 03       	fmulsu	r22, r22
 43a:	00 00       	nop
 43c:	f8 03       	fmulsu	r23, r16
 43e:	00 00       	nop
 440:	01 00       	.word	0x0001	; ????
 442:	68 00       	.word	0x0068	; ????
 444:	00 00       	nop
}

void loop() 
{
  if (0 == _loopCounter--) {
 446:	00 00       	nop
 448:	00 00       	nop
 44a:	00 02       	muls	r16, r16
 44c:	04 00       	.word	0x0004	; ????
 44e:	00 18       	sub	r0, r0
 450:	04 00       	.word	0x0004	; ????
 452:	00 06       	cpc	r0, r16
 454:	00 6a       	ori	r16, 0xA0	; 160
 456:	93 01       	movw	r18, r6
 458:	6b 93       	.word	0x936b	; ????
 45a:	01 00       	.word	0x0001	; ????
 45c:	00 00       	nop
 45e:	00 00       	nop
 460:	00 00       	nop
 462:	00 e6       	ldi	r16, 0x60	; 96
 464:	03 00       	.word	0x0003	; ????
 466:	00 ec       	ldi	r16, 0xC0	; 192
 468:	03 00       	.word	0x0003	; ????
 46a:	00 06       	cpc	r0, r16
 46c:	00 6e       	ori	r16, 0xE0	; 224
 46e:	93 01       	movw	r18, r6
 470:	6f 93       	push	r22
 472:	01 00       	.word	0x0001	; ????
 474:	00 00       	nop
 476:	00 00       	nop
 478:	00 00       	nop
 47a:	00 e8       	ldi	r16, 0x80	; 128
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 47c:	03 00       	.word	0x0003	; ????

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
 47e:	00 1a       	sub	r0, r16
	m = timer0_millis;
 480:	04 00       	.word	0x0004	; ????
 482:	00 01       	movw	r0, r0
 484:	00 62       	ori	r16, 0x20	; 32
	...
 48e:	ec 03       	fmulsu	r22, r20
	SREG = oldSREG;
 490:	00 00       	nop
}

void outputResults()
{
  const unsigned long endTime_ms = millis();
  float total_ms = ((float)(endTime_ms - _startTime_ms));
 492:	fa 03       	fmulsu	r23, r18
 494:	00 00       	nop
 496:	06 00       	.word	0x0006	; ????
 498:	6e 93       	st	-X, r22
 49a:	01 6f       	ori	r16, 0xF1	; 241
 49c:	93 01       	movw	r18, r6
	...
 4a6:	fe 03       	fmulsu	r23, r22
 4a8:	00 00       	nop
 4aa:	02 04       	cpc	r0, r2
 4ac:	00 00       	nop
 4ae:	06 00       	.word	0x0006	; ????
 4b0:	6e 93       	st	-X, r22
 4b2:	01 6f       	ori	r16, 0xF1	; 241
 4b4:	93 01       	movw	r18, r6
	...
  const int numberOfDigits = (int)log10(total_ms);
 4be:	08 04       	cpc	r0, r8
  total_ms /= pow(10, numberOfDigits);
 4c0:	00 00       	nop
 4c2:	0c 04       	cpc	r0, r12
 4c4:	00 00       	nop
 4c6:	06 00       	.word	0x0006	; ????
 4c8:	6e 93       	st	-X, r22
 4ca:	01 6f       	ori	r16, 0xF1	; 241
 4cc:	93 01       	movw	r18, r6
	...
 4d6:	0e 04       	cpc	r0, r14
 4d8:	00 00       	nop
 4da:	18 04       	cpc	r1, r8
 4dc:	00 00       	nop
 4de:	01 00       	.word	0x0001	; ????
 4e0:	68 00       	.word	0x0068	; ????
 4e2:	00 00       	nop
 4e4:	00 00       	nop
 4e6:	00 00       	nop
 4e8:	00 2c       	mov	r0, r0
 4ea:	04 00       	.word	0x0004	; ????
  
  for (int i = 0; i <= numberOfDigits; i++) {
 4ec:	00 2e       	mov	r0, r16
 4ee:	04 00       	.word	0x0004	; ????
 4f0:	00 0c       	add	r0, r0
 4f2:	00 68       	ori	r16, 0x80	; 128
 4f4:	93 01       	movw	r18, r6
 4f6:	69 93       	st	Y+, r22
    digitalWrite(LED_BUILTIN, HIGH);
 4f8:	01 6a       	ori	r16, 0xA1	; 161
 4fa:	93 01       	movw	r18, r6
 4fc:	6b 93       	.word	0x936b	; ????
    delay(2000);
 4fe:	01 00       	.word	0x0001	; ????
 500:	00 00       	nop
 502:	00 00       	nop
 504:	00 00       	nop
 506:	00 1a       	sub	r0, r16
 508:	04 00       	.word	0x0004	; ????
    digitalWrite(LED_BUILTIN, LOW);
 50a:	00 2e       	mov	r0, r16
 50c:	04 00       	.word	0x0004	; ????
 50e:	00 01       	movw	r0, r0
    delay(250);
 510:	00 62       	ori	r16, 0x20	; 32
	...
 51a:	b6 04       	cpc	r11, r6
  
    int blinkCount = (int)total_ms;
 51c:	00 00       	nop
 51e:	ec 04       	cpc	r14, r12
 520:	00 00       	nop
 522:	0c 00       	.word	0x000c	; ????
 524:	5c 93       	st	X, r21
 526:	01 5d       	subi	r16, 0xD1	; 209
 528:	93 01       	movw	r18, r6
    for (int b = 0; b < blinkCount; b++) {
 52a:	5e 93       	st	-X, r21
 52c:	01 5f       	subi	r16, 0xF1	; 241
 52e:	93 01       	movw	r18, r6
 530:	ec 04       	cpc	r14, r12
 532:	00 00       	nop
      digitalWrite(LED_BUILTIN, HIGH);
 534:	96 05       	cpc	r25, r6
 536:	00 00       	nop
 538:	0c 00       	.word	0x000c	; ????
      delay(250);
 53a:	54 93       	xch	Z, r21
 53c:	01 55       	subi	r16, 0x51	; 81
 53e:	93 01       	movw	r18, r6
 540:	56 93       	lac	Z, r21
 542:	01 57       	subi	r16, 0x71	; 113
 544:	93 01       	movw	r18, r6
	...
      digitalWrite(LED_BUILTIN, LOW);
      delay(250);
 54e:	c0 04       	cpc	r12, r0
 550:	00 00       	nop
 552:	c8 04       	cpc	r12, r8
 554:	00 00       	nop
 556:	06 00       	.word	0x0006	; ????
    delay(2000);
    digitalWrite(LED_BUILTIN, LOW);
    delay(250);
  
    int blinkCount = (int)total_ms;
    for (int b = 0; b < blinkCount; b++) {
 558:	66 93       	lac	Z, r22
 55a:	01 67       	ori	r16, 0x71	; 113
 55c:	93 01       	movw	r18, r6
	...
      delay(250);
      digitalWrite(LED_BUILTIN, LOW);
      delay(250);
    }
  
    delay(1000);
 566:	90 04       	cpc	r9, r0
 568:	00 00       	nop
  
    total_ms = (total_ms - blinkCount) * 10;
 56a:	92 04       	cpc	r9, r2
 56c:	00 00       	nop
 56e:	0c 00       	.word	0x000c	; ????
 570:	68 93       	.word	0x9368	; ????
 572:	01 69       	ori	r16, 0x91	; 145
 574:	93 01       	movw	r18, r6
 576:	6a 93       	st	-Y, r22
 578:	01 6b       	ori	r16, 0xB1	; 177
 57a:	93 01       	movw	r18, r6
	...
 584:	7e 04       	cpc	r7, r14
 586:	00 00       	nop
 588:	92 04       	cpc	r9, r2
 58a:	00 00       	nop
 58c:	01 00       	.word	0x0001	; ????
 58e:	62 00       	.word	0x0062	; ????
 590:	00 00       	nop
  const unsigned long endTime_ms = millis();
  float total_ms = ((float)(endTime_ms - _startTime_ms));
  const int numberOfDigits = (int)log10(total_ms);
  total_ms /= pow(10, numberOfDigits);
  
  for (int i = 0; i <= numberOfDigits; i++) {
 592:	00 00       	nop
 594:	00 00       	nop
 596:	00 ec       	ldi	r16, 0xC0	; 192
 598:	04 00       	.word	0x0004	; ????
 59a:	00 f0       	brcs	.+0      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 59c:	04 00       	.word	0x0004	; ????
 59e:	00 02       	muls	r16, r16
 5a0:	00 30       	cpi	r16, 0x00	; 0
 5a2:	9f f0       	brie	.+38     	; 0x5ca <__addsf3+0x24>
 5a4:	04 00       	.word	0x0004	; ????
 5a6:	00 96       	adiw	r24, 0x00	; 0
 5a8:	05 00       	.word	0x0005	; ????
 5aa:	00 06       	cpc	r0, r16
 5ac:	00 6c       	ori	r16, 0xC0	; 192
 5ae:	93 01       	movw	r18, r6
 5b0:	6d 93       	st	X+, r22
 5b2:	01 00       	.word	0x0001	; ????
 5b4:	00 00       	nop
 5b6:	00 00       	nop
 5b8:	00 00       	nop
 5ba:	00 2a       	or	r0, r16
 5bc:	05 00       	.word	0x0005	; ????
 5be:	00 96       	adiw	r24, 0x00	; 0
 5c0:	05 00       	.word	0x0005	; ????
 5c2:	00 06       	cpc	r0, r16
 5c4:	00 5c       	subi	r16, 0xC0	; 192
 5c6:	93 01       	movw	r18, r6
 5c8:	5d 93       	st	X+, r21
 5ca:	01 00       	.word	0x0001	; ????
 5cc:	00 00       	nop
 5ce:	00 00       	nop
 5d0:	00 00       	nop
 5d2:	00 2a       	or	r0, r16
 5d4:	05 00       	.word	0x0005	; ????
 5d6:	00 2e       	mov	r0, r16
 5d8:	05 00       	.word	0x0005	; ????
 5da:	00 02       	muls	r16, r16
 5dc:	00 30       	cpi	r16, 0x00	; 0
 5de:	9f 2e       	mov	r9, r31
 5e0:	05 00       	.word	0x0005	; ????
 5e2:	00 96       	adiw	r24, 0x00	; 0
 5e4:	05 00       	.word	0x0005	; ????
 5e6:	00 06       	cpc	r0, r16
 5e8:	00 60       	ori	r16, 0x00	; 0
 5ea:	93 01       	movw	r18, r6
 5ec:	61 93       	st	Z+, r22
 5ee:	01 00       	.word	0x0001	; ????
 5f0:	00 00       	nop
 5f2:	00 00       	nop
 5f4:	00 00       	nop
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	46 04       	cpc	r4, r6
   2:	00 00       	nop
   4:	ec 04       	cpc	r14, r12
   6:	00 00       	nop
   8:	f0 04       	cpc	r15, r0
   a:	00 00       	nop
   c:	2a 05       	cpc	r18, r10
   e:	00 00       	nop
  10:	2e 05       	cpc	r18, r14
  12:	00 00       	nop
  14:	96 05       	cpc	r25, r6
	...
  1e:	00 00       	nop
  20:	7c 04       	cpc	r7, r12
  22:	00 00       	nop
  24:	ec 04       	cpc	r14, r12
  26:	00 00       	nop
  28:	f0 04       	cpc	r15, r0
  2a:	00 00       	nop
  2c:	2a 05       	cpc	r18, r10
  2e:	00 00       	nop
  30:	2e 05       	cpc	r18, r14
  32:	00 00       	nop
  34:	96 05       	cpc	r25, r6
	...
  3e:	00 00       	nop
  40:	f8 04       	cpc	r15, r8
  42:	00 00       	nop
  44:	2a 05       	cpc	r18, r10
  46:	00 00       	nop
  48:	2e 05       	cpc	r18, r14
  4a:	00 00       	nop
  4c:	92 05       	cpc	r25, r2
	...
  56:	00 00       	nop
  58:	78 01       	movw	r14, r16
  5a:	00 00       	nop
  5c:	5c 03       	fmul	r21, r20
  5e:	00 00       	nop
  60:	5c 03       	fmul	r21, r20
  62:	00 00       	nop
  64:	a4 05       	cpc	r26, r4
	...
